{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"index.jsx","mainFileName":"index.jsx","scriptFiles":[],"styleFiles":[],"files":{"style.css":".example-wrapper {\n    display: flex;\n    height: 100%;\n}\n\n.inner-col {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    flex: 1 1 auto;\n    min-width: 0;\n}\n\n.inner-col.vertical-toolbar {\n    display: flex;\n    flex: none;\n    width: 100px;\n    align-items: center;\n    justify-content: center;\n}\n\n.toolbar {\n    white-space: nowrap;\n}\n\n.vertical-toolbar > span {\n    padding: 10px;\n    margin: 10px;\n    cursor: default;\n    user-select: none;\n    -ms-user-select: none;\n    -moz-user-select: none;\n    -webkit-user-modify: none;\n}\n\nbutton.factory {\n    height: 25px;\n    border-radius: 5px;\n    border: none;\n    color: white;\n    outline: none;\n    cursor: pointer;\n}\n\nbutton i {\n    margin-right: 10px;\n}\n\n.bin i {\n    transform: scale(1);\n    transition: transform 500ms;\n}\n\n.factory-red {\n    background-color: #cc333344;\n}\n.factory-green {\n    background-color: #33cc3344;\n}\n.factory-blue {\n    background-color: #2244cc44;\n}\n\n.red-row {\n    background-color: #cc333344;\n}\n.green-row {\n    background-color: #33cc3344;\n}\n.blue-row {\n    background-color: #2244cc44;\n}\n","styles.css":".example-wrapper {\n    display: flex;\n    height: 100%;\n}\n\n.inner-col {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    flex: 1 1 auto;\n    min-width: 0;\n}\n\n.inner-col.vertical-toolbar {\n    display: flex;\n    flex: none;\n    width: 100px;\n    align-items: center;\n    justify-content: center;\n}\n\n.toolbar {\n    white-space: nowrap;\n}\n\n.vertical-toolbar > span {\n    padding: 10px;\n    margin: 10px;\n    cursor: default;\n    user-select: none;\n    -ms-user-select: none;\n    -moz-user-select: none;\n    -webkit-user-modify: none;\n}\n\nbutton.factory {\n    height: 25px;\n    border-radius: 5px;\n    border: none;\n    color: white;\n    outline: none;\n    cursor: pointer;\n    margin-right: 2px;\n}\n\nbutton i {\n    margin-right: 10px;\n}\n\n.bin i {\n    transform: scale(1);\n    transition: transform 500ms;\n}\n\n.factory-red {\n    background-color: #cc333344;\n}\n.factory-green {\n    background-color: #33cc3344;\n}\n.factory-blue {\n    background-color: #2244cc44;\n}\n\n.red-row {\n    background-color: #cc333344 !important;\n}\n.green-row {\n    background-color: #33cc3344 !important;\n}\n.blue-row {\n    background-color: #2244cc44 !important;\n}\n","index.jsx":"'use client';\nimport React, { StrictMode, useCallback, useEffect, useRef, useState, } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { ClientSideRowModelApiModule, ClientSideRowModelModule, ModuleRegistry, RowApiModule, RowDragModule, RowStyleModule, TextFilterModule, ValidationModule, } from \"ag-grid-community\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"./styles.css\";\nModuleRegistry.registerModules([\n    ClientSideRowModelApiModule,\n    RowApiModule,\n    TextFilterModule,\n    RowDragModule,\n    RowStyleModule,\n    ClientSideRowModelModule,\n    ValidationModule /* Development Only */,\n]);\nconst columns = [\n    { field: \"id\", rowDrag: true },\n    { field: \"color\" },\n    { field: \"value1\" },\n    { field: \"value2\" },\n];\nconst rowClassRules = {\n    \"red-row\": 'data.color == \"Red\"',\n    \"green-row\": 'data.color == \"Green\"',\n    \"blue-row\": 'data.color == \"Blue\"',\n};\nconst defaultColDef = {\n    flex: 1,\n    minWidth: 100,\n    filter: true,\n};\nconst GridExample = () => {\n    const [leftApi, setLeftApi] = useState(null);\n    const [rightApi, setRightApi] = useState(null);\n    const [leftRowData, setLeftRowData] = useState([]);\n    const [rightRowData, setRightRowData] = useState([]);\n    const eLeftGrid = useRef(null);\n    const eRightGrid = useRef(null);\n    const eBin = useRef(null);\n    const eBinIcon = useRef(null);\n    let rowIdSequence = 100;\n    const createDataItem = useCallback((color) => {\n        const obj = {\n            id: rowIdSequence++,\n            color: color,\n            value1: Math.floor(Math.random() * 100),\n            value2: Math.floor(Math.random() * 100),\n        };\n        return obj;\n    }, [rowIdSequence]);\n    useEffect(() => {\n        const createRowBlock = (blocks) => Array.apply(null, Array(blocks || 1))\n            .map(() => [\"Red\", \"Green\", \"Blue\"].map((color) => createDataItem(color)))\n            .reduce((prev, curr) => prev.concat(curr), []);\n        setLeftRowData(createRowBlock(2));\n        setRightRowData(createRowBlock(2));\n    }, [createDataItem]);\n    const getRowId = (params) => String(params.data.id);\n    const addRecordToGrid = (side, data) => {\n        // if data missing or data has no it, do nothing\n        if (!data || data.id == null) {\n            return;\n        }\n        const api = side === \"left\" ? leftApi : rightApi;\n        // do nothing if row is already in the grid, otherwise we would have duplicates\n        const rowAlreadyInGrid = !!api.getRowNode(data.id);\n        let transaction;\n        if (rowAlreadyInGrid) {\n            console.log(\"not adding row to avoid duplicates in the grid\");\n            return;\n        }\n        transaction = {\n            add: [data],\n        };\n        api.applyTransaction(transaction);\n    };\n    const onFactoryButtonClick = (e) => {\n        const button = e.currentTarget, buttonColor = button.getAttribute(\"data-color\"), side = button.getAttribute(\"data-side\"), data = createDataItem(buttonColor);\n        addRecordToGrid(side, data);\n    };\n    const binDrop = (data) => {\n        // if data missing or data has no id, do nothing\n        if (!data || data.id == null) {\n            return;\n        }\n        const transaction = {\n            remove: [data],\n        };\n        [leftApi, rightApi].forEach((api) => {\n            const rowsInGrid = !!api.getRowNode(data.id);\n            if (rowsInGrid) {\n                api.applyTransaction(transaction);\n            }\n        });\n    };\n    const addBinZone = (api) => {\n        const dropZone = {\n            getContainer: () => eBinIcon.current,\n            onDragEnter: () => {\n                eBin.current.style.color = \"blue\";\n                eBinIcon.current.style.transform = \"scale(1.5)\";\n            },\n            onDragLeave: () => {\n                eBin.current.style.color = \"\";\n                eBinIcon.current.style.transform = \"scale(1)\";\n            },\n            onDragStop: (params) => {\n                binDrop(params.node.data);\n                eBin.current.style.color = \"\";\n                eBinIcon.current.style.transform = \"scale(1)\";\n            },\n        };\n        api.addRowDropZone(dropZone);\n    };\n    const addGridDropZone = (side, api) => {\n        const dropApi = side === \"Left\" ? rightApi : leftApi;\n        const dropZone = dropApi.getRowDropZoneParams();\n        api.addRowDropZone(dropZone);\n    };\n    useEffect(() => {\n        if (rightApi && leftApi) {\n            addBinZone(rightApi);\n            addBinZone(leftApi);\n            addGridDropZone(\"Right\", rightApi);\n            addGridDropZone(\"Left\", leftApi);\n        }\n    });\n    const onGridReady = (side, params) => {\n        if (side === \"Left\") {\n            setLeftApi(params.api);\n        }\n        else {\n            setRightApi(params.api);\n        }\n    };\n    const getAddRecordButton = (side, color) => (<button key={`btn_${side}_${color}`} className={`factory factory-${color.toLowerCase()}`} data-color={color} data-side={side.toLowerCase()} onClick={onFactoryButtonClick}>\n      <i className=\"far fa-plus-square\"></i>\n      {`Add ${color}`}\n    </button>);\n    const getInnerGridCol = (side) => (<div className=\"inner-col\">\n      <div className=\"toolbar\">\n        {[\"Red\", \"Green\", \"Blue\"].map((color) => getAddRecordButton(side, color))}\n      </div>\n      <div style={{ height: \"100%\" }} className=\"inner-col\" ref={side === \"Left\" ? eLeftGrid : eRightGrid}>\n        <AgGridReact defaultColDef={defaultColDef} getRowId={getRowId} rowClassRules={rowClassRules} rowDragManaged={true} suppressMoveWhenRowDragging={true} rowData={side === \"Left\" ? leftRowData : rightRowData} columnDefs={[...columns]} onGridReady={(params) => onGridReady(side, params)}/>\n      </div>\n    </div>);\n    return (<div className=\"example-wrapper\">\n      {getInnerGridCol(\"Left\")}\n      <div className=\"inner-col vertical-toolbar\">\n        <span className=\"bin\" ref={eBin}>\n          <i className=\"far fa-trash-alt fa-3x\" ref={eBinIcon}></i>\n        </span>\n      </div>\n      {getInnerGridCol(\"Right\")}\n    </div>);\n};\nconst root = createRoot(document.getElementById(\"root\"));\nroot.render(<StrictMode>\n    <GridExample />\n  </StrictMode>);\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            jsx: 'react',\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            // react\n            react: 'npm:react@18.2.0',\n            'react-dom': 'npm:react-dom@18.2.0',\n            'react-dom/client': 'npm:react-dom@18.2.0',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            css: {},\n            react: {\n                main: './umd/react.production.min.js',\n            },\n            'react-dom': {\n                main: './umd/react-dom.production.min.js',\n            },\n            'react-dom/server': {\n                main: '../umd/react-dom-server.browser.production.min.js',\n            },\n            app: {\n                main: './index.jsx',\n                defaultExtension: 'jsx',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"react":"18","react-dom":"18","@types/react":"18","@types/react-dom":"18","ag-grid-react":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}},"extras":["fontawesome"]}