{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"main.ts","styleFiles":["style.css"],"files":{"style.css":".example-wrapper {\n    display: flex;\n    height: 100%;\n}\n\n.inner-col {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    flex: 1 1 auto;\n    min-width: 0;\n}\n\n.inner-col.vertical-toolbar {\n    display: flex;\n    flex: none;\n    width: 100px;\n    align-items: center;\n    justify-content: center;\n}\n\n.toolbar {\n    white-space: nowrap;\n}\n\n.vertical-toolbar > span {\n    padding: 10px;\n    margin: 10px;\n    cursor: default;\n    user-select: none;\n    -ms-user-select: none;\n    -moz-user-select: none;\n    -webkit-user-modify: none;\n}\n\nbutton.factory {\n    height: 25px;\n    border-radius: 5px;\n    border: none;\n    color: white;\n    outline: none;\n    cursor: pointer;\n}\n\nbutton i {\n    margin-right: 10px;\n}\n\n.bin i {\n    transform: scale(1);\n    transition: transform 500ms;\n}\n\n.factory-red {\n    background-color: #cc333344;\n}\n.factory-green {\n    background-color: #33cc3344;\n}\n.factory-blue {\n    background-color: #2244cc44;\n}\n\n.red-row {\n    background-color: #cc333344;\n}\n.green-row {\n    background-color: #33cc3344;\n}\n.blue-row {\n    background-color: #2244cc44;\n}\n","main.ts":"import {\n  ClientSideRowModelApiModule,\n  ClientSideRowModelModule,\n  ColDef,\n  GetRowIdParams,\n  GridApi,\n  GridOptions,\n  GridReadyEvent,\n  ModuleRegistry,\n  RowApiModule,\n  RowDragModule,\n  RowDropZoneParams,\n  RowStyleModule,\n  TextFilterModule,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\n\n// Register the required feature modules with the Grid\nModuleRegistry.registerModules([\n  ClientSideRowModelApiModule,\n  RowApiModule,\n  TextFilterModule,\n  RowDragModule,\n  RowStyleModule,\n  ClientSideRowModelModule,\n  ValidationModule /* Development Only */,\n]);\n\nlet rowIdSequence = 100;\n\nconst leftColumnDefs: ColDef[] = [\n  { field: \"id\", rowDrag: true },\n  { field: \"color\" },\n  { field: \"value1\" },\n  { field: \"value2\" },\n];\n\nconst rightColumnDefs: ColDef[] = [\n  { field: \"id\", rowDrag: true },\n  { field: \"color\" },\n  { field: \"value1\" },\n  { field: \"value2\" },\n];\nlet leftApi: GridApi;\nconst leftGridOptions: GridOptions = {\n  defaultColDef: {\n    flex: 1,\n    minWidth: 100,\n    filter: true,\n  },\n  rowClassRules: {\n    \"red-row\": 'data.color == \"Red\"',\n    \"green-row\": 'data.color == \"Green\"',\n    \"blue-row\": 'data.color == \"Blue\"',\n  },\n  getRowId: (params: GetRowIdParams) => {\n    return String(params.data.id);\n  },\n  rowData: createRowBlock(2),\n  rowDragManaged: true,\n  suppressMoveWhenRowDragging: true,\n  columnDefs: leftColumnDefs,\n  onGridReady: (params) => {\n    addBinZone(params);\n    addGridDropZone(params, \"Right\");\n  },\n};\nlet rightApi: GridApi;\nconst rightGridOptions: GridOptions = {\n  defaultColDef: {\n    flex: 1,\n    minWidth: 100,\n    filter: true,\n  },\n  rowClassRules: {\n    \"red-row\": 'data.color == \"Red\"',\n    \"green-row\": 'data.color == \"Green\"',\n    \"blue-row\": 'data.color == \"Blue\"',\n  },\n  getRowId: (params: GetRowIdParams) => {\n    return String(params.data.id);\n  },\n  rowData: createRowBlock(2),\n  rowDragManaged: true,\n  suppressMoveWhenRowDragging: true,\n  columnDefs: rightColumnDefs,\n  onGridReady: (params) => {\n    addBinZone(params);\n    addGridDropZone(params, \"Left\");\n  },\n};\n\nfunction createRowBlock(blocks: number) {\n  blocks = blocks || 1;\n\n  let output: any[] = [];\n\n  for (let i = 0; i < blocks; i++) {\n    output = output.concat(\n      [\"Red\", \"Green\", \"Blue\"].map(function (color) {\n        return createDataItem(color);\n      }),\n    );\n  }\n\n  return output;\n}\n\nfunction createDataItem(color: string) {\n  return {\n    id: rowIdSequence++,\n    color: color,\n    value1: Math.floor(Math.random() * 100),\n    value2: Math.floor(Math.random() * 100),\n  };\n}\n\nfunction addRecordToGrid(side: string, data: any) {\n  // if data missing or data has no it, do nothing\n  if (!data || data.id == null) {\n    return;\n  }\n\n  let gridApi = side === \"left\" ? leftApi : rightApi,\n    // do nothing if row is already in the grid, otherwise we would have duplicates\n    rowAlreadyInGrid = !!gridApi!.getRowNode(data.id),\n    transaction;\n\n  if (rowAlreadyInGrid) {\n    console.log(\"not adding row to avoid duplicates in the grid\");\n    return;\n  }\n\n  transaction = {\n    add: [data],\n  };\n\n  gridApi!.applyTransaction(transaction);\n}\n\nfunction onFactoryButtonClick(e: any) {\n  const button = e.currentTarget,\n    buttonColor = button.getAttribute(\"data-color\"),\n    side = button.getAttribute(\"data-side\"),\n    data = createDataItem(buttonColor);\n\n  addRecordToGrid(side, data);\n}\n\nfunction binDrop(data: any) {\n  // if data missing or data has no id, do nothing\n  if (!data || data.id == null) {\n    return;\n  }\n\n  const transaction = {\n    remove: [data],\n  };\n\n  [leftApi, rightApi].forEach((gridApi) => {\n    const rowsInGrid = !!gridApi!.getRowNode(data.id);\n\n    if (rowsInGrid) {\n      gridApi!.applyTransaction(transaction);\n    }\n  });\n}\n\nfunction addBinZone(params: GridReadyEvent) {\n  const eBin = document.querySelector(\".bin\") as any,\n    icon = eBin.querySelector(\"i\"),\n    dropZone: RowDropZoneParams = {\n      getContainer: () => {\n        return eBin;\n      },\n      onDragEnter: () => {\n        eBin.style.color = \"blue\";\n        icon.style.transform = \"scale(1.5)\";\n      },\n      onDragLeave: () => {\n        eBin.style = \"\";\n        icon.style.transform = \"scale(1)\";\n      },\n      onDragStop: (params) => {\n        binDrop(params.node.data);\n        eBin.style = \"\";\n        icon.style.transform = \"scale(1)\";\n      },\n    };\n\n  params.api.addRowDropZone(dropZone);\n}\n\nfunction addGridDropZone(params: GridReadyEvent, side: string) {\n  const gridApi = (side === \"Left\" ? leftApi : rightApi)!;\n  const dropZone = gridApi.getRowDropZoneParams();\n\n  params.api.addRowDropZone(dropZone);\n}\n\nfunction loadGrid(side: string) {\n  const grid = document.querySelector<HTMLElement>(\"#e\" + side + \"Grid\")!;\n  if (side === \"Left\") {\n    leftApi = createGrid(grid, leftGridOptions);\n  } else {\n    rightApi = createGrid(grid, rightGridOptions);\n  }\n}\n\nconst buttons = document.querySelectorAll(\"button.factory\");\n\nfor (let i = 0; i < buttons.length; i++) {\n  buttons[i].addEventListener(\"click\", onFactoryButtonClick);\n}\n\nloadGrid(\"Left\");\nloadGrid(\"Right\");\n","index.html":"<div class=\"example-wrapper\">\n    <div class=\"inner-col\">\n        <div class=\"toolbar\">\n            <button class=\"factory factory-red\" data-color=\"Red\" data-side=\"left\">\n                <i class=\"far fa-plus-square\"></i>Add Red\n            </button>\n            <button class=\"factory factory-green\" data-color=\"Green\" data-side=\"left\">\n                <i class=\"far fa-plus-square\"></i>Add Green\n            </button>\n            <button class=\"factory factory-blue\" data-color=\"Blue\" data-side=\"left\">\n                <i class=\"far fa-plus-square\"></i>Add Blue\n            </button>\n        </div>\n        <div id=\"eLeftGrid\" style=\"height: 100%\" class=\"inner-col\"></div>\n    </div>\n\n    <div class=\"inner-col vertical-toolbar\">\n        <span class=\"bin\">\n            <i class=\"far fa-trash-alt fa-3x\"></i>\n        </span>\n    </div>\n    <div class=\"inner-col\">\n        <div class=\"toolbar\">\n            <button class=\"factory factory-red\" data-color=\"Red\" data-side=\"right\">\n                <i class=\"far fa-plus-square\"></i>Add Red\n            </button>\n            <button class=\"factory factory-green\" data-color=\"Green\" data-side=\"right\">\n                <i class=\"far fa-plus-square\"></i>Add Green\n            </button>\n            <button class=\"factory factory-blue\" data-color=\"Blue\" data-side=\"right\">\n                <i class=\"far fa-plus-square\"></i>Add Blue\n            </button>\n        </div>\n        <div id=\"eRightGrid\" style=\"height: 100%\" class=\"inner-col\"></div>\n    </div>\n</div>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {},\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        // map tells the System loader where to look for things\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            // appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap,\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {},\n            app: {\n                main: './main.ts',\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}},"extras":["fontawesome"]}