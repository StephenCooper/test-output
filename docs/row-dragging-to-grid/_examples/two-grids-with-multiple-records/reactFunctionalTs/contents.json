{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"index.tsx","mainFileName":"index.tsx","scriptFiles":[],"styleFiles":[],"files":{"style.css":".top-container {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\n.example-toolbar label {\n    margin: 0 15px 0 0;\n}\n\n.example-toolbar input[type='radio'] {\n    margin: 0 0.25rem 0 0;\n}\n\n.grid-wrapper {\n    display: flex;\n    flex: 1 1 auto;\n    margin-top: 5px;\n}\n\n.grid-wrapper .panel {\n    flex: 1 1 50%;\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n}\n\n.grid-wrapper .panel-body {\n    flex: 1 1 auto;\n    overflow: hidden;\n    padding: 0;\n    display: flex;\n}\n\n.grid-wrapper .panel-body > div {\n    width: 100%;\n}\n","styles.css":".top-container {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\n.panel-body {\n    display: flex;\n    align-items: center;\n}\n\n.example-toolbar label {\n    margin: 0 15px 0 0;\n}\n\n.example-toolbar input[type='radio'] {\n    margin: 0 0.25rem 0 0;\n}\n\n.grid-wrapper {\n    display: flex;\n    flex: 1 1 auto;\n    margin-top: 5px;\n}\n\n.grid-wrapper .panel {\n    flex: 1 1 50%;\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n}\n\n.grid-wrapper .panel-body {\n    flex: 1 1 auto;\n    overflow: hidden;\n    padding: 0;\n    display: flex;\n}\n\n.grid-wrapper .panel-body > div {\n    width: 100%;\n}\n","index.tsx":"'use client';\nimport React, { StrictMode, useCallback, useEffect, useState } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport type {\n  ColDef,\n  GetRowIdParams,\n  GridApi,\n  GridReadyEvent,\n  RowDragEndEvent,\n  RowSelectionOptions,\n} from \"ag-grid-community\";\nimport {\n  ClientSideRowModelApiModule,\n  ClientSideRowModelModule,\n  ModuleRegistry,\n  RowDragModule,\n  RowSelectionModule,\n  TextFilterModule,\n  ValidationModule,\n} from \"ag-grid-community\";\nimport type { CustomCellRendererProps } from \"ag-grid-react\";\nimport { AgGridReact } from \"ag-grid-react\";\n\nimport \"./styles.css\";\n\nModuleRegistry.registerModules([\n  ClientSideRowModelApiModule,\n  TextFilterModule,\n  RowDragModule,\n  RowSelectionModule,\n  ClientSideRowModelModule,\n  ValidationModule /* Development Only */,\n]);\n\nconst SportRenderer = (props: CustomCellRendererProps) => {\n  return (\n    <i\n      className=\"far fa-trash-alt\"\n      style={{ cursor: \"pointer\" }}\n      onClick={() => props.api.applyTransaction({ remove: [props.node.data] })}\n    ></i>\n  );\n};\n\nconst leftColumns: ColDef[] = [\n  {\n    rowDrag: true,\n    maxWidth: 50,\n    suppressHeaderMenuButton: true,\n    suppressHeaderFilterButton: true,\n    rowDragText: (params, dragItemCount) => {\n      if (dragItemCount > 1) {\n        return dragItemCount + \" athletes\";\n      }\n      return params.rowNode!.data.athlete;\n    },\n  },\n  { field: \"athlete\" },\n  { field: \"sport\" },\n];\n\nconst rightColumns: ColDef[] = [\n  {\n    rowDrag: true,\n    maxWidth: 50,\n    suppressHeaderMenuButton: true,\n    suppressHeaderFilterButton: true,\n    rowDragText: (params, dragItemCount) => {\n      if (dragItemCount > 1) {\n        return dragItemCount + \" athletes\";\n      }\n      return params.rowNode!.data.athlete;\n    },\n  },\n  { field: \"athlete\" },\n  { field: \"sport\" },\n  {\n    suppressHeaderMenuButton: true,\n    suppressHeaderFilterButton: true,\n    maxWidth: 50,\n    cellRenderer: SportRenderer,\n  },\n];\n\nconst defaultColDef: ColDef = {\n  flex: 1,\n  minWidth: 100,\n  filter: true,\n};\n\nconst rowSelection: RowSelectionOptions = {\n  mode: \"multiRow\",\n};\n\nconst GridExample = () => {\n  const [leftApi, setLeftApi] = useState<GridApi | null>(null);\n  const [rightApi, setRightApi] = useState<GridApi | null>(null);\n  const [rawData, setRawData] = useState<any[]>([]);\n  const [leftRowData, setLeftRowData] = useState<any[] | null>(null);\n  const [rightRowData, setRightRowData] = useState<any[]>([]);\n  const [radioChecked, setRadioChecked] = useState(0);\n\n  useEffect(() => {\n    if (!rawData.length) {\n      fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n        .then((resp) => resp.json())\n        .then((data) => {\n          const athletes: any[] = [];\n          let i = 0;\n\n          while (athletes.length < 20 && i < data.length) {\n            var pos = i++;\n            if (athletes.some((rec) => rec.athlete === data[pos].athlete)) {\n              continue;\n            }\n            athletes.push(data[pos]);\n          }\n          setRawData(athletes);\n        });\n    }\n  }, [rawData]);\n\n  const loadGrids = useCallback(() => {\n    setLeftRowData([...rawData]);\n    setRightRowData([]);\n    leftApi!.deselectAll();\n  }, [leftApi, rawData]);\n\n  useEffect(() => {\n    if (rawData.length) {\n      loadGrids();\n    }\n  }, [rawData, loadGrids]);\n\n  const reset = () => {\n    setRadioChecked(0);\n    loadGrids();\n  };\n\n  const onRadioChange = (e: any) => {\n    setRadioChecked(parseInt(e.target.value, 10));\n  };\n\n  const getRowId = (params: GetRowIdParams) => params.data.athlete;\n\n  const onDragStop = useCallback(\n    (params: RowDragEndEvent) => {\n      const nodes = params.nodes;\n\n      if (radioChecked === 0) {\n        leftApi!.applyTransaction({\n          remove: nodes.map(function (node) {\n            return node.data;\n          }),\n        });\n      } else if (radioChecked === 1) {\n        leftApi!.setNodesSelected({ nodes, newValue: false });\n      }\n    },\n    [leftApi, radioChecked],\n  );\n\n  useEffect(() => {\n    if (!leftApi || !rightApi) {\n      return;\n    }\n    const dropZoneParams = rightApi.getRowDropZoneParams({ onDragStop });\n\n    leftApi.removeRowDropZone(dropZoneParams);\n    leftApi.addRowDropZone(dropZoneParams);\n  }, [leftApi, rightApi, onDragStop]);\n\n  const onGridReady = (params: GridReadyEvent, side: number) => {\n    if (side === 0) {\n      setLeftApi(params.api);\n    }\n\n    if (side === 1) {\n      setRightApi(params.api);\n    }\n  };\n\n  const getTopToolBar = () => (\n    <div className=\"example-toolbar panel panel-default\">\n      <div className=\"panel-body\">\n        <div onChange={onRadioChange}>\n          <input\n            type=\"radio\"\n            id=\"move\"\n            name=\"radio\"\n            value=\"0\"\n            checked={radioChecked === 0}\n          />{\" \"}\n          <label htmlFor=\"move\">Remove Source Rows</label>\n          <input\n            type=\"radio\"\n            id=\"deselect\"\n            name=\"radio\"\n            value=\"1\"\n            checked={radioChecked === 1}\n          />{\" \"}\n          <label htmlFor=\"deselect\">Only Deselect Source Rows</label>\n          <input\n            type=\"radio\"\n            id=\"none\"\n            name=\"radio\"\n            value=\"2\"\n            checked={radioChecked === 2}\n          />{\" \"}\n          <label htmlFor=\"none\">None</label>\n        </div>\n        <span className=\"input-group-button\">\n          <button\n            type=\"button\"\n            className=\"btn btn-default reset\"\n            style={{ marginLeft: \"5px\" }}\n            onClick={reset}\n          >\n            <i className=\"fas fa-redo\" style={{ marginRight: \"5px\" }}></i>Reset\n          </button>\n        </span>\n      </div>\n    </div>\n  );\n\n  const getGridWrapper = (id: number) => (\n    <div className=\"panel panel-primary\" style={{ marginRight: \"10px\" }}>\n      <div className=\"panel-heading\">\n        {id === 0 ? \"Athletes\" : \"Selected Athletes\"}\n      </div>\n      <div className=\"panel-body\" style={{ height: \"100%\" }}>\n        <AgGridReact\n          defaultColDef={defaultColDef}\n          getRowId={getRowId}\n          rowDragManaged={true}\n          rowSelection={id === 0 ? rowSelection : undefined}\n          rowDragMultiRow={id === 0}\n          suppressMoveWhenRowDragging={id === 0}\n          rowData={id === 0 ? leftRowData : rightRowData}\n          columnDefs={id === 0 ? leftColumns : rightColumns}\n          onGridReady={(params) => onGridReady(params, id)}\n        />\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"top-container\">\n      {getTopToolBar()}\n      <div className=\"grid-wrapper\">\n        {getGridWrapper(0)}\n        {getGridWrapper(1)}\n      </div>\n    </div>\n  );\n};\n\nconst root = createRoot(document.getElementById(\"root\")!);\nroot.render(\n  <StrictMode>\n    <GridExample />\n  </StrictMode>,\n);\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            jsx: 'react',\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            // react\n            react: 'npm:react@18.2.0',\n            'react-dom': 'npm:react-dom@18.2.0',\n            'react-dom/client': 'npm:react-dom@18.2.0',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            css: {},\n            react: {\n                main: './umd/react.production.min.js',\n            },\n            'react-dom': {\n                main: './umd/react-dom.production.min.js',\n            },\n            'react-dom/server': {\n                main: '../umd/react-dom-server.browser.production.min.js',\n            },\n            app: {\n                main: './index.tsx',\n                defaultExtension: 'tsx',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"react":"18","react-dom":"18","@types/react":"18","@types/react-dom":"18","ag-grid-react":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}},"extras":["fontawesome"]}