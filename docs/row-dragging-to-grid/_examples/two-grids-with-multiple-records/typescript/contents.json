{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"main.ts","styleFiles":["style.css"],"files":{"style.css":".top-container {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\n.example-toolbar label {\n    margin: 0 15px 0 0;\n}\n\n.example-toolbar input[type='radio'] {\n    margin: 0 0.25rem 0 0;\n}\n\n.grid-wrapper {\n    display: flex;\n    flex: 1 1 auto;\n    margin-top: 5px;\n}\n\n.grid-wrapper .panel {\n    flex: 1 1 50%;\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n}\n\n.grid-wrapper .panel-body {\n    flex: 1 1 auto;\n    overflow: hidden;\n    padding: 0;\n    display: flex;\n}\n\n.grid-wrapper .panel-body > div {\n    width: 100%;\n}\n","main.ts":"import {\n  ClientSideRowModelApiModule,\n  ClientSideRowModelModule,\n  ColDef,\n  GetRowIdParams,\n  GridApi,\n  GridOptions,\n  GridReadyEvent,\n  ICellRendererComp,\n  ICellRendererParams,\n  ModuleRegistry,\n  RowDragModule,\n  RowSelectionModule,\n  TextFilterModule,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\n\nModuleRegistry.registerModules([\n  ClientSideRowModelApiModule,\n  TextFilterModule,\n  RowDragModule,\n  RowSelectionModule,\n  ClientSideRowModelModule,\n  ValidationModule /* Development Only */,\n]);\n\nclass SportRenderer implements ICellRendererComp {\n  eGui!: HTMLElement;\n\n  init(params: ICellRendererParams) {\n    this.eGui = document.createElement(\"i\");\n\n    this.eGui.addEventListener(\"click\", () => {\n      params.api.applyTransaction({ remove: [params.node.data] });\n    });\n\n    this.eGui.classList.add(\"far\", \"fa-trash-alt\");\n    this.eGui.style.cursor = \"pointer\";\n  }\n\n  getGui() {\n    return this.eGui;\n  }\n\n  refresh(params: ICellRendererParams): boolean {\n    return false;\n  }\n}\n\nconst leftColumnDefs: ColDef[] = [\n  {\n    rowDrag: true,\n    maxWidth: 50,\n    suppressHeaderMenuButton: true,\n    suppressHeaderFilterButton: true,\n    rowDragText: (params, dragItemCount) => {\n      if (dragItemCount > 1) {\n        return dragItemCount + \" athletes\";\n      }\n      return params.rowNode!.data.athlete;\n    },\n  },\n  { field: \"athlete\" },\n  { field: \"sport\" },\n];\n\nconst rightColumnDefs: ColDef[] = [\n  {\n    rowDrag: true,\n    maxWidth: 50,\n    suppressHeaderMenuButton: true,\n    suppressHeaderFilterButton: true,\n    rowDragText: (params, dragItemCount) => {\n      if (dragItemCount > 1) {\n        return dragItemCount + \" athletes\";\n      }\n      return params.rowNode!.data.athlete;\n    },\n  },\n  { field: \"athlete\" },\n  { field: \"sport\" },\n  {\n    suppressHeaderMenuButton: true,\n    suppressHeaderFilterButton: true,\n    maxWidth: 50,\n    cellRenderer: SportRenderer,\n  },\n];\nlet leftApi: GridApi;\nconst leftGridOptions: GridOptions = {\n  defaultColDef: {\n    flex: 1,\n    minWidth: 100,\n    filter: true,\n  },\n  rowSelection: {\n    mode: \"multiRow\",\n  },\n  rowDragMultiRow: true,\n  getRowId: (params: GetRowIdParams) => {\n    return params.data.athlete;\n  },\n  rowDragManaged: true,\n  suppressMoveWhenRowDragging: true,\n  columnDefs: leftColumnDefs,\n  onGridReady: (params) => {\n    addGridDropZone(params);\n  },\n};\nlet rightApi: GridApi;\nconst rightGridOptions: GridOptions = {\n  defaultColDef: {\n    flex: 1,\n    minWidth: 100,\n    filter: true,\n  },\n  getRowId: (params: GetRowIdParams) => {\n    return params.data.athlete;\n  },\n  rowDragManaged: true,\n  columnDefs: rightColumnDefs,\n};\n\nfunction addGridDropZone(params: GridReadyEvent) {\n  const dropZoneParams = rightApi!.getRowDropZoneParams({\n    onDragStop: (params) => {\n      const deselectCheck = (\n        document.querySelector(\"input#deselect\") as HTMLInputElement\n      ).checked;\n      const moveCheck = (\n        document.querySelector(\"input#move\") as HTMLInputElement\n      ).checked;\n      const nodes = params.nodes;\n\n      if (moveCheck) {\n        leftApi!.applyTransaction({\n          remove: nodes.map(function (node) {\n            return node.data;\n          }),\n        });\n      } else if (deselectCheck) {\n        leftApi!.setNodesSelected({ nodes, newValue: false });\n      }\n    },\n  });\n\n  params.api.addRowDropZone(dropZoneParams);\n}\n\nfunction loadGrid(\n  options: GridOptions,\n  oldApi: GridApi,\n  side: string,\n  data: any[],\n) {\n  const grid = document.querySelector<HTMLElement>(\"#e\" + side + \"Grid\")!;\n\n  oldApi?.destroy();\n\n  options.rowData = data;\n  return createGrid(grid, options);\n}\n\nfunction resetInputs() {\n  const inputs = document.querySelectorAll(\n    \".example-toolbar input\",\n  ) as NodeListOf<HTMLInputElement>;\n  const checkbox = inputs[inputs.length - 1];\n\n  if (!checkbox.checked) {\n    checkbox.click();\n  }\n\n  inputs[0].checked = true;\n}\n\nfunction loadGrids() {\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then(function (data) {\n      const athletes: any[] = [];\n      let i = 0;\n\n      while (athletes.length < 20 && i < data.length) {\n        const pos = i++;\n        if (\n          athletes.some(function (rec) {\n            return rec.athlete === data[pos].athlete;\n          })\n        ) {\n          continue;\n        }\n        athletes.push(data[pos]);\n      }\n\n      leftApi = loadGrid(leftGridOptions, leftApi, \"Left\", athletes);\n      rightApi = loadGrid(rightGridOptions, rightApi, \"Right\", []);\n    });\n}\n\nconst resetBtn = document.querySelector(\"button.reset\")!;\n\nresetBtn.addEventListener(\"click\", () => {\n  resetInputs();\n  loadGrids();\n});\n\nloadGrids();\n","index.html":"<div class=\"top-container\">\n    <div class=\"example-toolbar panel panel-default\">\n        <div class=\"panel-body\">\n            <input type=\"radio\" id=\"move\" name=\"radio\" checked />\n            <label for=\"move\">Remove Source Rows</label>\n            <input type=\"radio\" id=\"deselect\" name=\"radio\" />\n            <label for=\"deselect\">Only Deselect Source Rows</label>\n            <input type=\"radio\" id=\"none\" name=\"radio\" />\n            <label for=\"none\">None</label>\n            <span class=\"input-group-button\">\n                <button type=\"button\" class=\"btn btn-default reset\" style=\"margin-left: 5px\">\n                    <i class=\"fas fa-redo\" style=\"margin-right: 5px\"></i>Reset\n                </button>\n            </span>\n        </div>\n    </div>\n    <div class=\"grid-wrapper\">\n        <div class=\"panel panel-primary\" style=\"margin-right: 10px\">\n            <div class=\"panel-heading\">Athletes</div>\n            <div class=\"panel-body\">\n                <div id=\"eLeftGrid\"></div>\n            </div>\n        </div>\n        <div class=\"panel panel-primary\" style=\"margin-left: 10px\">\n            <div class=\"panel-heading\">Selected Athletes</div>\n            <div class=\"panel-body\">\n                <div id=\"eRightGrid\"></div>\n            </div>\n        </div>\n    </div>\n</div>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {},\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        // map tells the System loader where to look for things\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            // appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap,\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {},\n            app: {\n                main: './main.ts',\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}},"extras":["fontawesome"]}