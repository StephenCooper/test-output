{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["fakeServer.js","main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".test-grid {\n    height: 1px;\n    min-height: 1px;\n    flex-grow: 1;\n}\n\n.test-container {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\n.test-header {\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\n    font-size: 13px;\n    margin-bottom: 5px;\n}\n\n.test-header input {\n    position: relative;\n    top: 2px;\n}\n","fakeServer.js":"// This fake server uses http://alasql.org/ to mimic how a real server\n// might generate sql queries from the Server-Side Row Model request.\n// To keep things simple it does the bare minimum to support the example.\nfunction FakeServer(allData) {\n    alasql.options.cache = false;\n\n    return {\n        getData: function (request) {\n            const results = executeQuery(request);\n\n            return {\n                success: true,\n                rows: results,\n                lastRow: getLastRowIndex(request),\n            };\n        },\n        getAthletes: function () {\n            const sql = 'SELECT DISTINCT athlete FROM ? ORDER BY athlete ASC';\n\n            return alasql(sql, [allData]).map(function (x) {\n                return x.athlete;\n            });\n        },\n    };\n\n    function executeQuery(request) {\n        const sql = buildSql(request);\n\n        console.log('[FakeServer] - about to execute query:', sql);\n\n        return alasql(sql, [allData]);\n    }\n\n    function buildSql(request) {\n        return (\n            selectSql(request) +\n            ' FROM ?' +\n            whereSql(request) +\n            groupBySql(request) +\n            orderBySql(request) +\n            limitSql(request)\n        );\n    }\n\n    function selectSql(request) {\n        const rowGroupCols = request.rowGroupCols;\n        const valueCols = request.valueCols;\n        const groupKeys = request.groupKeys;\n\n        if (isDoingGrouping(rowGroupCols, groupKeys)) {\n            const rowGroupCol = rowGroupCols[groupKeys.length];\n            const colsToSelect = [rowGroupCol.id];\n\n            valueCols.forEach(function (valueCol) {\n                colsToSelect.push(valueCol.aggFunc + '(' + valueCol.id + ') AS ' + valueCol.id);\n            });\n\n            return 'SELECT ' + colsToSelect.join(', ');\n        }\n\n        return 'SELECT *';\n    }\n\n    function whereSql(request) {\n        const rowGroups = request.rowGroupCols;\n        const groupKeys = request.groupKeys;\n        const whereParts = [];\n\n        if (groupKeys) {\n            groupKeys.forEach(function (key, i) {\n                const value = typeof key === 'string' ? \"'\" + key + \"'\" : key;\n\n                whereParts.push(rowGroups[i].id + ' = ' + value);\n            });\n        }\n\n        if (whereParts.length > 0) {\n            return ' WHERE ' + whereParts.join(' AND ');\n        }\n\n        return '';\n    }\n\n    function groupBySql(request) {\n        const rowGroupCols = request.rowGroupCols;\n        const groupKeys = request.groupKeys;\n\n        if (isDoingGrouping(rowGroupCols, groupKeys)) {\n            const rowGroupCol = rowGroupCols[groupKeys.length];\n\n            return ' GROUP BY ' + rowGroupCol.id + ' HAVING count(*) > 0';\n        }\n\n        return '';\n    }\n\n    function orderBySql(request) {\n        const sortModel = request.sortModel;\n\n        if (sortModel.length === 0) return '';\n\n        const sorts = sortModel.map(function (s) {\n            return s.colId + ' ' + s.sort.toUpperCase();\n        });\n\n        return ' ORDER BY ' + sorts.join(', ');\n    }\n\n    function limitSql(request) {\n        if (request.endRow == undefined || request.startRow == undefined) {\n            return '';\n        }\n\n        const blockSize = request.endRow - request.startRow;\n\n        return ' LIMIT ' + blockSize + ' OFFSET ' + request.startRow;\n    }\n\n    function isDoingGrouping(rowGroupCols, groupKeys) {\n        // we are not doing grouping if at the lowest level\n        return rowGroupCols.length > groupKeys.length;\n    }\n\n    function getLastRowIndex(request) {\n        return executeQuery({ ...request, startRow: undefined, endRow: undefined }).length;\n    }\n}\n","main.js":"const colDefCountry = { field: \"country\", rowGroup: true };\nconst colDefYear = { field: \"year\", rowGroup: true };\nconst colDefAthlete = {\n  field: \"athlete\",\n  filter: \"agSetColumnFilter\",\n  filterParams: {\n    values: getAthletesAsync,\n  },\n  suppressHeaderMenuButton: true,\n  suppressHeaderContextMenu: true,\n};\nconst colDefAge = { field: \"age\" };\nconst colDefSport = { field: \"sport\" };\nconst colDefGold = { field: \"gold\", aggFunc: \"sum\" };\nconst colDefSilver = { field: \"silver\", aggFunc: \"sum\" };\nconst colDefBronze = { field: \"bronze\", aggFunc: \"sum\" };\n\nconst columnDefs = [\n  colDefAthlete,\n  colDefAge,\n  colDefCountry,\n  colDefYear,\n  colDefSport,\n  colDefGold,\n  colDefSilver,\n  colDefBronze,\n];\n\nlet gridApi;\n\nconst gridOptions = {\n  columnDefs: columnDefs,\n  defaultColDef: {\n    initialFlex: 1,\n    minWidth: 120,\n  },\n  autoGroupColumnDef: {\n    minWidth: 200,\n  },\n  maintainColumnOrder: true,\n  // use the server-side row model\n  rowModelType: \"serverSide\",\n\n  onGridReady: (params) => {\n    document.getElementById(\"athlete\").checked = true;\n    document.getElementById(\"age\").checked = true;\n    document.getElementById(\"country\").checked = true;\n    document.getElementById(\"year\").checked = true;\n    document.getElementById(\"sport\").checked = true;\n    document.getElementById(\"gold\").checked = true;\n    document.getElementById(\"silver\").checked = true;\n    document.getElementById(\"bronze\").checked = true;\n  },\n\n  suppressAggFuncInHeader: true,\n  // debug: true,\n};\n\nfunction getAthletesAsync(params) {\n  const countries = fakeServer.getAthletes();\n\n  // simulating real server call with a 500ms delay\n  setTimeout(() => {\n    params.success(countries);\n  }, 500);\n}\n\nfunction onBtApply() {\n  const cols = [];\n  if (getBooleanValue(\"#athlete\")) {\n    cols.push(colDefAthlete);\n  }\n  if (getBooleanValue(\"#age\")) {\n    cols.push(colDefAge);\n  }\n  if (getBooleanValue(\"#country\")) {\n    cols.push(colDefCountry);\n  }\n  if (getBooleanValue(\"#year\")) {\n    cols.push(colDefYear);\n  }\n  if (getBooleanValue(\"#sport\")) {\n    cols.push(colDefSport);\n  }\n\n  if (getBooleanValue(\"#gold\")) {\n    cols.push(colDefGold);\n  }\n  if (getBooleanValue(\"#silver\")) {\n    cols.push(colDefSilver);\n  }\n  if (getBooleanValue(\"#bronze\")) {\n    cols.push(colDefBronze);\n  }\n\n  gridApi.setGridOption(\"columnDefs\", cols);\n}\n\nfunction getBooleanValue(cssSelector) {\n  return document.querySelector(cssSelector).checked === true;\n}\n\nfunction getServerSideDatasource(server) {\n  return {\n    getRows: (params) => {\n      console.log(\"[Datasource] - rows requested by grid: \", params.request);\n\n      const response = server.getData(params.request);\n\n      // adding delay to simulate real server call\n      setTimeout(() => {\n        if (response.success) {\n          // call the success callback\n          params.success({\n            rowData: response.rows,\n            rowCount: response.lastRow,\n          });\n        } else {\n          // inform the grid request failed\n          params.fail();\n        }\n      }, 200);\n    },\n  };\n}\n\nvar fakeServer = undefined;\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then(function (data) {\n      // setup the fake server with entire dataset\n      fakeServer = new FakeServer(data);\n\n      // create datasource with a reference to the fake server\n      const datasource = getServerSideDatasource(fakeServer);\n\n      // register the datasource with the grid\n      gridApi.setGridOption(\"serverSideDatasource\", datasource);\n    });\n});\n","index.html":"<div class=\"test-container\">\n    <div class=\"test-header\">Select columns to show then hit 'Apply'</div>\n\n    <div class=\"test-header\">\n        <label><input type=\"checkbox\" id=\"athlete\" />Athlete</label>\n        <label><input type=\"checkbox\" id=\"age\" />Age</label>\n        <label><input type=\"checkbox\" id=\"country\" />Country</label>\n        <label><input type=\"checkbox\" id=\"year\" />Year</label>\n        <label><input type=\"checkbox\" id=\"sport\" />Sport</label>\n\n        <label><input type=\"checkbox\" id=\"gold\" />Gold</label>\n        <label><input type=\"checkbox\" id=\"silver\" />Silver</label>\n        <label><input type=\"checkbox\" id=\"bronze\" />Bronze</label>\n\n        <button onclick=\"onBtApply()\">Apply</button>\n    </div>\n\n    <div id=\"myGrid\" class=\"test-grid\"></div>\n</div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}},"extras":["alasql"]}