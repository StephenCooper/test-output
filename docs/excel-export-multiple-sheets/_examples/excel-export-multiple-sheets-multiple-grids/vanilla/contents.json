{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":["style.css"],"files":{"style.css":".top-container {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\n.panel-body > input:not(:first-of-type) {\n    margin-left: 10px;\n}\n\n.grid-wrapper {\n    display: flex;\n    flex: 1 1 auto;\n    margin-top: 5px;\n}\n\n.grid-wrapper .panel {\n    flex: 1 1 50%;\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n}\n\n.grid-wrapper .panel-body {\n    flex: 1 1 auto;\n    overflow: hidden;\n    padding: 0;\n    display: flex;\n}\n\n.grid-wrapper .panel-body > div {\n    width: 100%;\n}\n","main.js":"class SportRenderer {\n  eGui;\n\n  init(params) {\n    this.eGui = document.createElement(\"i\");\n\n    this.eGui.addEventListener(\"click\", () => {\n      params.api.applyTransaction({ remove: [params.node.data] });\n    });\n\n    this.eGui.classList.add(\"far\", \"fa-trash-alt\");\n    this.eGui.style.cursor = \"pointer\";\n  }\n\n  getGui() {\n    return this.eGui;\n  }\n\n  refresh(params) {\n    return false;\n  }\n}\n\nconst leftColumnDefs = [\n  {\n    rowDrag: true,\n    maxWidth: 50,\n    suppressHeaderMenuButton: true,\n    suppressHeaderFilterButton: true,\n    rowDragText: (params, dragItemCount) => {\n      if (dragItemCount > 1) {\n        return dragItemCount + \" athletes\";\n      }\n      return params.rowNode.data.athlete;\n    },\n  },\n  { field: \"athlete\" },\n  { field: \"sport\" },\n];\n\nconst rightColumnDefs = [\n  {\n    rowDrag: true,\n    maxWidth: 50,\n    suppressHeaderMenuButton: true,\n    suppressHeaderFilterButton: true,\n    rowDragText: (params, dragItemCount) => {\n      if (dragItemCount > 1) {\n        return dragItemCount + \" athletes\";\n      }\n      return params.rowNode.data.athlete;\n    },\n  },\n  { field: \"athlete\" },\n  { field: \"sport\" },\n  {\n    suppressHeaderMenuButton: true,\n    suppressHeaderFilterButton: true,\n    maxWidth: 50,\n    cellRenderer: SportRenderer,\n  },\n];\n\nlet leftApi;\nconst leftGridOptions = {\n  defaultColDef: {\n    flex: 1,\n    minWidth: 100,\n    filter: true,\n  },\n  rowSelection: { mode: \"multiRow\" },\n  rowDragMultiRow: true,\n  getRowId: (params) => {\n    return params.data.athlete;\n  },\n  rowDragManaged: true,\n  suppressMoveWhenRowDragging: true,\n  columnDefs: leftColumnDefs,\n  onGridReady: (params) => {\n    addGridDropZone(params);\n  },\n};\nlet rightApi;\nconst rightGridOptions = {\n  defaultColDef: {\n    flex: 1,\n    minWidth: 100,\n    filter: true,\n  },\n  getRowId: (params) => {\n    return params.data.athlete;\n  },\n  rowDragManaged: true,\n  columnDefs: rightColumnDefs,\n};\n\nfunction addGridDropZone(params) {\n  const dropZoneParams = rightApi.getRowDropZoneParams({\n    onDragStop: (params) => {\n      const nodes = params.nodes;\n\n      leftApi.applyTransaction({\n        remove: nodes.map(function (node) {\n          return node.data;\n        }),\n      });\n    },\n  });\n\n  params.api.addRowDropZone(dropZoneParams);\n}\n\nfunction loadGrid(options, oldApi, side, data) {\n  const grid = document.querySelector(\"#e\" + side + \"Grid\");\n\n  oldApi?.destroy();\n  options.rowData = data;\n  return agGrid.createGrid(grid, options);\n}\n\nfunction loadGrids() {\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then(function (data) {\n      const athletes = [];\n      let i = 0;\n\n      while (athletes.length < 20 && i < data.length) {\n        const pos = i++;\n        if (\n          athletes.some(function (rec) {\n            return rec.athlete === data[pos].athlete;\n          })\n        ) {\n          continue;\n        }\n        athletes.push(data[pos]);\n      }\n\n      leftApi = loadGrid(\n        leftGridOptions,\n        leftApi,\n        \"Left\",\n        athletes.slice(0, athletes.length / 2),\n      );\n      rightApi = loadGrid(\n        rightGridOptions,\n        rightApi,\n        \"Right\",\n        athletes.slice(athletes.length / 2),\n      );\n    });\n}\n\nfunction onExcelExport() {\n  const spreadsheets = [];\n\n  spreadsheets.push(\n    leftApi.getSheetDataForExcel({ sheetName: \"Athletes\" }),\n    rightApi.getSheetDataForExcel({ sheetName: \"Selected Athletes\" }),\n  );\n\n  // could be leftGridOptions or rightGridOptions\n  leftApi.exportMultipleSheetsAsExcel({\n    data: spreadsheets,\n    fileName: \"ag-grid.xlsx\",\n  });\n}\n\nconst resetBtn = document.querySelector(\"button.reset\");\nconst exportBtn = document.querySelector(\"button.excel\");\n\nresetBtn.addEventListener(\"click\", () => {\n  loadGrids();\n});\n\nexportBtn.addEventListener(\"click\", () => {\n  onExcelExport();\n});\n\nloadGrids();\n","index.html":"<div class=\"top-container\">\n    <div>\n        <button type=\"button\" class=\"btn btn-default excel\">\n            <i class=\"far fa-file-excel\" style=\"margin-right: 5px; color: green\"></i>Export to Excel\n        </button>\n        <button type=\"button\" class=\"btn btn-default reset\">\n            <i class=\"fas fa-redo\" style=\"margin-right: 5px\"></i>Reset\n        </button>\n    </div>\n    <div class=\"grid-wrapper\">\n        <div class=\"panel panel-primary\" style=\"margin-right: 10px\">\n            <div class=\"panel-heading\">Athletes</div>\n            <div class=\"panel-body\">\n                <div id=\"eLeftGrid\"></div>\n            </div>\n        </div>\n        <div class=\"panel panel-primary\" style=\"margin-left: 10px\">\n            <div class=\"panel-heading\">Selected Athletes</div>\n            <div class=\"panel-body\">\n                <div id=\"eRightGrid\"></div>\n            </div>\n        </div>\n    </div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}},"extras":["fontawesome"]}