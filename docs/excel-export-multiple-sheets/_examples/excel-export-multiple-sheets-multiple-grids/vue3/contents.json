{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"main.ts","scriptFiles":[],"styleFiles":[],"files":{"style.css":".top-container {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\n.panel-body > input:not(:first-of-type) {\n    margin-left: 10px;\n}\n\n.grid-wrapper {\n    display: flex;\n    flex: 1 1 auto;\n    margin-top: 5px;\n}\n\n.grid-wrapper .panel {\n    flex: 1 1 50%;\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n}\n\n.grid-wrapper .panel-body {\n    flex: 1 1 auto;\n    overflow: hidden;\n    padding: 0;\n    display: flex;\n}\n\n.grid-wrapper .panel-body > div {\n    width: 100%;\n}\n","styles.css":".top-container {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\n.panel-body input {\n    margin-right: 2px !important;\n}\n\n.panel-body label {\n    margin-right: 10px;\n}\n\n.grid-wrapper {\n    display: flex;\n    flex: 1 1 auto;\n    margin-top: 5px;\n}\n\n.grid-wrapper .panel {\n    flex: 1 1 50%;\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n}\n\n.grid-wrapper .panel-body {\n    flex: 1 1 auto;\n    overflow: hidden;\n    padding: 0;\n    display: flex;\n}\n\n.grid-wrapper .panel-body > div {\n    width: 100%;\n}\n","main.ts":"import \"ag-grid-enterprise\";\nimport { createApp, defineComponent } from \"vue\";\n\nimport type {\n  ColDef,\n  GetRowIdParams,\n  GridApi,\n  GridReadyEvent,\n  ICellRendererParams,\n  RowSelectionOptions,\n} from \"ag-grid-community\";\nimport {\n  ClientSideRowModelApiModule,\n  ClientSideRowModelModule,\n  CsvExportModule,\n  ModuleRegistry,\n  RowDragModule,\n  RowSelectionModule,\n  TextFilterModule,\n  ValidationModule,\n} from \"ag-grid-community\";\nimport {\n  ExcelExportModule,\n  exportMultipleSheetsAsExcel,\n} from \"ag-grid-enterprise\";\nimport { AgGridVue } from \"ag-grid-vue3\";\n\nimport \"./styles.css\";\n\nModuleRegistry.registerModules([\n  ClientSideRowModelModule,\n  RowDragModule,\n  ClientSideRowModelApiModule,\n  TextFilterModule,\n  RowSelectionModule,\n  CsvExportModule,\n  ExcelExportModule,\n  ValidationModule /* Development Only */,\n]);\n\nconst SportRenderer = defineComponent({\n  template: `<i class=\"far fa-trash-alt\" style=\"cursor: pointer\" @click=\"applyTransaction()\"></i>`,\n  methods: {\n    applyTransaction() {\n      this.params.api.applyTransaction({ remove: [this.params.node.data] });\n    },\n  },\n});\n\nconst VueExample = defineComponent({\n  template: /* html */ `\n        <div class=\"top-container\">\n            <div>\n                <button type=\"button\" class=\"btn btn-default excel\" @click=\"onExcelExport()\">\n                    <i class=\"far fa-file-excel\" style=\"margin-right: 5px; color: green;\"></i>Export to Excel\n                </button>\n                <button type=\"button\" class=\"btn btn-default reset\" @click=\"reset()\">\n                    <i class=\"fas fa-redo\" style=\"margin-right: 5px;\"></i>Reset\n                </button>\n            </div>\n            <div class=\"grid-wrapper\">\n                <div class=\"panel panel-primary\" style=\"margin-right: 10px;\">\n                    <div class=\"panel-heading\">Athletes</div>\n                    <div class=\"panel-body\">\n                        <ag-grid-vue\n                                style=\"height: 100%;\"\n                                :defaultColDef=\"defaultColDef\"\n                                :rowSelection=\"rowSelection\"\n                                :rowDragMultiRow=\"true\"\n                                :getRowId=\"getRowId\"\n                                :rowDragManaged=\"true\"\n                                :suppressMoveWhenRowDragging=\"true\"\n                                :rowData=\"leftRowData\"\n                                :columnDefs=\"leftColumns\"\n                                @grid-ready=\"onGridReady($event, 0)\"\n                                >\n                        </ag-grid-vue>\n                    </div>\n                </div>\n                <div class=\"panel panel-primary\" style=\"margin-left: 10px;\">\n                    <div class=\"panel-heading\">Selected Athletes</div>\n                    <div class=\"panel-body\">\n                        <ag-grid-vue\n                                style=\"height: 100%;\"\n                                :defaultColDef=\"defaultColDef\"\n                                :getRowId=\"getRowId\"\n                                :rowDragManaged=\"true\"\n                                :rowData=\"rightRowData\"\n                                :columnDefs=\"rightColumns\"\n                                @grid-ready=\"onGridReady($event, 1)\"\n                                >\n                        </ag-grid-vue>\n                    </div>\n                </div>\n            </div>\n        </div>`,\n  components: {\n    \"ag-grid-vue\": AgGridVue,\n    SportRenderer,\n  },\n  data: function () {\n    return {\n      leftRowData: null,\n      rightRowData: null,\n      leftApi: null,\n      rightApi: null,\n      rowSelection: <RowSelectionOptions>{\n        mode: \"multiRow\",\n      },\n      defaultColDef: <ColDef>{\n        flex: 1,\n        minWidth: 100,\n        filter: true,\n      },\n      leftColumns: <ColDef[]>[\n        {\n          rowDrag: true,\n          maxWidth: 50,\n          suppressHeaderMenuButton: true,\n          suppressHeaderFilterButton: true,\n          rowDragText: (params, dragItemCount) => {\n            if (dragItemCount > 1) {\n              return dragItemCount + \" athletes\";\n            }\n            return params.rowNode.data.athlete;\n          },\n        },\n        { field: \"athlete\" },\n        { field: \"sport\" },\n      ],\n      rightColumns: <ColDef[]>[\n        {\n          rowDrag: true,\n          maxWidth: 50,\n          suppressHeaderMenuButton: true,\n          suppressHeaderFilterButton: true,\n          rowDragText: (params, dragItemCount) => {\n            if (dragItemCount > 1) {\n              return dragItemCount + \" athletes\";\n            }\n            return params.rowNode.data.athlete;\n          },\n        },\n        { field: \"athlete\" },\n        { field: \"sport\" },\n        {\n          suppressHeaderMenuButton: true,\n          suppressHeaderFilterButton: true,\n          maxWidth: 50,\n          cellRenderer: \"SportRenderer\",\n        },\n      ],\n    };\n  },\n  beforeMount() {\n    fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n      .then((resp) => resp.json())\n      .then((data) => {\n        const athletes = [];\n        let i = 0;\n\n        while (athletes.length < 20 && i < data.length) {\n          const pos = i++;\n          if (athletes.some((rec) => rec.athlete === data[pos].athlete)) {\n            continue;\n          }\n          athletes.push(data[pos]);\n        }\n        this.rawData = athletes;\n        this.loadGrids();\n      });\n  },\n  methods: {\n    getRowId(params) {\n      return params.data.athlete;\n    },\n\n    loadGrids() {\n      this.leftRowData = [...this.rawData.slice(0, this.rawData.length / 2)];\n      this.rightRowData = [...this.rawData.slice(this.rawData.length / 2)];\n    },\n\n    reset() {\n      this.loadGrids();\n    },\n\n    onGridReady(params: GridReadyEvent, side: number) {\n      if (side === 0) {\n        this.leftApi = params.api;\n      }\n\n      if (side === 1) {\n        this.rightApi = params.api;\n        this.addGridDropZone();\n      }\n    },\n\n    addGridDropZone() {\n      const dropZoneParams = this.rightApi.getRowDropZoneParams({\n        onDragStop: (params) => {\n          const nodes = params.nodes;\n\n          this.leftApi.applyTransaction({\n            remove: nodes.map(function (node) {\n              return node.data;\n            }),\n          });\n        },\n      });\n\n      this.leftApi.addRowDropZone(dropZoneParams);\n    },\n\n    onExcelExport() {\n      const spreadsheets = [];\n\n      spreadsheets.push(\n        this.leftApi.getSheetDataForExcel({ sheetName: \"Athletes\" }),\n        this.rightApi.getSheetDataForExcel({ sheetName: \"Selected Athletes\" }),\n      );\n\n      exportMultipleSheetsAsExcel({\n        data: spreadsheets,\n        fileName: \"ag-grid.xlsx\",\n      });\n    },\n  },\n});\n\ncreateApp(VueExample).mount(\"#app\");\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        defaultExtension: 'js',\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            vue: 'npm:vue@3.5.0/dist/vue.esm-browser.js',\n            '@vue/reactivity': 'npm:@vue/reactivity@3.0.0/dist/reactivity.esm-browser.prod.js',\n\n            // vue class component\n            'vue-class-component': 'npm:vue-class-component@^8.0.0-beta.3/dist/vue-class-component.cjs.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            'css.js': {\n                defaultExtension: 'js',\n            },\n            vue: {\n                defaultExtension: 'js',\n            },\n            app: {\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-vue3': {\n                main: './dist/main.umd.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"vue":"^3.5.0","ag-grid-vue3":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}},"extras":["fontawesome"]}