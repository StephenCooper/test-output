{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":[],"files":{"main.js":"const myCheckboxStyle = agGrid.createPart({\n  // By setting the feature, adding this part to a theme will remove the\n  // theme's existing checkboxStyle, if any\n  feature: \"checkboxStyle\",\n  params: {\n    // Declare parameters added by the custom CSS and provide default values\n    checkboxCheckedGlowColor: { ref: \"accentColor\" },\n    checkboxGlowColor: { ref: \"foregroundColor\", mix: 0.5 },\n    // If you want to provide new default values for parameters already defined\n    // by the grid, you can do so too\n    accentColor: \"red\",\n  },\n  // Add some CSS to this part.\n  // If your application is bundled with Vite you can put this in a separate\n  // file and import it with `import checkboxCSS \"./checkbox.css?inline\"`\n  css: `\n        .ag-checkbox-input-wrapper {\n            border-radius: 4px;\n            /* Here we're referencing the checkboxGlowColor parameter in CSS, we need\n               to add the --ag- prefix and use kebab-case */\n            box-shadow: 0 0 5px 4px var(--ag-checkbox-glow-color);\n            width: 16px;\n            height: 16px;\n        \n            &.ag-checked {\n                box-shadow: 0 0 5px 4px var(--ag-checkbox-checked-glow-color);\n                &::before {\n                    content: 'âœ”';\n                    position: absolute;\n                    pointer-events: none;\n                    inset: 0;\n                    text-align: center;\n                    line-height: 16px;\n                    font-size: 14px;\n                }\n            }\n        }\n\n        .ag-checkbox-input {\n            width: 16px;\n            height: 16px;\n            margin: 0;\n            appearance: none;\n            -webkit-appearance: none;\n            border-radius: 4px;\n        \n            &:focus {\n                box-shadow: 0 0 3px 3px yellow;\n                outline: none;\n            }\n        }\n        \n        `,\n});\n\nconst myCustomTheme = agGrid\n  .createTheme()\n  .withPart(myCheckboxStyle)\n  .withPart(agGrid.colorSchemeVariable);\n\nconst columnDefs = [{ field: \"make\" }, { field: \"model\" }, { field: \"price\" }];\n\nconst rowData = (() => {\n  const rowData = [];\n  for (let i = 0; i < 10; i++) {\n    rowData.push({ make: \"Toyota\", model: \"Celica\", price: 35000 + i * 1000 });\n    rowData.push({ make: \"Ford\", model: \"Mondeo\", price: 32000 + i * 1000 });\n    rowData.push({\n      make: \"Porsche\",\n      model: \"Boxster\",\n      price: 72000 + i * 1000,\n    });\n  }\n  return rowData;\n})();\n\nconst gridOptions = {\n  theme: myCustomTheme,\n  columnDefs,\n  rowData,\n  defaultColDef: {\n    editable: true,\n    flex: 1,\n    minWidth: 100,\n    filter: true,\n  },\n  initialState: {\n    rowSelection: [\"1\", \"2\", \"3\"],\n  },\n  rowSelection: { mode: \"multiRow\", checkboxes: true },\n};\n\nagGrid.createGrid(document.querySelector(\"#myGrid\"), gridOptions);\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}