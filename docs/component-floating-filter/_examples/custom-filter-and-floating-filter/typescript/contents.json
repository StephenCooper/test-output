{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"main.ts","styleFiles":[],"files":{"numberFilterComponent.ts":"import type { IDoesFilterPassParams, IFilterComp, IFilterParams } from 'ag-grid-community';\n\nexport class NumberFilterComponent implements IFilterComp {\n    filterText!: string | null;\n    filterParams!: IFilterParams;\n    gui!: HTMLDivElement;\n    eFilterText: any;\n    onFilterChanged!: () => void;\n\n    init(params: IFilterParams) {\n        this.filterText = null;\n        this.filterParams = params;\n        this.setupGui();\n    }\n\n    // not called by AG Grid, just for us to help setup\n    setupGui() {\n        this.gui = document.createElement('div');\n        this.gui.innerHTML = `\n            <div style=\"padding: 4px\">\n                <div style=\"font-weight: bold;\">Greater than: </div>\n                <div>\n                    <input style=\"margin: 4px 0 4px 0;\" type=\"number\" min=\"0\" id=\"filterText\" placeholder=\"Number of medals...\"/>\n                </div>\n            </div>\n        `;\n\n        this.onFilterChanged = () => {\n            this.extractFilterText();\n            this.filterParams.filterChangedCallback();\n        };\n\n        this.eFilterText = this.gui.querySelector('#filterText');\n        this.eFilterText.addEventListener('input', this.onFilterChanged);\n    }\n\n    isNumeric = (n: any) => !isNaN(parseFloat(n)) && isFinite(parseFloat(n));\n\n    myMethodForTakingValueFromFloatingFilter(value: any) {\n        this.eFilterText.value = value;\n        this.onFilterChanged();\n    }\n\n    extractFilterText() {\n        this.filterText = this.eFilterText.value;\n    }\n\n    getGui() {\n        return this.gui;\n    }\n\n    doesFilterPass(params: IDoesFilterPassParams) {\n        if (!this.isFilterActive()) {\n            return false;\n        }\n\n        const { node } = params;\n\n        const value = this.filterParams.getValue(node);\n\n        const filterValue = this.filterText;\n\n        if (value == null) return false;\n        return Number(value) > Number(filterValue);\n    }\n\n    isFilterActive() {\n        return (\n            this.filterText !== null &&\n            this.filterText !== undefined &&\n            this.filterText !== '' &&\n            this.isNumeric(this.filterText)\n        );\n    }\n\n    getModel() {\n        return this.isFilterActive() ? Number(this.eFilterText.value) : null;\n    }\n\n    setModel(model: any) {\n        this.eFilterText.value = model;\n        this.extractFilterText();\n    }\n\n    destroy() {\n        this.eFilterText.removeEventListener('input', this.onFilterChanged);\n    }\n}\n","numberFloatingFilterComponent.ts":"import type { IFloatingFilterComp, IFloatingFilterParams } from 'ag-grid-community';\n\nimport type { NumberFilterComponent } from './numberFilterComponent_typescript';\n\nexport class NumberFloatingFilterComponent implements IFloatingFilterComp {\n    eGui!: HTMLDivElement;\n    currentValue: any;\n    eFilterInput!: HTMLInputElement;\n\n    // Generic param should be NumberFilterComponent but type needs to be passed through IFloatingFilterComp first\n    init(params: IFloatingFilterParams<NumberFilterComponent>) {\n        this.eGui = document.createElement('div');\n        this.eGui.innerHTML = '&gt; <input style=\"width: 30px\" type=\"number\" min=\"0\" />';\n        this.currentValue = null;\n        this.eFilterInput = this.eGui.querySelector('input')!;\n\n        const onInputBoxChanged = () => {\n            if (this.eFilterInput.value === '') {\n                // Remove the filter\n                params.parentFilterInstance((instance) => {\n                    instance.myMethodForTakingValueFromFloatingFilter(null);\n                });\n                return;\n            }\n\n            this.currentValue = Number(this.eFilterInput.value);\n            params.parentFilterInstance((instance) => {\n                instance.myMethodForTakingValueFromFloatingFilter(this.currentValue);\n            });\n        };\n\n        this.eFilterInput.addEventListener('input', onInputBoxChanged);\n    }\n\n    onParentModelChanged(parentModel: any) {\n        // When the filter is empty we will receive a null message her\n        if (parentModel == null) {\n            this.eFilterInput.value = '';\n            this.currentValue = null;\n        } else {\n            this.eFilterInput.value = parentModel;\n            this.currentValue = parentModel;\n        }\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n}\n","main.ts":"import {\n  ClientSideRowModelModule,\n  ColDef,\n  ColGroupDef,\n  CustomFilterModule,\n  GridApi,\n  GridOptions,\n  ModuleRegistry,\n  NumberFilterModule,\n  TextFilterModule,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\nimport { NumberFilterComponent } from \"./numberFilterComponent\";\nimport { NumberFloatingFilterComponent } from \"./numberFloatingFilterComponent\";\nimport { IOlympicData } from \"./interfaces\";\n\nModuleRegistry.registerModules([\n  NumberFilterModule,\n  ClientSideRowModelModule,\n  TextFilterModule,\n  CustomFilterModule,\n  ValidationModule /* Development Only */,\n]);\n\nconst columnDefs: ColDef[] = [\n  { field: \"athlete\", filter: \"agTextColumnFilter\" },\n  {\n    field: \"gold\",\n    floatingFilterComponent: NumberFloatingFilterComponent,\n    filter: NumberFilterComponent,\n    suppressFloatingFilterButton: true,\n  },\n  {\n    field: \"silver\",\n    floatingFilterComponent: NumberFloatingFilterComponent,\n    filter: NumberFilterComponent,\n    suppressFloatingFilterButton: true,\n  },\n  {\n    field: \"bronze\",\n    floatingFilterComponent: NumberFloatingFilterComponent,\n    filter: NumberFilterComponent,\n    suppressFloatingFilterButton: true,\n  },\n  {\n    field: \"total\",\n    floatingFilterComponent: NumberFloatingFilterComponent,\n    filter: NumberFilterComponent,\n    suppressFloatingFilterButton: true,\n  },\n];\n\nlet gridApi: GridApi<IOlympicData>;\n\nconst gridOptions: GridOptions<IOlympicData> = {\n  defaultColDef: {\n    flex: 1,\n    minWidth: 100,\n    filter: true,\n    floatingFilter: true,\n  },\n  columnDefs: columnDefs,\n  rowData: null,\n};\n\n// setup the grid after the page has finished loading\nconst gridDiv = document.querySelector<HTMLElement>(\"#myGrid\")!;\ngridApi = createGrid(gridDiv, gridOptions);\n\nfetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n  .then((response) => response.json())\n  .then((data) => {\n    gridApi!.setGridOption(\"rowData\", data);\n  });\n","index.html":"<style>\n    .ui-slider-handle {\n        z-index: 0 !important;\n    }\n</style>\n\n<div id=\"myGrid\" style=\"height: 100%; width: 100%\"></div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {},\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        // map tells the System loader where to look for things\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            // appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap,\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {},\n            app: {\n                main: './main.ts',\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}