{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["numberFilterComponent.js","main.js"],"styleFiles":[],"files":{"numberFilterComponent.js":"\nclass NumberFilterComponent  {\n    filterText;\n    filterParams;\n    gui;\n    eFilterText;\n    onFilterChanged;\n\n    init(params) {\n        this.filterText = null;\n        this.filterParams = params;\n        this.setupGui();\n    }\n\n    // not called by AG Grid, just for us to help setup\n    setupGui() {\n        this.gui = document.createElement('div');\n        this.gui.innerHTML = `\n            <div style=\"padding: 4px\">\n                <div style=\"font-weight: bold;\">Greater than: </div>\n                <div>\n                    <input style=\"margin: 4px 0 4px 0;\" type=\"number\" min=\"0\" id=\"filterText\" placeholder=\"Number of medals...\"/>\n                </div>\n            </div>\n        `;\n\n        this.onFilterChanged = () => {\n            this.extractFilterText();\n            this.filterParams.filterChangedCallback();\n        };\n\n        this.eFilterText = this.gui.querySelector('#filterText');\n        this.eFilterText.addEventListener('input', this.onFilterChanged);\n    }\n\n    isNumeric = (n) => !isNaN(parseFloat(n)) && isFinite(parseFloat(n));\n\n    extractFilterText() {\n        this.filterText = this.eFilterText.value;\n    }\n\n    getGui() {\n        return this.gui;\n    }\n\n    doesFilterPass(params) {\n        if (!this.isFilterActive()) {\n            return false;\n        }\n\n        const { node } = params;\n\n        const value = this.filterParams.getValue(node);\n\n        const filterValue = this.filterText;\n\n        if (value == null) return false;\n        return Number(value) > Number(filterValue);\n    }\n\n    isFilterActive() {\n        return (\n            this.filterText !== null &&\n            this.filterText !== undefined &&\n            this.filterText !== '' &&\n            this.isNumeric(this.filterText)\n        );\n    }\n\n    getModel() {\n        return this.isFilterActive() ? Number(this.eFilterText.value) : null;\n    }\n\n    setModel(model) {\n        this.eFilterText.value = model;\n        this.extractFilterText();\n    }\n\n    destroy() {\n        this.eFilterText.removeEventListener('input', this.onFilterChanged);\n    }\n\n    getModelAsString() {\n        return this.isFilterActive() ? '>' + this.filterText : '';\n    }\n}\n","main.js":"const columnDefs = [\n  { field: \"athlete\", width: 150, filter: false },\n  {\n    field: \"gold\",\n    width: 100,\n    filter: NumberFilterComponent,\n    suppressHeaderMenuButton: true,\n  },\n  {\n    field: \"silver\",\n    width: 100,\n    filter: NumberFilterComponent,\n    suppressHeaderMenuButton: true,\n  },\n  {\n    field: \"bronze\",\n    width: 100,\n    filter: NumberFilterComponent,\n    suppressHeaderMenuButton: true,\n  },\n  {\n    field: \"total\",\n    width: 100,\n    filter: NumberFilterComponent,\n    suppressHeaderMenuButton: true,\n  },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n  defaultColDef: {\n    flex: 1,\n    minWidth: 100,\n    filter: true,\n    floatingFilter: true,\n  },\n  columnDefs: columnDefs,\n};\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then((data) => {\n      gridApi.setGridOption(\"rowData\", data);\n    });\n});\n","index.html":"<style>\n    .ui-slider-handle {\n        z-index: 0 !important;\n    }\n</style>\n<div id=\"myGrid\" style=\"height: 100%\"></div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}