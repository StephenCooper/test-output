{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["numberFloatingFilterComponent.js","main.js"],"styleFiles":[],"files":{"numberFloatingFilterComponent.js":"\n\n\n\n\nclass NumberFloatingFilterComponent  {\n    eGui;\n    currentValue;\n    eFilterInput;\n\n    init(params) {\n        this.eGui = document.createElement('div');\n        this.eGui.innerHTML = '&gt; <input style=\"width: 30px\" type=\"number\" min=\"0\" />';\n        this.currentValue = null;\n        this.eFilterInput = this.eGui.querySelector('input');\n        this.eFilterInput.style.borderColor = params.color;\n\n        const onInputBoxChanged = () => {\n            if (this.eFilterInput.value === '') {\n                // Remove the filter\n                params.parentFilterInstance((instance) => {\n                    instance.onFloatingFilterChanged(null, null);\n                });\n                return;\n            }\n\n            this.currentValue = Number(this.eFilterInput.value);\n            params.parentFilterInstance((instance) => {\n                instance.onFloatingFilterChanged('greaterThan', this.currentValue);\n            });\n        };\n\n        this.eFilterInput.addEventListener('input', onInputBoxChanged);\n    }\n\n    onParentModelChanged(parentModel) {\n        // When the filter is empty we will receive a null message her\n        if (!parentModel) {\n            this.eFilterInput.value = '';\n            this.currentValue = null;\n        } else {\n            this.eFilterInput.value = parentModel.filter + '';\n            this.currentValue = parentModel.filter;\n        }\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n}\n","main.js":"const columnDefs = [\n  { field: \"athlete\", filter: false },\n  {\n    field: \"gold\",\n    filter: \"agNumberColumnFilter\",\n    suppressHeaderFilterButton: true,\n    floatingFilterComponent: NumberFloatingFilterComponent,\n    floatingFilterComponentParams: {\n      color: \"gold\",\n    },\n    suppressFloatingFilterButton: true,\n  },\n  {\n    field: \"silver\",\n    filter: \"agNumberColumnFilter\",\n    suppressHeaderFilterButton: true,\n    floatingFilterComponent: NumberFloatingFilterComponent,\n    floatingFilterComponentParams: {\n      color: \"silver\",\n    },\n    suppressFloatingFilterButton: true,\n  },\n  {\n    field: \"bronze\",\n    filter: \"agNumberColumnFilter\",\n    suppressHeaderFilterButton: true,\n    floatingFilterComponent: NumberFloatingFilterComponent,\n    floatingFilterComponentParams: {\n      color: \"#CD7F32\",\n    },\n    suppressFloatingFilterButton: true,\n  },\n  {\n    field: \"total\",\n    filter: \"agNumberColumnFilter\",\n    suppressHeaderFilterButton: true,\n    floatingFilterComponent: NumberFloatingFilterComponent,\n    floatingFilterComponentParams: {\n      color: \"unset\",\n    },\n    suppressFloatingFilterButton: true,\n  },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n  defaultColDef: {\n    flex: 1,\n    minWidth: 100,\n    filter: true,\n    floatingFilter: true,\n  },\n  columnDefs: columnDefs,\n};\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then((data) => {\n      gridApi.setGridOption(\"rowData\", data);\n    });\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}