{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":true,"entryFileName":"main.ts","mainFileName":"main.ts","styleFiles":["styles.css"],"files":{"styles.css":".number {\n    text-align: right;\n}\n\n.wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n.my-grid {\n    flex-grow: 1;\n}\n\n.my-chart {\n    flex-grow: 1;\n    height: 135px;\n    display: inline-block;\n    margin-top: 0.5rem;\n}\n","dataUpdateWorker.js":"// NOTE: The details of this web worker are not important it's just used to simulate streaming updates in the grid.\n\n// Constants\nconst UPDATES_PER_MESSAGE = 100;\nconst MILLISECONDS_BETWEEN_MESSAGES = 100;\nconst BOOK_COUNT = 5;\nconst TRADE_COUNT = 2;\nconst VALUE_FIELDS = ['current', 'previous', 'pl1', 'pl2', 'gainDx', 'sxPx', '_99Out'];\nconst PRODUCTS = [\n    'Cobalt',\n    'Rubber',\n    'Wool',\n    'Amber',\n    'Corn',\n    'Nickel',\n    'Copper',\n    'Oats',\n    'Coffee',\n    'Wheat',\n    'Lead',\n    'Zinc',\n    'Tin',\n    'Coca',\n];\nconst PORTFOLIOS = ['Aggressive', 'Defensive', 'Income', 'Speculative', 'Hybrid'];\n\n// Global Variables\nlet globalRowData;\nlet nextBookId = 62472;\nlet nextTradeId = 24287;\nlet nextBatchId = 101;\nlet latestUpdateId = 0;\n\n/**\n * Generates a random number between min and max\n */\nfunction randomBetween(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n// build up the test data\nfunction createRowData() {\n    globalRowData = [];\n    var thisBatch = nextBatchId++;\n    for (var k = 0; k < BOOK_COUNT; k++) {\n        for (var j = 0; j < PORTFOLIOS.length; j++) {\n            var portfolio = PORTFOLIOS[j];\n            for (var i = 0; i < PRODUCTS.length; i++) {\n                var product = PRODUCTS[i];\n                var book = 'GL-' + ++nextBookId;\n                for (var l = 0; l < TRADE_COUNT; l++) {\n                    var trade = createTradeRecord(product, portfolio, book, thisBatch);\n                    globalRowData.push(trade);\n                }\n            }\n        }\n    }\n    // console.log('Total number of records sent to grid = ' + globalRowData.length);\n}\n\nfunction createTradeRecord(product, portfolio, book, batch) {\n    var current = Math.floor(Math.random() * 10000) + (Math.random() < 0.45 ? 500 : 19000);\n    var previous = current + (Math.random() < 0.5 ? 500 : 19000);\n\n    return {\n        product: product,\n        portfolio: portfolio,\n        book: book,\n        trade: ++nextTradeId,\n        submitterID: randomBetween(10, 1000),\n        submitterDealID: randomBetween(10, 1000),\n        dealType: Math.random() < 0.2 ? 'Physical' : 'Financial',\n        bidFlag: Math.random() < 0.5 ? 'Buy' : 'Sell',\n        current: current,\n        previous: previous,\n        pl1: randomBetween(10000, 30000),\n        pl2: randomBetween(8000, 35000),\n        gainDx: randomBetween(35000, 1000),\n        sxPx: randomBetween(10000, 30000),\n        batch: batch,\n    };\n}\n\nfunction updateSomeItems(updateCount) {\n    var itemsToUpdate = [];\n    for (var k = 0; k < updateCount; k++) {\n        if (globalRowData.length === 0) {\n            continue;\n        }\n        var indexToUpdate = Math.floor(Math.random() * globalRowData.length);\n        var itemToUpdate = globalRowData[indexToUpdate];\n\n        var field = VALUE_FIELDS[Math.floor(Math.random() * VALUE_FIELDS.length)];\n        itemToUpdate[field] += randomBetween(-8000, 8200);\n\n        itemsToUpdate.push(itemToUpdate);\n    }\n\n    return itemsToUpdate;\n}\n\nfunction startUpdates(thisUpdateId) {\n    postMessage({\n        type: 'start',\n        updateCount: UPDATES_PER_MESSAGE,\n        interval: MILLISECONDS_BETWEEN_MESSAGES,\n    });\n\n    var intervalId;\n    function intervalFunc() {\n        postMessage({\n            type: 'updateData',\n            records: updateSomeItems(UPDATES_PER_MESSAGE),\n        });\n        if (thisUpdateId !== latestUpdateId) {\n            clearInterval(intervalId);\n        }\n    }\n\n    intervalId = setInterval(intervalFunc, MILLISECONDS_BETWEEN_MESSAGES);\n}\n\n// Initialize Row Data\ncreateRowData();\n\n// Notify that row data is ready\npostMessage({\n    type: 'setRowData',\n    records: globalRowData,\n});\n\n// Event Listener for incoming messages\nself.addEventListener('message', function (e) {\n    latestUpdateId++;\n    if (e.data === 'start') {\n        startUpdates(latestUpdateId);\n    }\n});\n","main.ts":"import { AgChartsEnterpriseModule } from \"ag-charts-enterprise\";\nimport {\n  CellStyleModule,\n  ChartToolbarMenuItemOptions,\n  ChartType,\n  ClientSideRowModelApiModule,\n  ClientSideRowModelModule,\n  ColDef,\n  ColGroupDef,\n  ColTypeDef,\n  ColumnApiModule,\n  GetChartToolbarItems,\n  GetRowIdFunc,\n  GetRowIdParams,\n  GridApi,\n  GridOptions,\n  HighlightChangesModule,\n  ModuleRegistry,\n  NumberEditorModule,\n  TextEditorModule,\n  TextFilterModule,\n  ValidationModule,\n  ValueFormatterParams,\n  createGrid,\n} from \"ag-grid-community\";\nimport { IntegratedChartsModule, RowGroupingModule } from \"ag-grid-enterprise\";\n\nModuleRegistry.registerModules([\n  ColumnApiModule,\n  ClientSideRowModelApiModule,\n  TextEditorModule,\n  TextFilterModule,\n  NumberEditorModule,\n  CellStyleModule,\n  ClientSideRowModelModule,\n  IntegratedChartsModule.with(AgChartsEnterpriseModule),\n  RowGroupingModule,\n  HighlightChangesModule,\n  ValidationModule /* Development Only */,\n]);\n\ndeclare let __basePath: string;\n\n// Types\ninterface WorkerMessage {\n  type: string;\n  records?: any[];\n}\n\n// Global variables\nlet chartRef: any;\nlet gridApi: GridApi;\nlet worker: Worker;\n\n// Column Definitions\nfunction getColumnDefs(): ColDef[] {\n  return [\n    { field: \"product\", chartDataType: \"category\", minWidth: 110 },\n    { field: \"book\", chartDataType: \"category\", minWidth: 100 },\n    { field: \"current\", type: \"measure\" },\n    { field: \"previous\", type: \"measure\" },\n    { headerName: \"PL 1\", field: \"pl1\", type: \"measure\" },\n    { headerName: \"PL 2\", field: \"pl2\", type: \"measure\" },\n    { headerName: \"Gain-DX\", field: \"gainDx\", type: \"measure\" },\n    { headerName: \"SX / PX\", field: \"sxPx\", type: \"measure\" },\n\n    { field: \"trade\", type: \"measure\" },\n    { field: \"submitterID\", type: \"measure\" },\n    { field: \"submitterDealID\", type: \"measure\" },\n\n    { field: \"portfolio\" },\n    { field: \"dealType\" },\n    { headerName: \"Bid\", field: \"bidFlag\" },\n  ];\n}\n\n// Grid Options\nconst gridOptions: GridOptions = {\n  columnDefs: getColumnDefs(),\n  defaultColDef: {\n    editable: true,\n    flex: 1,\n    minWidth: 140,\n    filter: true,\n  },\n  columnTypes: {\n    measure: {\n      chartDataType: \"series\",\n      cellClass: \"number\",\n      valueFormatter: numberCellFormatter,\n      cellRenderer: \"agAnimateShowChangeCellRenderer\",\n    },\n  },\n  enableCharts: true,\n  suppressAggFuncInHeader: true,\n  getRowId: (params: GetRowIdParams) => String(params.data.trade),\n  getChartToolbarItems: (): ChartToolbarMenuItemOptions[] => [],\n  onFirstDataRendered,\n};\n\n// Initial Chart Creation\nfunction onFirstDataRendered(params: any) {\n  chartRef = params.api.createRangeChart({\n    chartContainer: document.querySelector(\"#myChart\") as any,\n    cellRange: {\n      columns: [\n        \"product\",\n        \"current\",\n        \"previous\",\n        \"pl1\",\n        \"pl2\",\n        \"gainDx\",\n        \"sxPx\",\n      ],\n    },\n    suppressChartRanges: true,\n    chartType: \"groupedColumn\",\n    aggFunc: \"sum\",\n    chartThemeOverrides: {\n      common: {\n        animation: {\n          enabled: false,\n        },\n      },\n    },\n  });\n}\n\nfunction updateChart(chartType: ChartType) {\n  gridApi!.updateChart({\n    type: \"rangeChartUpdate\",\n    chartId: chartRef.chartId,\n    chartType,\n  });\n}\n\nfunction numberCellFormatter(params: ValueFormatterParams) {\n  return Math.floor(params.value)\n    .toString()\n    .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\");\n}\n\nfunction startWorker(): void {\n  worker = new Worker(`${__basePath || \".\"}/dataUpdateWorker.js`);\n  worker.addEventListener(\"message\", handleWorkerMessage);\n  worker.postMessage(\"start\");\n}\n\nfunction handleWorkerMessage(e: any): void {\n  if (e.data.type === \"setRowData\") {\n    gridApi!.setGridOption(\"rowData\", e.data.records);\n  }\n  if (e.data.type === \"updateData\") {\n    gridApi!.applyTransactionAsync({ update: e.data.records });\n  }\n}\n\n// after page is loaded, create the grid\nconst eGridDiv = document.querySelector<HTMLElement>(\"#myGrid\")!;\ngridApi = createGrid(eGridDiv, gridOptions);\n\n// IIFE\n(function () {\n  startWorker();\n})();\n\n// Worker Commands\nfunction onStartLoad(): void {\n  worker.postMessage(\"start\");\n}\n\nfunction onStopMessages(): void {\n  worker.postMessage(\"stop\");\n}\n\nif (typeof window !== \"undefined\") {\n  // Attach external event handlers to window so they can be called from index.html\n  (<any>window).updateChart = updateChart;\n  (<any>window).onStartLoad = onStartLoad;\n  (<any>window).onStopMessages = onStopMessages;\n} /** DARK INTEGRATED START **/\nconst isInitialModeDark =\n  document.documentElement.dataset.agThemeMode?.includes(\"dark\");\n\n// update chart themes based on dark mode status\nconst updateChartThemes = (isDark: boolean): void => {\n  const themes: string[] = [\n    \"ag-default\",\n    \"ag-material\",\n    \"ag-sheets\",\n    \"ag-polychroma\",\n    \"ag-vivid\",\n  ];\n  const currentThemes = gridApi.getGridOption(\"chartThemes\");\n  const customTheme =\n    currentThemes &&\n    currentThemes.some((theme) => theme.startsWith(\"my-custom-theme\"));\n\n  let modifiedThemes: string[] = customTheme\n    ? isDark\n      ? [\"my-custom-theme-dark\", \"my-custom-theme-light\"]\n      : [\"my-custom-theme-light\", \"my-custom-theme-dark\"]\n    : Array.from(\n        new Set(themes.map((theme) => theme + (isDark ? \"-dark\" : \"\"))),\n      );\n\n  // updating the 'chartThemes' grid option will cause the chart to reactively update!\n  gridApi.setGridOption(\"chartThemes\", modifiedThemes);\n};\n\n// update chart themes when example first loads\nlet initialSet = false;\nconst maxTries = 5;\nlet tries = 0;\nconst trySetInitial = (delay) => {\n  if (gridApi) {\n    initialSet = true;\n    updateChartThemes(isInitialModeDark);\n  } else {\n    if (tries < maxTries) {\n      setTimeout(() => trySetInitial(), 250);\n      tries++;\n    }\n  }\n};\ntrySetInitial(0);\n\ninterface ColorSchemeChangeEventDetail {\n  darkMode: boolean;\n}\n\n// event handler for color scheme changes\nconst handleColorSchemeChange = (\n  event: CustomEvent<ColorSchemeChangeEventDetail>,\n): void => {\n  const { darkMode } = event.detail;\n  updateChartThemes(darkMode);\n};\n\n// listen for user-triggered dark mode changes (not removing listener is fine here!)\ndocument.addEventListener(\n  \"color-scheme-change\",\n  handleColorSchemeChange as EventListener,\n);\n/** DARK INTEGRATED END **/\n","index.html":"<div id=\"myApp\" class=\"wrapper\">\n    <div style=\"padding-bottom: 4px\">\n        <span>\n            <button onclick=\"onStopMessages()\">&#9632; Stop</button>\n            <button onclick=\"onStartLoad()\">&#9658; Start</button>\n        </span>\n        <span style=\"margin-left: 30px\">\n            <button onclick=\"updateChart('stackedColumn')\">Stacked Column Chart</button>\n            <button onclick=\"updateChart('groupedColumn')\">Grouped Column Chart</button>\n            <button onclick=\"updateChart('line')\">Line Chart</button>\n        </span>\n    </div>\n    <div id=\"myGrid\" class=\"my-grid\"></div>\n    <div id=\"myChart\" class=\"my-chart\"></div>\n</div>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {},\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        // map tells the System loader where to look for things\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            // appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap,\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {},\n            app: {\n                main: './main.ts',\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0","ag-charts-community":"latest","ag-charts-enterprise":"latest"}},"supportedFrameworks":["typescript"]}