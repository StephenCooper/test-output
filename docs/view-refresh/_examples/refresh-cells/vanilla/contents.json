{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n\n.example-header {\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\n    font-size: 13px;\n    margin-bottom: 5px;\n}\n\n.ag-floating-top .ag-row {\n    background-color: #99999944;\n}\n\n.ag-floating-bottom .ag-row {\n    background-color: #99999944;\n}\n","main.js":"// placing in 13 rows, so there are exactly enough rows to fill the grid, makes\n// the row animation look nice when you see all the rows\nlet data = [];\nlet topRowData = [];\nlet bottomRowData = [];\nlet gridApi;\nconst gridOptions = {\n  columnDefs: [\n    { field: \"a\", enableCellChangeFlash: false },\n    { field: \"b\" },\n    { field: \"c\" },\n    { field: \"d\" },\n    { field: \"e\" },\n    { field: \"f\" },\n  ],\n  defaultColDef: {\n    flex: 1,\n    enableCellChangeFlash: true,\n  },\n  rowData: [],\n  pinnedTopRowData: [],\n  pinnedBottomRowData: [],\n  onGridReady: (params) => {\n    // placing in 13 rows, so there are exactly enough rows to fill the grid, makes\n    // the row animation look nice when you see all the rows\n    data = createData(14);\n    topRowData = createData(2);\n    bottomRowData = createData(2);\n    params.api.setGridOption(\"rowData\", data);\n    params.api.setGridOption(\"pinnedTopRowData\", topRowData);\n    params.api.setGridOption(\"pinnedBottomRowData\", bottomRowData);\n  },\n};\n\nfunction createData(count) {\n  const result = [];\n  for (let i = 1; i <= count; i++) {\n    result.push({\n      a: (i * 863) % 100,\n      b: (i * 811) % 100,\n      c: (i * 743) % 100,\n      d: (i * 677) % 100,\n      e: (i * 619) % 100,\n      f: (i * 571) % 100,\n    });\n  }\n  return result;\n}\n\nfunction isForceRefreshSelected() {\n  return document.querySelector(\"#forceRefresh\").checked;\n}\n\nfunction isSuppressFlashSelected() {\n  return document.querySelector(\"#suppressFlash\").checked;\n}\n\nfunction scrambleAndRefreshAll() {\n  scramble();\n  const params = {\n    force: isForceRefreshSelected(),\n    suppressFlash: isSuppressFlashSelected(),\n  };\n  gridApi.refreshCells(params);\n}\n\nfunction scrambleAndRefreshLeftToRight() {\n  scramble();\n\n  [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"].forEach((col, index) => {\n    const millis = index * 100;\n    const params = {\n      force: isForceRefreshSelected(),\n      suppressFlash: isSuppressFlashSelected(),\n      columns: [col],\n    };\n    callRefreshAfterMillis(params, millis, gridApi);\n  });\n}\n\nfunction scrambleAndRefreshTopToBottom() {\n  scramble();\n\n  let frame = 0;\n  let i;\n  let rowNode;\n\n  for (i = 0; i < gridApi.getPinnedTopRowCount(); i++) {\n    rowNode = gridApi.getPinnedTopRow(i);\n    refreshRow(rowNode, gridApi);\n  }\n\n  for (i = 0; i < gridApi.getDisplayedRowCount(); i++) {\n    rowNode = gridApi.getDisplayedRowAtIndex(i);\n    refreshRow(rowNode, gridApi);\n  }\n\n  for (i = 0; i < gridApi.getPinnedBottomRowCount(); i++) {\n    rowNode = gridApi.getPinnedBottomRow(i);\n    refreshRow(rowNode, gridApi);\n  }\n\n  function refreshRow(rowNode, api) {\n    const millis = frame++ * 100;\n    const rowNodes = [rowNode]; // params needs an array\n    const params = {\n      force: isForceRefreshSelected(),\n      suppressFlash: isSuppressFlashSelected(),\n      rowNodes: rowNodes,\n    };\n    callRefreshAfterMillis(params, millis, api);\n  }\n}\n\nfunction callRefreshAfterMillis(params, millis, api) {\n  setTimeout(() => {\n    api.refreshCells(params);\n  }, millis);\n}\n\nfunction scramble() {\n  data.forEach(scrambleItem);\n  topRowData.forEach(scrambleItem);\n  bottomRowData.forEach(scrambleItem);\n}\n\nfunction scrambleItem(item) {\n  [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"].forEach((colId) => {\n    // skip 50% of the cells so updates are random\n    if (Math.random() > 0.5) {\n      return;\n    }\n    item[colId] = Math.floor(Math.random() * 100);\n  });\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n});\n","index.html":"<div class=\"example-wrapper\">\n    <div class=\"example-header\">\n        <div>\n            <button onclick=\"scrambleAndRefreshAll()\">Scramble & Refresh All</button>\n            <button onclick=\"scrambleAndRefreshLeftToRight()\">Scramble & Refresh Left to Right</button>\n            <button onclick=\"scrambleAndRefreshTopToBottom()\">Scramble & Refresh Top to Bottom</button>\n        </div>\n        <div>\n            <label>\n                <input type=\"checkbox\" id=\"forceRefresh\" />\n                Force Refresh\n            </label>\n            <label>\n                <input type=\"checkbox\" id=\"suppressFlash\" />\n                Suppress Flash\n            </label>\n        </div>\n    </div>\n    <div id=\"myGrid\"></div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}