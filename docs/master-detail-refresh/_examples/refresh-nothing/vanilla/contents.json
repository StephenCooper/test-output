{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":[],"files":{"main.js":"let gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    // group cell renderer needed for expand / collapse icons\n    { field: \"name\", cellRenderer: \"agGroupCellRenderer\" },\n    { field: \"account\" },\n    { field: \"calls\" },\n    { field: \"minutes\", valueFormatter: \"x.toLocaleString() + 'm'\" },\n  ],\n  defaultColDef: {\n    flex: 1,\n    enableCellChangeFlash: true,\n  },\n  getRowId: (params) => String(params.data.account),\n  masterDetail: true,\n  detailCellRendererParams: {\n    refreshStrategy: \"nothing\",\n\n    template: (params) => {\n      return (\n        '<div class=\"ag-details-row ag-details-row-fixed-height\">' +\n        '<div style=\"padding: 4px; font-weight: bold;\">' +\n        (params.data ? params.data.name : \"\") +\n        \" \" +\n        (params.data ? params.data.calls : \"\") +\n        \" calls</div>\" +\n        '<div data-ref=\"eDetailGrid\" class=\"ag-details-grid ag-details-grid-fixed-height\"/>' +\n        \"</div>\"\n      );\n    },\n\n    detailGridOptions: {\n      rowSelection: {\n        mode: \"multiRow\",\n        headerCheckbox: false,\n      },\n      getRowId: (params) => String(params.data.callId),\n      columnDefs: [\n        { field: \"callId\" },\n        { field: \"direction\" },\n        { field: \"number\", minWidth: 150 },\n        { field: \"duration\", valueFormatter: \"x.toLocaleString() + 's'\" },\n        { field: \"switchCode\", minWidth: 150 },\n      ],\n      defaultColDef: {\n        flex: 1,\n        enableCellChangeFlash: true,\n      },\n    },\n    getDetailRowData: (params) => {\n      // params.successCallback([]);\n      params.successCallback(params.data.callRecords);\n    },\n  },\n  onFirstDataRendered: onFirstDataRendered,\n};\n\nlet allRowData;\n\nfunction onFirstDataRendered(params) {\n  // arbitrarily expand a row for presentational purposes\n  setTimeout(() => {\n    params.api.getDisplayedRowAtIndex(0).setExpanded(true);\n  }, 0);\n\n  setInterval(() => {\n    if (!allRowData) {\n      return;\n    }\n\n    const data = allRowData[0];\n\n    const newCallRecords = [];\n    data.callRecords.forEach(function (record, index) {\n      newCallRecords.push({\n        name: record.name,\n        callId: record.callId,\n        duration: record.duration + (index % 2),\n        switchCode: record.switchCode,\n        direction: record.direction,\n        number: record.number,\n      });\n    });\n\n    data.callRecords = newCallRecords;\n    data.calls++;\n\n    const tran = {\n      update: [data],\n    };\n\n    params.api.applyTransaction(tran);\n  }, 2000);\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/master-detail-data.json\")\n    .then((response) => response.json())\n    .then((data) => {\n      allRowData = data;\n      gridApi.setGridOption(\"rowData\", data);\n    });\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n","interfaces.ts":"\nexport interface ICallRecord {\n    name: string;\n    callId: number;\n    duration: number;\n    switchCode: string;\n    direction: string;\n    number: string;\n}\n\nexport interface IAccount {\n    name: string;\n    account: number;\n    calls: number;\n    minutes: number;\n    callRecords: ICallRecord[];\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}