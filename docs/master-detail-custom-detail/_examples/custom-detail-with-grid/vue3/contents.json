{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"main.ts","scriptFiles":[],"styleFiles":[],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n\n.full-width-panel {\n    position: relative;\n    height: 100%;\n    width: 100%;\n    padding: 5px;\n}\n\n.call-record-cell {\n    text-align: right;\n}\n\n.full-width-detail {\n    padding-top: 4px;\n}\n\n.full-width-details {\n    float: left;\n    padding: 5px;\n    margin: 5px;\n    width: 150px;\n}\n\n.full-width-grid {\n    margin-left: 125px;\n    padding: 25px;\n    display: block;\n    height: calc(100% - 50px) !important;\n}\n\n.full-width-grid-toolbar {\n    top: 4px;\n    left: 30px;\n    margin-left: 150px;\n    display: block;\n    position: absolute;\n}\n\n.full-width-phone-icon {\n    padding-right: 10px;\n}\n\n.full-width-search {\n    border: 1px solid #eee;\n    margin-left: 10px;\n}\n","detailCellRendererVue.ts":"import { createApp, defineComponent } from \"vue\";\n\nimport type { ColDef, GridReadyEvent } from \"ag-grid-community\";\nimport { AgGridVue } from \"ag-grid-vue3\";\n\nexport default defineComponent({\n  template: `\n      <div role=\"gridcell\" class=\"full-width-panel\">\n        <div class=\"full-width-details\">\n            <div class=\"full-width-detail\"><b>Name: </b>{{ params.data.name }}</div>\n            <div class=\"full-width-detail\"><b>Account: </b>{{ params.data.account }}</div>\n        </div>\n        <ag-grid-vue style=\"height: 100%;\"\n                    class=\"full-width-grid\"\n                    :columnDefs=\"colDefs\"\n                    :defaultColDef=\"defaultColDef\"\n                    :rowData=\"rowData\"\n                    @grid-ready=\"onGridReady\">\n        </ag-grid-vue>\n      </div>\n    `,\n  components: {\n    \"ag-grid-vue\": AgGridVue,\n  },\n  data: function () {\n    return {\n      colDefs: null,\n      rowData: null,\n    };\n  },\n  beforeMount() {\n    this.colDefs = <ColDef[]>[\n      { field: \"callId\" },\n      { field: \"direction\" },\n      { field: \"number\" },\n      { field: \"duration\", valueFormatter: \"x.toLocaleString() + 's'\" },\n      { field: \"switchCode\" },\n    ];\n    this.defaultColDef = <ColDef>{\n      flex: 1,\n      minWidth: 120,\n    };\n  },\n  mounted() {\n    this.rowData = this.params.data.callRecords;\n    this.rowId = this.params.node.id;\n    this.masterGridApi = this.params.api;\n  },\n  beforeDestroy() {\n    console.log(\"removing detail grid info with id: \", this.rowId);\n    this.masterGridApi.removeDetailGridInfo(this.rowId);\n  },\n  methods: {\n    onGridReady(params: GridReadyEvent) {\n      let gridInfo = {\n        id: this.rowId,\n        api: params.api,\n      };\n\n      console.log(\"adding detail grid info with id: \", this.rowId);\n      this.masterGridApi.addDetailGridInfo(this.rowId, gridInfo);\n    },\n  },\n});\n","main.ts":"import { createApp, defineComponent } from \"vue\";\n\nimport type {\n  ChartRef,\n  ColDef,\n  FirstDataRenderedEvent,\n  GridApi,\n  GridReadyEvent,\n} from \"ag-grid-community\";\nimport {\n  ClientSideRowModelApiModule,\n  ClientSideRowModelModule,\n  ModuleRegistry,\n  RowApiModule,\n  ValidationModule,\n} from \"ag-grid-community\";\nimport {\n  ColumnMenuModule,\n  ColumnsToolPanelModule,\n  ContextMenuModule,\n  MasterDetailModule,\n} from \"ag-grid-enterprise\";\nimport { AgGridVue } from \"ag-grid-vue3\";\n\nimport DetailCellRenderer from \"./detailCellRendererVue\";\nimport \"./styles.css\";\n\nModuleRegistry.registerModules([\n  ClientSideRowModelApiModule,\n  RowApiModule,\n  ClientSideRowModelModule,\n  ColumnsToolPanelModule,\n  MasterDetailModule,\n  ColumnMenuModule,\n  ContextMenuModule,\n  ValidationModule /* Development Only */,\n]);\n\nconst VueExample = defineComponent({\n  template: `\n        <div style=\"height: 100%\">\n            <div class=\"example-wrapper\">\n                <div style=\"margin-bottom: 5px;\">\n                    <button v-on:click=\"printDetailGridInfo()\">Print Detail Grid Info</button>\n                    <button v-on:click=\"expandCollapseAll()\">Toggle Expand / Collapse</button>\n                </div>\n                <ag-grid-vue\n                        style=\"width: 100%; height: 100%;\"\n                        id=\"myGrid\"\n                        :columnDefs=\"columnDefs\"\n                        @grid-ready=\"onGridReady\"\n                        :defaultColDef=\"defaultColDef\"\n                        :masterDetail=\"true\"\n                        :detailRowHeight=\"detailRowHeight\"\n                        :detailCellRenderer=\"detailCellRenderer\"\n                        :rowData=\"rowData\"\n                        @first-data-rendered=\"onFirstDataRendered\"></ag-grid-vue>\n            </div>\n        </div>\n    `,\n  components: {\n    \"ag-grid-vue\": AgGridVue,\n    myDetailCellRenderer: DetailCellRenderer,\n  },\n  data: function () {\n    return {\n      columnDefs: <ColDef[]>[\n        {\n          field: \"name\",\n          cellRenderer: \"agGroupCellRenderer\",\n        },\n        { field: \"account\" },\n        { field: \"calls\" },\n        {\n          field: \"minutes\",\n          valueFormatter: \"x.toLocaleString() + 'm'\",\n        },\n      ],\n      gridApi: null,\n      defaultColDef: <ColDef>{ flex: 1 },\n      detailRowHeight: null,\n      detailCellRenderer: null,\n      rowData: null,\n    };\n  },\n  beforeMount() {\n    this.detailRowHeight = 310;\n    this.detailCellRenderer = \"myDetailCellRenderer\";\n  },\n  methods: {\n    onFirstDataRendered(params: FirstDataRenderedEvent) {\n      setTimeout(function () {\n        params.api.getDisplayedRowAtIndex(1).setExpanded(true);\n      }, 0);\n    },\n    expandCollapseAll() {\n      this.gridApi.forEachNode(function (node) {\n        node.expanded = !!window.collapsed;\n      });\n      window.collapsed = !window.collapsed;\n      this.gridApi.onGroupExpandedOrCollapsed();\n    },\n    printDetailGridInfo() {\n      console.log(\"Currently registered detail grid's: \");\n      this.gridApi.forEachDetailGridInfo(function (detailGridInfo) {\n        console.log(detailGridInfo);\n      });\n    },\n    onGridReady(params: GridReadyEvent) {\n      this.gridApi = params.api;\n\n      const updateData = (data) => {\n        this.rowData = data;\n      };\n\n      fetch(\"https://www.ag-grid.com/example-assets/master-detail-data.json\")\n        .then((resp) => resp.json())\n        .then((data) => updateData(data));\n    },\n  },\n});\n\ncreateApp(VueExample).mount(\"#app\");\n","interfaces.ts":"\nexport interface ICallRecord {\n    name: string;\n    callId: number;\n    duration: number;\n    switchCode: string;\n    direction: string;\n    number: string;\n}\n\nexport interface IAccount {\n    name: string;\n    account: number;\n    calls: number;\n    minutes: number;\n    callRecords: ICallRecord[];\n}"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        defaultExtension: 'js',\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            vue: 'npm:vue@3.5.0/dist/vue.esm-browser.js',\n            '@vue/reactivity': 'npm:@vue/reactivity@3.0.0/dist/reactivity.esm-browser.prod.js',\n\n            // vue class component\n            'vue-class-component': 'npm:vue-class-component@^8.0.0-beta.3/dist/vue-class-component.cjs.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            'css.js': {\n                defaultExtension: 'js',\n            },\n            vue: {\n                defaultExtension: 'js',\n            },\n            app: {\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-vue3': {\n                main: './dist/main.umd.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"vue":"^3.5.0","ag-grid-vue3":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}