{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["detailCellRenderer.js","main.js"],"styleFiles":["styles.css"],"files":{"styles.css":"p {\n    font-size: 1em;\n    margin-bottom: 1em;\n    margin-top: 0;\n}\n\n.container {\n    max-width: 960px;\n    height: 100%;\n    margin: 10% auto;\n    padding: 2.5em;\n}\n\nform > div {\n    display: flex;\n    background-color: #99999944;\n}\n\nform > div > p {\n    min-width: 33.33%;\n}\n\nlabel {\n    display: block;\n    margin: 0.75em 25%;\n    font-weight: bold;\n}\n","detailCellRenderer.js":"\nclass DetailCellRenderer  {\n    eGui;\n\n    init(params) {\n        this.eGui = document.createElement('div');\n        this.eGui.setAttribute('role', 'gridcell');\n        this.refresh(params);\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n\n    refresh(params) {\n        this.eGui.innerHTML =\n            '<form>' +\n            '  <div>' +\n            '  <p>' +\n            '    <label>' +\n            '      Calls:<br>' +\n            '    <input type=\"text\" value=\"' +\n            params.data.calls +\n            '\">' +\n            '    </label>' +\n            '  </p>' +\n            '  <p>' +\n            '    <label>' +\n            '        Last Updated: ' +\n            new Date().toLocaleTimeString() +\n            '    </label>' +\n            '  </p>' +\n            '</form>' +\n            '</div>';\n        // tell the grid not to destroy and recreate\n        return true;\n    }\n}\n","main.js":"let gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    // group cell renderer needed for expand / collapse icons\n    { field: \"name\", cellRenderer: \"agGroupCellRenderer\" },\n    { field: \"account\" },\n    { field: \"calls\" },\n    { field: \"minutes\", valueFormatter: \"x.toLocaleString() + 'm'\" },\n  ],\n  defaultColDef: {\n    flex: 1,\n    enableCellChangeFlash: true,\n  },\n  masterDetail: true,\n  detailCellRenderer: DetailCellRenderer,\n  detailRowHeight: 70,\n  groupDefaultExpanded: 1,\n  onFirstDataRendered: onFirstDataRendered,\n};\n\nlet allRowData;\n\nfunction onFirstDataRendered(params) {\n  setInterval(() => {\n    if (!allRowData) {\n      return;\n    }\n\n    const data = allRowData[0];\n\n    const newCallRecords = [];\n    data.callRecords.forEach((record, index) => {\n      newCallRecords.push({\n        name: record.name,\n        callId: record.callId,\n        duration: record.duration + (index % 2),\n        switchCode: record.switchCode,\n        direction: record.direction,\n        number: record.number,\n      });\n    });\n\n    data.callRecords = newCallRecords;\n    data.calls++;\n\n    const tran = {\n      update: [data],\n    };\n\n    params.api.applyTransaction(tran);\n  }, 2000);\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/master-detail-data.json\")\n    .then((response) => response.json())\n    .then((data) => {\n      allRowData = data;\n      gridApi.setGridOption(\"rowData\", allRowData);\n    });\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n","interfaces.ts":"\nexport interface ICallRecord {\n    name: string;\n    callId: number;\n    duration: number;\n    switchCode: string;\n    direction: string;\n    number: string;\n}\n\nexport interface IAccount {\n    name: string;\n    account: number;\n    calls: number;\n    minutes: number;\n    callRecords: ICallRecord[];\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}