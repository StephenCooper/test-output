{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["detailCellRenderer.js","main.js"],"styleFiles":["styles.css"],"files":{"styles.css":"p {\n    font-size: 1em;\n    margin-bottom: 1em;\n    margin-top: 0;\n}\n\n.container {\n    max-width: 960px;\n    height: 100%;\n    margin: 10% auto;\n    padding: 2.5em;\n}\n\nform > div {\n    display: flex;\n    background-color: #99999944;\n}\n\nform > div > p {\n    min-width: 33.33%;\n}\n\nform input {\n    width: 100%;\n}\n\nlabel {\n    display: block;\n    margin: 0.75em 25%;\n    font-weight: bold;\n}\n","detailCellRenderer.js":"\nclass DetailCellRenderer  {\n    eGui;\n    eParentEl;\n\n    init(params) {\n        const firstRecord = params.data.callRecords[0];\n\n        this.eParentEl = params.eParentOfValue;\n        this.eParentEl.addEventListener('focus', this.onParentElFocus);\n        this.eGui = document.createElement('div');\n        this.eGui.setAttribute('role', 'gridcell');\n        this.eGui.innerHTML =\n            '<form>' +\n            '  <div>' +\n            '  <p>' +\n            '    <label>' +\n            '      Call Id:<br>' +\n            '    <input type=\"text\" value=\"' +\n            firstRecord.callId +\n            '\">' +\n            '    </label>' +\n            '  </p>' +\n            '  <p>' +\n            '    <label>' +\n            '      Number:<br>' +\n            '    <input type=\"text\" value=\"' +\n            firstRecord.number +\n            '\">' +\n            '    </label>' +\n            '  </p>' +\n            '  <p>' +\n            '    <label>' +\n            '      Direction:<br>' +\n            '    <input type=\"text\" value=\"' +\n            firstRecord.direction +\n            '\">' +\n            '    </label>' +\n            '  </p>' +\n            '</form>' +\n            '</div>';\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n\n    refresh() {\n        return false;\n    }\n\n    onParentElFocus(event) {\n        const currentEl = event.target ;\n        const previousEl = event.relatedTarget ;\n        const previousRowEl = findRowForEl(previousEl);\n        const currentRow = currentEl && parseInt(currentEl.getAttribute('row-index'), 10);\n        const previousRow = previousRowEl && parseInt(previousRowEl.getAttribute('row-index'), 10);\n\n        const inputs = Array.from(currentEl.querySelectorAll('input')).filter((el) => {\n            if (el.checkVisibility) {\n                return el.checkVisibility({\n                    checkOpacity: true,\n                    checkVisibilityCSS: true,\n                });\n            }\n            return !!el.offsetParent && window.getComputedStyle(el).visibility === 'visible';\n        });\n\n        // Navigating forward, or unknown previous row\n        if (!previousRow || currentRow >= previousRow) {\n            // Focus on the first input\n            inputs[0].focus();\n        } else {\n            // Navigating backwards\n            // Focus on the last input\n            inputs[inputs.length - 1].focus();\n        }\n    }\n\n    destroy() {\n        this.eParentEl.removeEventListener('focus', this.onParentElFocus);\n    }\n}\n\nconst findRowForEl = (el) => {\n    let rowEl = el;\n    while (rowEl) {\n        rowEl = rowEl.parentElement;\n        if (rowEl && rowEl.getAttribute('role') === 'row') {\n            return rowEl;\n        }\n    }\n\n    return null;\n};\n","main.js":"let gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    // group cell renderer needed for expand / collapse icons\n    { field: \"name\", cellRenderer: \"agGroupCellRenderer\" },\n    { field: \"account\" },\n    { field: \"calls\" },\n    { field: \"minutes\", valueFormatter: \"x.toLocaleString() + 'm'\" },\n  ],\n  defaultColDef: {\n    flex: 1,\n  },\n  masterDetail: true,\n  detailCellRenderer: DetailCellRenderer,\n  detailRowHeight: 70,\n  onFirstDataRendered: onFirstDataRendered,\n};\n\nfunction onFirstDataRendered(params) {\n  params.api.forEachNode(function (node) {\n    node.setExpanded(node.id === \"1\");\n  });\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/master-detail-data.json\")\n    .then((response) => response.json())\n    .then((data) => {\n      gridApi.setGridOption(\"rowData\", data);\n    });\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n","interfaces.ts":"\nexport interface ICallRecord {\n    name: string;\n    callId: number;\n    duration: number;\n    switchCode: string;\n    direction: string;\n    number: string;\n}\n\nexport interface IAccount {\n    name: string;\n    account: number;\n    calls: number;\n    minutes: number;\n    callRecords: ICallRecord[];\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}