{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":true,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["data.js","main.js"],"styleFiles":[],"files":{"data.js":"function getData() {\n    return [\n        {\n            area: [-20, 30, 50, -18, 25, -50, 70],\n            bar: [30],\n            column: [-20, 30, 50, -18, 25, -50, 70],\n            line: [-20, 30, 50, -18, 25, -50, 70, -20, 39, 5, -18, 25, -50, 70],\n        },\n        {\n            area: [20, 30, -15, 20, -35, -15, -40],\n            bar: [55],\n            column: [20, 30, -15, 20, -35, -15, -40],\n            line: [20, 30, -15, 20, -35, -15, -40, 10, 30, -15, 40, -35, -15, -40],\n        },\n        {\n            area: [1.3, 1.4, 1.1, 1.8, 1.5, 1.5, 2],\n            bar: [80],\n            column: [30, 40, 10, 80, 50, 50, 100],\n            line: [1.3, 1.4, 1.1, 1.8, 1.5, 1.5, 2, 1.3, 1.4, 1.1, 1.8, 1.5, 1.5, 2],\n        },\n        {\n            area: [13.71, -17.41, 10.132, 11.81, 18.71, 2, 6],\n            bar: [48],\n            column: [14, -17, 10, 12, 19, 2, 6],\n            line: [13.71, -18.41, -10.132, 11.81, 18.71, 2, 6, 13.71, -10.41, 10.132, 11.81, 10.71, 2, 6],\n        },\n        {\n            area: [55.0, 15.458, 46.3, -97, 85, 66, 30],\n            bar: [73],\n            column: [55, 15, 46, -97, 85, 66, 30],\n            line: [55.0, 15.458, 46.3, 0, -20, 66, 30, 55.0, 15.458, 46.3, -80, 85, 90, 30],\n        },\n        {\n            area: [3, 2, 4, 6, 5, 5, 4],\n            bar: [20],\n            column: [30, 20, 40, 60, 55, 50, 35],\n            line: [3, 2, 4, 6, 5, 2, 4, 3, 2, 4, 6, 5, 5, 4],\n        },\n        {\n            area: [500, -100, 340, 200, -90, 80, -70],\n            column: [50, -85, 34, 20, -60, 80, -70],\n            bar: [60],\n            line: [500, -100, 340, 200, -90, 80, -70, 500, -100, 340, 200, -90, 80, -70],\n        },\n    ];\n}\n","main.js":"const palette = {\n  blue: \"rgb(20,94,140)\",\n  lightBlue: \"rgb(182,219,242)\",\n  green: \"rgb(63,141,119)\",\n  lightGreen: \"rgba(75,168,142, 0.2)\",\n};\n\nlet gridApi;\n\nconst gridOptions = {\n  rowHeight: 70,\n  columnDefs: [\n    {\n      field: \"bar\",\n      headerName: \"Bar Sparkline\",\n      minWidth: 100,\n      cellRenderer: \"agSparklineCellRenderer\",\n      cellRendererParams: {\n        sparklineOptions: {\n          type: \"bar\",\n          direction: \"horizontal\",\n          min: 0,\n          max: 100,\n          label: {\n            enabled: true,\n            color: \"#5577CC\",\n            placement: \"outside-end\",\n            formatter: function (params) {\n              return `${params.value}%`;\n            },\n            fontSize: 8,\n            fontWeight: \"bold\",\n            fontFamily: \"Arial, Helvetica, sans-serif\",\n          },\n          padding: {\n            top: 15,\n            bottom: 15,\n          },\n          itemStyler: barItemStyler,\n        },\n      },\n    },\n    {\n      field: \"line\",\n      headerName: \"Line Sparkline\",\n      minWidth: 100,\n      cellRenderer: \"agSparklineCellRenderer\",\n      cellRendererParams: {\n        sparklineOptions: {\n          type: \"line\",\n          stroke: \"rgb(63,141,119)\",\n          padding: {\n            top: 10,\n            bottom: 10,\n          },\n          marker: {\n            enabled: true,\n            itemStyler: lineItemStyler,\n          },\n        },\n      },\n    },\n    {\n      field: \"column\",\n      headerName: \"Column Sparkline\",\n      minWidth: 100,\n      cellRenderer: \"agSparklineCellRenderer\",\n      cellRendererParams: {\n        sparklineOptions: {\n          type: \"bar\",\n          direction: \"vertical\",\n          label: {\n            color: \"#5577CC\",\n            enabled: true,\n            placement: \"outside-end\",\n            fontSize: 8,\n            fontFamily: \"Arial, Helvetica, sans-serif\",\n          },\n          padding: {\n            top: 15,\n            bottom: 15,\n          },\n          itemStyler: columnItemStyler,\n        },\n      },\n    },\n    {\n      field: \"area\",\n      headerName: \"Area Sparkline\",\n      minWidth: 100,\n      cellRenderer: \"agSparklineCellRenderer\",\n      cellRendererParams: {\n        sparklineOptions: {\n          type: \"area\",\n          fill: \"rgba(75,168,142, 0.2)\",\n          stroke: \"rgb(63,141,119)\",\n          padding: {\n            top: 10,\n            bottom: 10,\n          },\n          marker: {\n            enabled: true,\n            itemStyler: areaItemStyler,\n          },\n        },\n      },\n    },\n  ],\n  defaultColDef: {\n    flex: 1,\n    minWidth: 100,\n  },\n  rowData: getData(),\n};\n\nfunction barItemStyler(params) {\n  const { yValue, highlighted } = params;\n\n  if (highlighted) {\n    return;\n  }\n  return { fill: yValue <= 50 ? palette.lightBlue : palette.blue };\n}\n\nfunction lineItemStyler(params) {\n  const { first, last, highlighted } = params;\n\n  const color = highlighted\n    ? palette.blue\n    : last\n      ? palette.lightBlue\n      : palette.green;\n\n  return {\n    size: highlighted || first || last ? 5 : 0,\n    fill: color,\n    stroke: color,\n  };\n}\n\nfunction columnItemStyler(params) {\n  const { yValue, highlighted } = params;\n\n  if (highlighted) {\n    return;\n  }\n  return { fill: yValue < 0 ? palette.lightBlue : palette.blue };\n}\n\nfunction areaItemStyler(params) {\n  const { min, highlighted } = params;\n\n  return {\n    size: min || highlighted ? 5 : 0,\n    fill: palette.green,\n    stroke: palette.green,\n  };\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(\n    gridDiv,\n    gridOptions,\n  ); /** DARK INTEGRATED START **/\n  const isInitialModeDark =\n    document.documentElement.dataset.agThemeMode?.includes(\"dark\");\n\n  const updateChartThemes = (isDark) => {\n    const themes = [\n      \"ag-default\",\n      \"ag-material\",\n      \"ag-sheets\",\n      \"ag-polychroma\",\n      \"ag-vivid\",\n    ];\n    const currentThemes = gridApi.getGridOption(\"chartThemes\");\n    const customTheme =\n      currentThemes &&\n      currentThemes.some((theme) => theme.startsWith(\"my-custom-theme\"));\n\n    let modifiedThemes = customTheme\n      ? isDark\n        ? [\"my-custom-theme-dark\", \"my-custom-theme-light\"]\n        : [\"my-custom-theme-light\", \"my-custom-theme-dark\"]\n      : Array.from(\n          new Set(themes.map((theme) => theme + (isDark ? \"-dark\" : \"\"))),\n        );\n\n    // updating the 'chartThemes' grid option will cause the chart to reactively update!\n    gridApi.setGridOption(\"chartThemes\", modifiedThemes);\n  };\n\n  // update chart themes when example first loads\n  let initialSet = false;\n  const maxTries = 5;\n  let tries = 0;\n  const trySetInitial = (delay) => {\n    if (gridApi) {\n      initialSet = true;\n      updateChartThemes(isInitialModeDark);\n    } else {\n      if (tries < maxTries) {\n        setTimeout(() => trySetInitial(), 250);\n        tries++;\n      }\n    }\n  };\n  trySetInitial(0);\n\n  const handleColorSchemeChange = (event) => {\n    const { darkMode } = event.detail;\n    updateChartThemes(darkMode);\n  };\n\n  // listen for user-triggered dark mode changes (not removing listener is fine here!)\n  document.addEventListener(\"color-scheme-change\", handleColorSchemeChange);\n  /** DARK INTEGRATED END **/\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0","ag-charts-community":"latest","ag-charts-enterprise":"latest"}}}