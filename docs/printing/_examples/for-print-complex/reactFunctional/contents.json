{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"index.jsx","mainFileName":"index.jsx","styleFiles":[],"files":{"style.css":".ag-row-level-0 {\n    background-color: #999;\n}\n\n@media print {\n    body {\n        overflow: visible;\n    }\n}\n","data.jsx":"const models = [\n    'Mercedes-AMG C63',\n    'BMW M2',\n    'Audi TT Roadster',\n    'Mazda MX-5',\n    'BMW M3',\n    'Porsche 718 Boxster',\n    'Porsche 718 Cayman',\n];\nconst colors = ['Red', 'Black', 'Green', 'White', 'Blue'];\nconst countries = ['UK', 'Spain', 'France', 'Ireland', 'USA'];\n\nexport function getData() {\n    const rowData = [];\n    for (let i = 0; i < 200; i++) {\n        const item = {\n            id: i + 1,\n            group: 'Group ' + (Math.floor(i / 20) + 1),\n            model: models[Math.floor(Math.random() * models.length)],\n            color: colors[Math.floor(Math.random() * colors.length)],\n            country: countries[Math.floor(Math.random() * countries.length)],\n            year: 2018 - Math.floor(Math.random() * 20),\n            price: 20000 + Math.floor(Math.random() * 100) * 100,\n        };\n        rowData.push(item);\n    }\n    return rowData;\n}\n","index.jsx":"\"use client\";\n\nimport React, {\n  useCallback,\n  useMemo,\n  useRef,\n  useState,\n  StrictMode,\n} from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"./style.css\";\nimport { getData } from \"./data.jsx\";\nimport {\n  ClientSideRowModelApiModule,\n  ClientSideRowModelModule,\n  ModuleRegistry,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\nimport { RowGroupingModule } from \"ag-grid-enterprise\";\nModuleRegistry.registerModules([\n  ClientSideRowModelModule,\n  ClientSideRowModelApiModule,\n  RowGroupingModule,\n  ValidationModule /* Development Only */,\n]);\n\nconst setPrinterFriendly = (api) => {\n  const eGridDiv = document.querySelector(\"#myGrid\");\n  eGridDiv.style.width = \"\";\n  eGridDiv.style.height = \"\";\n  api.setGridOption(\"domLayout\", \"print\");\n};\n\nconst setNormal = (api) => {\n  const eGridDiv = document.querySelector(\"#myGrid\");\n  eGridDiv.style.width = \"700px\";\n  eGridDiv.style.height = \"200px\";\n  api.setGridOption(\"domLayout\", undefined);\n};\n\nconst GridExample = () => {\n  const gridRef = useRef();\n  const containerStyle = useMemo(() => ({ width: \"100%\", height: \"100%\" }), []);\n  const gridStyle = useMemo(() => ({ height: \"200px\", width: \"700px\" }), []);\n  const [rowData, setRowData] = useState(getData());\n  const [columnDefs, setColumnDefs] = useState([\n    { field: \"group\", rowGroup: true, hide: true },\n    { field: \"id\", pinned: \"left\", width: 70 },\n    { field: \"model\", width: 180 },\n    { field: \"color\", width: 100 },\n    {\n      field: \"price\",\n      valueFormatter: \"'$' + value.toLocaleString()\",\n      width: 100,\n    },\n    { field: \"year\", width: 100 },\n    { field: \"country\", width: 120 },\n  ]);\n\n  const onFirstDataRendered = useCallback((params) => {\n    params.api.expandAll();\n  }, []);\n\n  const onBtPrint = useCallback(() => {\n    setPrinterFriendly(gridRef.current.api);\n    setTimeout(() => {\n      print();\n      setNormal(gridRef.current.api);\n    }, 2000);\n  }, [print]);\n\n  return (\n    <div style={containerStyle}>\n      <button onClick={onBtPrint}>Print</button>\n\n      <h3>Latin Text</h3>\n\n      <p>\n        Lorem ipsum dolor sit amet, ne cum repudiare abhorreant. Atqui molestiae\n        neglegentur ad nam, mei amet eros ea, populo deleniti scaevola et pri.\n        Pro no ubique explicari, his reque nulla consequuntur in. His soleat\n        doctus constituam te, sed at alterum repudiandae. Suas ludus electram te\n        ius.\n      </p>\n\n      <div id=\"myGrid\" style={gridStyle}>\n        <AgGridReact\n          ref={gridRef}\n          rowData={rowData}\n          columnDefs={columnDefs}\n          groupDisplayType={\"groupRows\"}\n          onFirstDataRendered={onFirstDataRendered}\n        />\n      </div>\n\n      <h3>More Latin Text</h3>\n\n      <p>\n        Lorem ipsum dolor sit amet, ne cum repudiare abhorreant. Atqui molestiae\n        neglegentur ad nam, mei amet eros ea, populo deleniti scaevola et pri.\n        Pro no ubique explicari, his reque nulla consequuntur in. His soleat\n        doctus constituam te, sed at alterum repudiandae. Suas ludus electram te\n        ius.\n      </p>\n    </div>\n  );\n};\n\nconst root = createRoot(document.getElementById(\"root\"));\nroot.render(\n  <StrictMode>\n    <GridExample />\n  </StrictMode>,\n);\nwindow.tearDownExample = () => root.unmount();\n","index.html":"<style>\n    .ag-cell {\n        page-break-inside: avoid !important;\n    }\n</style>\n\n<button onclick=\"onBtPrint()\">Print</button>\n\n<h3>Latin Text</h3>\n\n<p>\n    Lorem ipsum dolor sit amet, ne cum repudiare abhorreant. Atqui molestiae neglegentur ad nam, mei amet eros ea,\n    populo deleniti scaevola et pri. Pro no ubique explicari, his reque nulla consequuntur in. His soleat doctus\n    constituam te, sed at alterum repudiandae. Suas ludus electram te ius.\n</p>\n\n<div id=\"myGrid\" style=\"width: 700px; height: 200px\"></div>\n\n<h3>More Latin Text</h3>\n\n<p>\n    Lorem ipsum dolor sit amet, ne cum repudiare abhorreant. Atqui molestiae neglegentur ad nam, mei amet eros ea,\n    populo deleniti scaevola et pri. Pro no ubique explicari, his reque nulla consequuntur in. His soleat doctus\n    constituam te, sed at alterum repudiandae. Suas ludus electram te ius.\n</p>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            jsx: 'react',\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            // react\n            react: 'npm:react@18.2.0',\n            'react-dom': 'npm:react-dom@18.2.0',\n            'react-dom/client': 'npm:react-dom@18.2.0',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            css: {},\n            react: {\n                main: './umd/react.production.min.js',\n            },\n            'react-dom': {\n                main: './umd/react-dom.production.min.js',\n            },\n            'react-dom/server': {\n                main: '../umd/react-dom-server.browser.production.min.js',\n            },\n            app: {\n                main: './index.jsx',\n                defaultExtension: 'jsx',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"react":"18","react-dom":"18","@types/react":"18","@types/react-dom":"18","ag-grid-react":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}},"myGridReference":true}