{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"index.jsx","mainFileName":"index.jsx","scriptFiles":[],"styleFiles":[],"files":{"styles.css":".test-grid {\n    flex-grow: 1;\n}\n\n.test-container {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\n.test-header {\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\n    font-size: 13px;\n    margin-bottom: 1rem;\n}\n","data.jsx":"export function getData() {\n  return [\n    {\n      name: \"Michael Phelps\",\n      person: {\n        age: 23,\n        country: \"United States\",\n      },\n      medals: {\n        gold: 8,\n        silver: 0,\n        bronze: 0,\n      },\n    },\n    {\n      name: \"Michael Phelps\",\n      person: {\n        age: 19,\n        country: \"United States\",\n      },\n      medals: {\n        gold: 6,\n        silver: 0,\n        bronze: 2,\n      },\n    },\n    {\n      name: \"Michael Phelps\",\n      person: {\n        age: 27,\n        country: \"United States\",\n      },\n      medals: {\n        gold: 4,\n        silver: 2,\n        bronze: 0,\n      },\n    },\n    {\n      name: \"Natalie Coughlin\",\n      person: {\n        age: 25,\n        country: \"United States\",\n      },\n      medals: {\n        gold: 1,\n        silver: 2,\n        bronze: 3,\n      },\n    },\n    {\n      name: \"Aleksey Nemov\",\n      person: {\n        age: 24,\n        country: \"Russia\",\n      },\n      medals: {\n        gold: 2,\n        silver: 1,\n        bronze: 3,\n      },\n    },\n    {\n      name: \"Alicia Coutts\",\n      person: {\n        age: 24,\n        country: \"Australia\",\n      },\n      medals: {\n        gold: 1,\n        silver: 3,\n        bronze: 1,\n      },\n    },\n    {\n      name: \"Missy Franklin\",\n      person: {\n        age: 17,\n        country: \"United States\",\n      },\n      medals: {\n        gold: 4,\n        silver: 0,\n        bronze: 1,\n      },\n    },\n    {\n      name: \"Ryan Lochte\",\n      person: {\n        age: 27,\n        country: \"United States\",\n      },\n      medals: {\n        gold: 2,\n        silver: 2,\n        bronze: 1,\n      },\n    },\n    {\n      name: \"Allison Schmitt\",\n      person: {\n        age: 22,\n        country: \"United States\",\n      },\n      medals: {\n        gold: 3,\n        silver: 1,\n        bronze: 1,\n      },\n    },\n    {\n      name: \"Natalie Coughlin\",\n      person: {\n        age: 21,\n        country: \"United States\",\n      },\n      medals: {\n        gold: 2,\n        silver: 2,\n        bronze: 1,\n      },\n    },\n    {\n      name: \"Ian Thorpe\",\n      person: {\n        age: 17,\n        country: \"Australia\",\n      },\n      medals: {\n        gold: 3,\n        silver: 2,\n        bronze: 0,\n      },\n    },\n    {\n      name: \"Dara Torres\",\n      person: {\n        age: 33,\n        country: \"United States\",\n      },\n      medals: {\n        gold: 2,\n        silver: 0,\n        bronze: 3,\n      },\n    },\n    {\n      name: \"Cindy Klassen\",\n      person: {\n        age: 26,\n        country: \"Canada\",\n      },\n      medals: {\n        gold: 1,\n        silver: 2,\n        bronze: 2,\n      },\n    },\n    {\n      name: \"Nastia Liukin\",\n      person: {\n        age: 18,\n        country: \"United States\",\n      },\n      medals: {\n        gold: 1,\n        silver: 3,\n        bronze: 1,\n      },\n    },\n    {\n      name: \"Marit BjÃ¸rgen\",\n      person: {\n        age: 29,\n        country: \"Norway\",\n      },\n      medals: {\n        gold: 3,\n        silver: 1,\n        bronze: 1,\n      },\n    },\n    {\n      name: \"Sun Yang\",\n      person: {\n        age: 20,\n        country: \"China\",\n      },\n      medals: {\n        gold: 2,\n        silver: 1,\n        bronze: 1,\n      },\n    },\n    {\n      name: \"Kirsty Coventry\",\n      person: {\n        age: 24,\n        country: \"Zimbabwe\",\n      },\n      medals: {\n        gold: 1,\n        silver: 3,\n        bronze: 0,\n      },\n    },\n    {\n      name: \"Libby Lenton-Trickett\",\n      person: {\n        age: 23,\n        country: \"Australia\",\n      },\n      medals: {\n        gold: 2,\n        silver: 1,\n        bronze: 1,\n      },\n    },\n    {\n      name: \"Ryan Lochte\",\n      person: {\n        age: 24,\n        country: \"United States\",\n      },\n      medals: {\n        gold: 2,\n        silver: 0,\n        bronze: 2,\n      },\n    },\n    {\n      name: \"Inge de Bruijn\",\n      person: {\n        age: 30,\n        country: \"Netherlands\",\n      },\n      medals: {\n        gold: 1,\n        silver: 1,\n        bronze: 2,\n      },\n    },\n  ];\n}\n","index.jsx":"'use client';\nimport React, {\n  StrictMode,\n  useCallback,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport {\n  ClientSideRowModelModule,\n  ColumnApiModule,\n  ModuleRegistry,\n  ValidationModule,\n} from \"ag-grid-community\";\nimport { AgGridReact } from \"ag-grid-react\";\n\nimport { getData } from \"./data.jsx\";\nimport \"./styles.css\";\n\nModuleRegistry.registerModules([\n  ColumnApiModule,\n  ClientSideRowModelModule,\n  ValidationModule /* Development Only */,\n]);\n\nconst GridExample = () => {\n  const containerStyle = useMemo(() => ({ width: \"100%\", height: \"100%\" }), []);\n  const [gridVisible, setGridVisible] = useState(true);\n  const [columnsWidthOnPreDestroyed, setColumnsWidthOnPreDestroyed] = useState(\n    [],\n  );\n  const [gridApi, setGridApi] = useState();\n  const [rowData, setRowData] = useState(getData());\n  const [columnDefs, setColumnDefs] = useState([\n    { field: \"name\", headerName: \"Athlete\" },\n    { field: \"medals.gold\", headerName: \"Gold Medals\" },\n    { field: \"person.age\", headerName: \"Age\" },\n  ]);\n\n  const onGridReady = useCallback((params) => {\n    setGridApi(params.api);\n  }, []);\n\n  const onGridPreDestroyed = useCallback(\n    (params) => {\n      if (!gridApi) {\n        return;\n      }\n\n      const allColumns = gridApi.getColumns();\n      if (!allColumns) {\n        return;\n      }\n\n      const currentColumnWidths = allColumns.map((column) => ({\n        field: column.getColDef().field || \"-\",\n        width: column.getActualWidth(),\n      }));\n\n      setColumnsWidthOnPreDestroyed(currentColumnWidths);\n      setGridApi(undefined);\n    },\n    [gridApi],\n  );\n\n  const updateColumnWidth = useCallback(() => {\n    if (!gridApi) {\n      return;\n    }\n\n    const columns = gridApi.getColumns();\n    if (!columns) {\n      return;\n    }\n\n    const newWidths = columns.map((column) => {\n      return {\n        key: column.getColId(),\n        newWidth: Math.round((150 + Math.random() * 100) * 100) / 100,\n      };\n    });\n    gridApi.setColumnWidths(newWidths);\n  }, [gridApi]);\n\n  const destroyGrid = useCallback(() => {\n    setGridVisible(false);\n  }, []);\n\n  const reloadGrid = useCallback(() => {\n    const updatedColumnDefs = columnDefs.map((val) => {\n      const colDef = val;\n      const result = {\n        ...colDef,\n      };\n\n      if (colDef.field) {\n        const width = columnsWidthOnPreDestroyed.find(\n          (columnWidth) => columnWidth.field === colDef.field,\n        );\n        result.width = width ? width.width : colDef.width;\n      }\n\n      return result;\n    });\n\n    setColumnsWidthOnPreDestroyed([]);\n    setColumnDefs(updatedColumnDefs);\n    setGridVisible(true);\n  }, [columnsWidthOnPreDestroyed, columnDefs]);\n\n  return (\n    <div style={containerStyle}>\n      <div className=\"test-container\">\n        <div className=\"test-header\">\n          {gridVisible && (\n            <div id=\"exampleButtons\" style={{ marginBottom: \"1rem\" }}>\n              <button onClick={() => updateColumnWidth()}>\n                Change Columns Width\n              </button>\n              <button onClick={() => destroyGrid()}>Destroy Grid</button>\n            </div>\n          )}\n          {Array.isArray(columnsWidthOnPreDestroyed) &&\n            columnsWidthOnPreDestroyed.length > 0 && (\n              <div id=\"gridPreDestroyedState\">\n                State captured on grid pre-destroyed event:\n                <br />\n                <strong>Column fields and widths</strong>\n                <div className=\"values\">\n                  <ul>\n                    {columnsWidthOnPreDestroyed.map((columnWidth, index) => (\n                      <li key={index}>\n                        {columnWidth.field} : {columnWidth.width}px\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n                <button onClick={() => reloadGrid()}>Reload Grid</button>\n              </div>\n            )}\n        </div>\n        <div style={{ height: \"100%\", boxSizing: \"border-box\" }}>\n          <div\n            style={{\n              height: \"100%\",\n              width: \"100%\",\n            }}\n          >\n            {gridVisible && (\n              <AgGridReact\n                columnDefs={columnDefs}\n                rowData={rowData}\n                onGridReady={onGridReady}\n                onGridPreDestroyed={onGridPreDestroyed}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst root = createRoot(document.getElementById(\"root\"));\nroot.render(\n  <StrictMode>\n    <GridExample />\n  </StrictMode>,\n);\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            jsx: 'react',\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            // react\n            react: 'npm:react@18.2.0',\n            'react-dom': 'npm:react-dom@18.2.0',\n            'react-dom/client': 'npm:react-dom@18.2.0',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            css: {},\n            react: {\n                main: './umd/react.production.min.js',\n            },\n            'react-dom': {\n                main: './umd/react-dom.production.min.js',\n            },\n            'react-dom/server': {\n                main: '../umd/react-dom-server.browser.production.min.js',\n            },\n            app: {\n                main: './index.jsx',\n                defaultExtension: 'jsx',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"react":"18","react-dom":"18","@types/react":"18","@types/react-dom":"18","ag-grid-react":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}