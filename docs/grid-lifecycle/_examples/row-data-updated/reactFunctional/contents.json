{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"index.jsx","mainFileName":"index.jsx","scriptFiles":[],"styleFiles":[],"files":{"styles.css":".test-grid {\n    flex-grow: 1;\n}\n\n.test-container {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\n.test-header {\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\n    font-size: 13px;\n}\n\n.test-header button[disabled] {\n    opacity: 0.7;\n}\n\n.test-header > div {\n    margin-bottom: 1rem;\n}\n","data.jsx":"export function fetchDataAsync() {\n    // Simulate a slow network request\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            resolve([\n                {\n                    name: \"Michael Phelps\",\n                    person: { age: 23, country: \"United States\" },\n                    medals: getRandomMedals(),\n                },\n                {\n                    name: \"Michael Phelps\",\n                    person: { age: 19, country: \"United States\" },\n                    medals: getRandomMedals(),\n                },\n                {\n                    name: \"Michael Phelps\",\n                    person: { age: 27, country: \"United States\" },\n                    medals: getRandomMedals(),\n                },\n                {\n                    name: \"Natalie Coughlin\",\n                    person: { age: 25, country: \"United States\" },\n                    medals: getRandomMedals(),\n                },\n                {\n                    name: \"Aleksey Nemov\",\n                    person: { age: 24, country: \"Russia\" },\n                    medals: getRandomMedals(),\n                },\n                {\n                    name: \"Alicia Coutts\",\n                    person: { age: 24, country: \"Australia\" },\n                    medals: getRandomMedals(),\n                },\n                {\n                    name: \"Missy Franklin\",\n                    person: { age: 17, country: \"United States\" },\n                    medals: getRandomMedals(),\n                },\n                {\n                    name: \"Ryan Lochte\",\n                    person: { age: 27, country: \"United States\" },\n                    medals: getRandomMedals(),\n                },\n                {\n                    name: \"Allison Schmitt\",\n                    person: { age: 22, country: \"United States\" },\n                    medals: getRandomMedals(),\n                },\n                {\n                    name: \"Natalie Coughlin\",\n                    person: { age: 21, country: \"United States\" },\n                    medals: getRandomMedals(),\n                },\n                {\n                    name: \"Ian Thorpe\",\n                    person: { age: 17, country: \"Australia\" },\n                    medals: getRandomMedals(),\n                },\n                {\n                    name: \"Dara Torres\",\n                    person: { age: 33, country: \"United States\" },\n                    medals: getRandomMedals(),\n                },\n                {\n                    name: \"Cindy Klassen\",\n                    person: { age: 26, country: \"Canada\" },\n                    medals: getRandomMedals(),\n                },\n                {\n                    name: \"Nastia Liukin\",\n                    person: { age: 18, country: \"United States\" },\n                    medals: getRandomMedals(),\n                },\n                {\n                    name: \"Marit BjÃ¸rgen\",\n                    person: { age: 29, country: \"Norway\" },\n                    medals: getRandomMedals(),\n                },\n                {\n                    name: \"Sun Yang\",\n                    person: { age: 20, country: \"China\" },\n                    medals: getRandomMedals(),\n                },\n            ]);\n        }, 600);\n    });\n}\nfunction getRandomMedals() {\n    return {\n        gold: Math.floor(Math.random() * 10),\n        silver: Math.floor(Math.random() * 10),\n        bronze: Math.floor(Math.random() * 10),\n    };\n}\n","index.jsx":"'use client';\nimport React, { StrictMode, useCallback, useEffect, useState, } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { ClientSideRowModelModule, ModuleRegistry, ValidationModule, } from \"ag-grid-community\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport { fetchDataAsync } from \"./data\";\nimport \"./styles.css\";\nModuleRegistry.registerModules([\n    ClientSideRowModelModule,\n    ValidationModule /* Development Only */,\n]);\nconst updateRowCount = (id) => {\n    const element = document.querySelector(`#${id} > .value`);\n    element.textContent = `${new Date().toLocaleTimeString()}`;\n};\nconst columnDefs = [\n    { field: \"name\", headerName: \"Athlete\" },\n    { field: \"person.age\", headerName: \"Age\" },\n    { field: \"medals.gold\", headerName: \"Gold Medals\" },\n];\nconst GridExample = () => {\n    const [loading, setLoading] = useState(true);\n    const [rowData, setRowData] = useState();\n    const onFirstDataRendered = useCallback((event) => {\n        updateRowCount(\"firstDataRendered\");\n        console.log(\"First Data Rendered\");\n    }, []);\n    const onRowDataUpdated = useCallback((event) => {\n        updateRowCount(\"rowDataUpdated\");\n        console.log(\"Row Data Updated\");\n    }, []);\n    const reloadData = useCallback(() => {\n        console.log(\"Loading Data ...\");\n        setLoading(true);\n        fetchDataAsync()\n            .then((data) => {\n            console.info(\"Data Loaded\");\n            setRowData(data);\n        })\n            .catch((error) => {\n            console.error(\"Failed to load data\", error);\n        })\n            .finally(() => {\n            setLoading(false);\n        });\n    }, []);\n    useEffect(reloadData, []);\n    return (<div className=\"test-container\">\n      <div className=\"test-header\">\n        <div id=\"firstDataRendered\">\n          First Data Rendered: <span className=\"value\">-</span>\n        </div>\n        <div id=\"rowDataUpdated\">\n          Row Data Updated: <span className=\"value\">-</span>\n        </div>\n        <div>\n          <button disabled={loading} onClick={reloadData}>\n            Reload Data\n          </button>\n        </div>\n      </div>\n\n      <div style={{ height: \"100%\" }}>\n        <AgGridReact loading={loading} rowData={rowData} columnDefs={columnDefs} onFirstDataRendered={onFirstDataRendered} onRowDataUpdated={onRowDataUpdated}/>\n      </div>\n    </div>);\n};\nconst root = createRoot(document.getElementById(\"root\"));\nroot.render(<StrictMode>\n    <GridExample />\n  </StrictMode>);\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            jsx: 'react',\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            // react\n            react: 'npm:react@18.2.0',\n            'react-dom': 'npm:react-dom@18.2.0',\n            'react-dom/client': 'npm:react-dom@18.2.0',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            css: {},\n            react: {\n                main: './umd/react.production.min.js',\n            },\n            'react-dom': {\n                main: './umd/react-dom.production.min.js',\n            },\n            'react-dom/server': {\n                main: '../umd/react-dom-server.browser.production.min.js',\n            },\n            app: {\n                main: './index.jsx',\n                defaultExtension: 'jsx',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"react":"18","react-dom":"18","@types/react":"18","@types/react-dom":"18","ag-grid-react":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}