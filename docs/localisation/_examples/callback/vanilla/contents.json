{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":true,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":[],"files":{"main.js":"class NodeIdRenderer {\n  eGui;\n\n  init(params) {\n    this.eGui = document.createElement(\"div\");\n    this.eGui.textContent = params.node.id + 1;\n  }\n\n  getGui() {\n    return this.eGui;\n  }\n  refresh() {\n    return false;\n  }\n}\n\nconst columnDefs = [\n  // this row just shows the row index, doesn't use any data from the row\n  {\n    headerName: \"#\",\n    cellRenderer: NodeIdRenderer,\n  },\n  { field: \"athlete\", filterParams: { buttons: [\"clear\", \"reset\", \"apply\"] } },\n  {\n    field: \"age\",\n    filterParams: { buttons: [\"apply\", \"cancel\"] },\n    enablePivot: true,\n  },\n  { field: \"country\", enableRowGroup: true },\n  { field: \"year\", filter: \"agNumberColumnFilter\" },\n  { field: \"date\" },\n  {\n    field: \"sport\",\n    filter: \"agMultiColumnFilter\",\n    filterParams: {\n      filters: [\n        {\n          filter: \"agTextColumnFilter\",\n          display: \"accordion\",\n        },\n        {\n          filter: \"agSetColumnFilter\",\n          display: \"accordion\",\n        },\n      ],\n    },\n  },\n  { field: \"gold\", enableValue: true },\n  { field: \"silver\", enableValue: true },\n  { field: \"bronze\", enableValue: true },\n  { field: \"total\", enableValue: true },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n  columnDefs: columnDefs,\n  defaultColDef: {\n    editable: true,\n    flex: 1,\n    minWidth: 100,\n    filter: true,\n  },\n  sideBar: true,\n  statusBar: {\n    statusPanels: [\n      { statusPanel: \"agTotalAndFilteredRowCountComponent\", align: \"left\" },\n      { statusPanel: \"agAggregationComponent\" },\n    ],\n  },\n  rowGroupPanelShow: \"always\",\n  pagination: true,\n  paginationPageSize: 500,\n  paginationPageSizeSelector: [100, 500, 1000],\n  cellSelection: true,\n  enableCharts: true,\n  getLocaleText: (params) => {\n    switch (params.key) {\n      case \"thousandSeparator\":\n        return \".\";\n      case \"decimalSeparator\":\n        return \",\";\n      default:\n        if (params.defaultValue) {\n          // the &lrm; marker should not be made uppercase\n          const val = params.defaultValue.split(\"&lrm;\");\n          const newVal = val[0].toUpperCase();\n\n          if (val.length > 1) {\n            return `${newVal}&lrm;`;\n          }\n\n          return newVal;\n        }\n\n        return \"\";\n    }\n  },\n};\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then((data) => gridApi.setGridOption(\"rowData\", data));\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0","ag-charts-community":"latest","ag-charts-enterprise":"latest"}}}