{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"main.ts","styleFiles":[],"files":{"main.ts":"import {\n  ClientSideRowModelModule,\n  ColDef,\n  ColGroupDef,\n  CsvExportModule,\n  GridApi,\n  GridOptions,\n  ModuleRegistry,\n  NumberEditorModule,\n  TextEditorModule,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\nimport { ColumnMenuModule, ContextMenuModule } from \"ag-grid-enterprise\";\n\nModuleRegistry.registerModules([\n  ClientSideRowModelModule,\n  CsvExportModule,\n  ColumnMenuModule,\n  ContextMenuModule,\n  NumberEditorModule,\n  TextEditorModule,\n  ValidationModule /* Development Only */,\n]);\n\nlet gridApi: GridApi;\n\nconst gridOptions: GridOptions = {\n  defaultColDef: {\n    editable: true,\n    minWidth: 100,\n    flex: 1,\n  },\n\n  suppressExcelExport: true,\n  popupParent: document.body,\n\n  columnDefs: [{ field: \"make\" }, { field: \"model\" }, { field: \"price\" }],\n\n  rowData: [\n    { make: \"Toyota\", model: \"Celica\", price: 35000 },\n    { make: \"Ford\", model: \"Mondeo\", price: 32000 },\n    { make: \"Porsche\", model: \"Boxster\", price: 72000 },\n  ],\n};\n\nfunction getValue(inputSelector: string) {\n  const text = (document.querySelector(inputSelector) as HTMLInputElement)\n    .value;\n  switch (text) {\n    case \"string\":\n      return (\n        'Here is a comma, and a some \"quotes\". You can see them using the\\n' +\n        \"api.getDataAsCsv() button but they will not be visible when the downloaded\\n\" +\n        \"CSV file is opened in Excel because string content passed to\\n\" +\n        \"prependContent and appendContent is not escaped.\"\n      );\n    case \"array\":\n      return [\n        [],\n        [\n          {\n            data: {\n              value: 'Here is a comma, and a some \"quotes\".',\n              type: \"String\",\n            },\n          },\n        ],\n        [\n          {\n            data: {\n              value:\n                \"They are visible when the downloaded CSV file is opened in Excel because custom content is properly escaped (provided that suppressQuotes is not set to true)\",\n              type: \"String\",\n            },\n          },\n        ],\n        [\n          { data: { value: \"this cell:\", type: \"String\" }, mergeAcross: 1 },\n          {\n            data: {\n              value: \"is empty because the first cell has mergeAcross=1\",\n              type: \"String\",\n            },\n          },\n        ],\n        [],\n      ];\n    case \"none\":\n      return;\n    default:\n      return text;\n  }\n}\n\nfunction getParams() {\n  return {\n    prependContent: getValue(\"#prependContent\"),\n    appendContent: getValue(\"#appendContent\"),\n    suppressQuotes: undefined,\n    columnSeparator: undefined,\n  };\n}\n\nfunction onBtnExport() {\n  const params = getParams();\n  if (params.suppressQuotes || params.columnSeparator) {\n    alert(\n      \"NOTE: you are downloading a file with non-standard quotes or separators - it may not render correctly in Excel.\",\n    );\n  }\n  gridApi!.exportDataAsCsv(params);\n}\n\nfunction onBtnUpdate() {\n  (document.querySelector(\"#csvResult\") as any).value =\n    gridApi!.getDataAsCsv(getParams());\n}\n\n// setup the grid after the page has finished loading\nconst gridDiv = document.querySelector<HTMLElement>(\"#myGrid\")!;\ngridApi = createGrid(gridDiv, gridOptions);\n\nif (typeof window !== \"undefined\") {\n  // Attach external event handlers to window so they can be called from index.html\n  (<any>window).onBtnExport = onBtnExport;\n  (<any>window).onBtnUpdate = onBtnUpdate;\n}\n","index.html":"<style>\n    label,\n    .row {\n        box-sizing: border-box;\n        display: block;\n        padding: 2px;\n    }\n\n    .row label {\n        display: inline;\n        padding: 0;\n    }\n\n    button {\n        display: inline-block;\n        font-weight: bold;\n    }\n</style>\n\n<div style=\"display: flex; flex-direction: column; height: 100%\">\n    <div style=\"display: flex\">\n        <div style=\"margin-left: 10px\">\n            <div class=\"row\">\n                <label>prependContent = </label>\n                <select id=\"prependContent\">\n                    <option>none</option>\n                    <option value=\"array\">CSVCell[][] (recommended format)</option>\n                    <option value=\"string\">string (legacy format)</option>\n                </select>\n            </div>\n            <div class=\"row\">\n                <label>appendContent = </label>\n                <select id=\"appendContent\">\n                    <option>none</option>\n                    <option value=\"array\">CSVCell[][] (recommended format)</option>\n                    <option value=\"string\">string (legacy format)</option>\n                </select>\n            </div>\n        </div>\n    </div>\n\n    <div style=\"margin: 10px 0\">\n        <button onclick=\"onBtnUpdate()\">Show CSV export content text</button>\n        <button onclick=\"onBtnExport()\">Download CSV export file</button>\n    </div>\n\n    <div style=\"flex: 1 1 0; position: relative; display: flex; flex-direction: row; gap: 20px\">\n        <div id=\"gridContainer\" style=\"flex: 1\">\n            <div id=\"myGrid\" style=\"width: 100%; height: 100%; display: block\"></div>\n        </div>\n        <textarea\n            id=\"csvResult\"\n            style=\"flex: 1\"\n            placeholder=\"Click the Show CSV export content button to view exported CSV here\"\n        ></textarea>\n    </div>\n</div>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {},\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        // map tells the System loader where to look for things\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            // appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap,\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {},\n            app: {\n                main: './main.ts',\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}