{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["cellRenderer.js","main.js"],"styleFiles":[],"files":{"cellRenderer.js":"\nclass CellRenderer  {\n    eGui;\n    eButton;\n    params;\n    buttonClickListener;\n\n    createGui() {\n        const template =\n            '<button id=\"theButton\" style=\"height: 30px\">âœŽ</button><span id=\"theValue\" style=\"padding-left: 4px;\"></span>';\n        const span = document.createElement('span');\n        span.innerHTML = template;\n        this.eGui = span;\n    }\n\n    init(params) {\n        // create the gui\n        this.createGui();\n        // keep params, we use it in onButtonClicked\n        this.params = params;\n\n        // attach the value to the value span\n        const eValue = this.eGui.querySelector('#theValue');\n\n        eValue.textContent = params.value;\n        // setup the button, first get reference to it\n        this.eButton = this.eGui.querySelector('#theButton');\n\n        this.buttonClickListener = () => this.onButtonClicked();\n        this.eButton.addEventListener('click', this.buttonClickListener);\n    }\n    onButtonClicked() {\n        // start editing this cell. see the docs on the params that this method takes\n        const startEditingParams = {\n            rowIndex: this.params.node.rowIndex,\n            colKey: this.params.column.getId(),\n        };\n        this.params.api.startEditingCell(startEditingParams);\n    }\n    getGui() {\n        // returns our gui to the grid for this cell\n        return this.eGui;\n    }\n    refresh() {\n        return false;\n    }\n    destroy() {\n        // be good, clean up the listener\n        this.eButton.removeEventListener('click', this.buttonClickListener);\n    }\n}\n","main.js":"let gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    { field: \"athlete\", minWidth: 180 },\n    { field: \"age\" },\n    { field: \"country\", minWidth: 160 },\n    { field: \"year\" },\n    { field: \"date\", minWidth: 160 },\n    { field: \"sport\", minWidth: 180 },\n    { field: \"gold\" },\n    { field: \"silver\" },\n    { field: \"bronze\" },\n    { field: \"total\" },\n  ],\n  defaultColDef: {\n    flex: 1,\n    minWidth: 100,\n    editable: true,\n    // we use a cell renderer to include a button, so when the button\n    // gets clicked, the editing starts.\n    cellRenderer: CellRenderer,\n  },\n  // set the bottom grid to no click editing\n  suppressClickEdit: true,\n};\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then((data) => gridApi.setGridOption(\"rowData\", data));\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}