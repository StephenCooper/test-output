{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":["style.css"],"files":{"style.css":".example-wrapper {\n    display: flex;\n    height: 100%;\n}\n\n.inner-col {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    flex: 1 1 auto;\n    min-width: 0;\n}\n\n.inner-col.vertical-toolbar {\n    display: flex;\n    flex: none;\n    width: 100px;\n    align-items: center;\n    justify-content: center;\n}\n\n.toolbar {\n    white-space: nowrap;\n}\n\n.vertical-toolbar > span {\n    padding: 10px;\n    margin: 10px;\n    cursor: default;\n    user-select: none;\n    -ms-user-select: none;\n    -moz-user-select: none;\n    -webkit-user-modify: none;\n}\n\nbutton.factory {\n    height: 25px;\n    border-radius: 5px;\n    border: none;\n    color: white;\n    outline: none;\n    cursor: pointer;\n}\n\nbutton i {\n    margin-right: 10px;\n}\n\n.bin i {\n    transform: scale(1);\n    transition: transform 500ms;\n}\n\n.factory-red {\n    background-color: #cc333344;\n}\n.factory-green {\n    background-color: #33cc3344;\n}\n.factory-blue {\n    background-color: #2244cc44;\n}\n\n.red-row {\n    background-color: #cc333344;\n}\n.green-row {\n    background-color: #33cc3344;\n}\n.blue-row {\n    background-color: #2244cc44;\n}\n","main.js":"let rowIdSequence = 100;\n\nconst leftColumnDefs = [\n  { field: \"id\", rowDrag: true },\n  { field: \"color\" },\n  { field: \"value1\" },\n  { field: \"value2\" },\n];\n\nconst rightColumnDefs = [\n  { field: \"id\", rowDrag: true },\n  { field: \"color\" },\n  { field: \"value1\" },\n  { field: \"value2\" },\n];\nlet leftApi;\nconst leftGridOptions = {\n  defaultColDef: {\n    flex: 1,\n    minWidth: 100,\n    filter: true,\n  },\n  rowClassRules: {\n    \"red-row\": 'data.color == \"Red\"',\n    \"green-row\": 'data.color == \"Green\"',\n    \"blue-row\": 'data.color == \"Blue\"',\n  },\n  getRowId: (params) => {\n    return String(params.data.id);\n  },\n  rowData: createLeftRowData(),\n  rowDragManaged: true,\n  suppressMoveWhenRowDragging: true,\n  columnDefs: leftColumnDefs,\n  onGridReady: (params) => {\n    addBinZone(params);\n    addGridDropZone(params, \"Right\");\n  },\n};\nlet rightApi;\nconst rightGridOptions = {\n  defaultColDef: {\n    flex: 1,\n    minWidth: 100,\n    filter: true,\n  },\n  rowClassRules: {\n    \"red-row\": 'data.color == \"Red\"',\n    \"green-row\": 'data.color == \"Green\"',\n    \"blue-row\": 'data.color == \"Blue\"',\n  },\n  getRowId: (params) => {\n    return String(params.data.id);\n  },\n  rowData: [],\n  rowDragManaged: true,\n  suppressMoveWhenRowDragging: true,\n  columnDefs: rightColumnDefs,\n  onGridReady: (params) => {\n    addBinZone(params);\n    addGridDropZone(params, \"Left\");\n  },\n};\n\nfunction createLeftRowData() {\n  return [\"Red\", \"Green\", \"Blue\"].map(function (color) {\n    return createDataItem(color);\n  });\n}\n\nfunction createDataItem(color) {\n  return {\n    id: rowIdSequence++,\n    color: color,\n    value1: Math.floor(Math.random() * 100),\n    value2: Math.floor(Math.random() * 100),\n  };\n}\n\nfunction addRecordToGrid(side, data) {\n  // if data missing or data has no it, do nothing\n  if (!data || data.id == null) {\n    return;\n  }\n\n  let gridApi = side === \"left\" ? leftApi : rightApi,\n    // do nothing if row is already in the grid, otherwise we would have duplicates\n    rowAlreadyInGrid = !!gridApi.getRowNode(data.id),\n    transaction;\n\n  if (rowAlreadyInGrid) {\n    console.log(\"not adding row to avoid duplicates in the grid\");\n    return;\n  }\n\n  transaction = {\n    add: [data],\n  };\n\n  gridApi.applyTransaction(transaction);\n}\n\nfunction onFactoryButtonClick(e) {\n  const button = e.currentTarget,\n    buttonColor = button.getAttribute(\"data-color\"),\n    side = button.getAttribute(\"data-side\"),\n    data = createDataItem(buttonColor);\n\n  addRecordToGrid(side, data);\n}\n\nfunction binDrop(data) {\n  // if data missing or data has no id, do nothing\n  if (!data || data.id == null) {\n    return;\n  }\n\n  const transaction = {\n    remove: [data],\n  };\n\n  [leftApi, rightApi].forEach((api) => {\n    const rowsInGrid = !!api.getRowNode(data.id);\n\n    if (rowsInGrid) {\n      api.applyTransaction(transaction);\n    }\n  });\n}\n\nfunction addBinZone(params) {\n  const eBin = document.querySelector(\".bin\"),\n    icon = eBin.querySelector(\"i\"),\n    dropZone = {\n      getContainer: () => {\n        return eBin;\n      },\n      onDragEnter: () => {\n        eBin.style.color = \"blue\";\n        icon.style.transform = \"scale(1.5)\";\n      },\n      onDragLeave: () => {\n        eBin.style.removeProperty(\"color\");\n        icon.style.transform = \"scale(1)\";\n      },\n      onDragStop: (dragStopParams) => {\n        binDrop(dragStopParams.node.data);\n        eBin.style.removeProperty(\"color\");\n        icon.style.transform = \"scale(1)\";\n      },\n    };\n\n  params.api.addRowDropZone(dropZone);\n}\n\nfunction addGridDropZone(params, side) {\n  const grid = document.querySelector(\"#e\" + side + \"Grid\"),\n    dropZone = {\n      getContainer: () => {\n        return grid;\n      },\n      onDragStop: (params) => {\n        addRecordToGrid(side.toLowerCase(), params.node.data);\n      },\n    };\n\n  params.api.addRowDropZone(dropZone);\n}\n\nfunction loadGrid(side) {\n  const grid = document.querySelector(\"#e\" + side + \"Grid\");\n  if (side === \"Left\") {\n    leftApi = agGrid.createGrid(grid, leftGridOptions);\n  } else {\n    rightApi = agGrid.createGrid(grid, rightGridOptions);\n  }\n}\n\nconst buttons = document.querySelectorAll(\"button.factory\");\n\nfor (let i = 0; i < buttons.length; i++) {\n  buttons[i].addEventListener(\"click\", onFactoryButtonClick);\n}\n\nloadGrid(\"Left\");\nloadGrid(\"Right\");\n","index.html":"<div class=\"example-wrapper\">\n    <div class=\"inner-col\">\n        <div class=\"toolbar\">\n            <button class=\"factory factory-red\" data-color=\"Red\" data-side=\"left\">\n                <i class=\"far fa-plus-square\"></i>Add Red\n            </button>\n            <button class=\"factory factory-green\" data-color=\"Green\" data-side=\"left\">\n                <i class=\"far fa-plus-square\"></i>Add Green\n            </button>\n            <button class=\"factory factory-blue\" data-color=\"Blue\" data-side=\"left\">\n                <i class=\"far fa-plus-square\"></i>Add Blue\n            </button>\n        </div>\n        <div id=\"eLeftGrid\" style=\"height: 100%\" class=\"inner-col\"></div>\n    </div>\n\n    <div class=\"inner-col vertical-toolbar\">\n        <span class=\"bin\">\n            <i class=\"far fa-trash-alt fa-3x\"></i>\n        </span>\n    </div>\n    <div class=\"inner-col\">\n        <div class=\"toolbar\">\n            <button class=\"factory factory-red\" data-color=\"Red\" data-side=\"right\">\n                <i class=\"far fa-plus-square\"></i>Add Red\n            </button>\n            <button class=\"factory factory-green\" data-color=\"Green\" data-side=\"right\">\n                <i class=\"far fa-plus-square\"></i>Add Green\n            </button>\n            <button class=\"factory factory-blue\" data-color=\"Blue\" data-side=\"right\">\n                <i class=\"far fa-plus-square\"></i>Add Blue\n            </button>\n        </div>\n        <div id=\"eRightGrid\" style=\"height: 100%\" class=\"inner-col\"></div>\n    </div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}},"extras":["fontawesome"]}