{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["data.js","main.js"],"styleFiles":[],"files":{"data.js":"const files = [\n    { employeeId: '1', name: 'Alice Johnson', path: ['1'] },\n    { employeeId: '2', name: 'Bob Stevens', path: ['1', '2'] },\n    { employeeId: '3', name: 'Bob Stevens', path: ['1', '3'] },\n    { employeeId: '4', name: 'Jessica Adams', path: ['1', '4'] },\n];\n\nfunction getData() {\n    return files;\n}\n","main.js":"let gridApi;\n\nconst gridOptions = {\n  columnDefs: [{ field: \"employeeId\" }],\n  defaultColDef: {\n    flex: 1,\n  },\n  autoGroupColumnDef: {\n    headerName: \"Organisation Chart\",\n    field: \"name\",\n\n    cellRendererParams: {\n      suppressCount: true,\n    },\n  },\n  rowData: getData(),\n  treeData: true,\n  groupDefaultExpanded: 1,\n  getDataPath: (data) => data.path,\n};\n\n// wait for the document to be loaded, otherwise\n// AG Grid will not find the div in the document.\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  // lookup the container we want the Grid to use\n  const gridDiv = document.querySelector(\"#myGrid\");\n\n  // create the grid passing in the div to use together with the columns & data we want to use\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}