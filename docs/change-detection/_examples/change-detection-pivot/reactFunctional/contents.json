{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"index.jsx","mainFileName":"index.jsx","styleFiles":[],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n\n.example-header {\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\n    font-size: 13px;\n    margin-bottom: 5px;\n}\n","index.jsx":"\"use client\";\n\nimport React, {\n  useCallback,\n  useMemo,\n  useRef,\n  useState,\n  StrictMode,\n} from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"./styles.css\";\nimport {\n  ClientSideRowModelApiModule,\n  ClientSideRowModelModule,\n  ColumnApiModule,\n  HighlightChangesModule,\n  ModuleRegistry,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\nimport { PivotModule } from \"ag-grid-enterprise\";\nModuleRegistry.registerModules([\n  ColumnApiModule,\n  ClientSideRowModelApiModule,\n  ClientSideRowModelModule,\n  PivotModule,\n  HighlightChangesModule,\n  ValidationModule /* Development Only */,\n]);\n\nconst ageRangeValueGetter = (params) => {\n  const age = params.getValue(\"age\");\n  if (age === undefined) {\n    return null;\n  }\n  if (age < 20) {\n    return \"< 20\";\n  } else if (age > 30) {\n    return \"> 30\";\n  } else {\n    return \"20 to 30\";\n  }\n};\n\n// pretty basic, but deterministic (so same numbers each time we run), random number generator\nvar seed;\n\nconst random = () => {\n  seed = ((seed || 1) * 16807) % 2147483647;\n  return seed;\n};\n\nconst getRowData = () => {\n  const rowData = [];\n  for (let i = 1; i <= 100; i++) {\n    const row = createRow();\n    rowData.push(row);\n  }\n  return rowData;\n};\n\nvar studentId;\n\nconst createRow = () => {\n  studentId = studentId ? studentId : 10023;\n  const randomNumber = random();\n  return {\n    student: studentId++,\n    points: (randomNumber % 60) + 40,\n    course: [\"Science\", \"History\"][randomNumber % 3 === 0 ? 0 : 1],\n    yearGroup: \"Year \" + ((randomNumber % 4) + 1),\n    age: (randomNumber % 25) + 15, // 15 to 40\n  };\n};\n\nconst createNewRandomScore = (data) => {\n  let randomValue = createRandomNumber();\n  // make sure random number is not actually the same number again\n  while (randomValue === data.points) {\n    randomValue = createRandomNumber();\n  }\n  return randomValue;\n};\n\nconst createRandomNumber = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst pickExistingRowNodeAtRandom = (api) => {\n  const allItems = [];\n  api.forEachLeafNode(function (rowNode) {\n    allItems.push(rowNode);\n  });\n  if (allItems.length === 0) {\n    return;\n  }\n  const result = allItems[Math.floor(Math.random() * allItems.length)];\n  return result;\n};\n\nconst pickExistingRowItemAtRandom = (api) => {\n  const rowNode = pickExistingRowNodeAtRandom(api);\n  return rowNode ? rowNode.data : null;\n};\n\nconst GridExample = () => {\n  const gridRef = useRef();\n  const containerStyle = useMemo(() => ({ width: \"100%\", height: \"100%\" }), []);\n  const gridStyle = useMemo(() => ({ height: \"100%\", width: \"100%\" }), []);\n  const [rowData, setRowData] = useState(getRowData());\n  const [columnDefs, setColumnDefs] = useState([\n    { headerName: \"Student ID\", field: \"student\" },\n    { headerName: \"Year Group\", field: \"yearGroup\", rowGroup: true },\n    { headerName: \"Age\", field: \"age\" },\n    { headerName: \"Course\", field: \"course\", pivot: true },\n    {\n      headerName: \"Age Range\",\n      valueGetter: ageRangeValueGetter,\n      pivot: true,\n    },\n    { headerName: \"Points\", field: \"points\", aggFunc: \"sum\" },\n  ]);\n  const defaultColDef = useMemo(() => {\n    return {\n      flex: 1,\n      minWidth: 150,\n      cellRenderer: \"agAnimateShowChangeCellRenderer\",\n    };\n  }, []);\n  const getRowId = useCallback((params) => String(params.data.student), []);\n\n  const onGridReady = useCallback((params) => {\n    document.getElementById(\"pivot-mode\").checked = true;\n  }, []);\n\n  const pivotMode = useCallback(() => {\n    const pivotModeOn = document.getElementById(\"pivot-mode\").checked;\n    gridRef.current.api.setGridOption(\"pivotMode\", pivotModeOn);\n    gridRef.current.api.applyColumnState({\n      state: [\n        { colId: \"yearGroup\", rowGroup: pivotModeOn },\n        { colId: \"course\", pivot: pivotModeOn, pivotIndex: 1 },\n        { colId: \"ageRange\", pivot: pivotModeOn, pivotIndex: 0 },\n      ],\n    });\n  }, []);\n\n  const updateOneRecord = useCallback(() => {\n    const rowNodeToUpdate = pickExistingRowNodeAtRandom(gridRef.current.api);\n    if (!rowNodeToUpdate) return;\n    const randomValue = createNewRandomScore(rowNodeToUpdate.data);\n    console.log(\n      \"updating points to \" + randomValue + \" on \",\n      rowNodeToUpdate.data,\n    );\n    rowNodeToUpdate.setDataValue(\"points\", randomValue);\n  }, []);\n\n  const updateUsingTransaction = useCallback(() => {\n    const itemToUpdate = pickExistingRowItemAtRandom(gridRef.current.api);\n    if (!itemToUpdate) {\n      return;\n    }\n    console.log(\"updating - before\", itemToUpdate);\n    itemToUpdate.points = createNewRandomScore(itemToUpdate);\n    const transaction = {\n      update: [itemToUpdate],\n    };\n    console.log(\"updating - after\", itemToUpdate);\n    gridRef.current.api.applyTransaction(transaction);\n  }, []);\n\n  const addNewGroupUsingTransaction = useCallback(() => {\n    const item1 = createRow();\n    const item2 = createRow();\n    item1.yearGroup = \"Year 5\";\n    item2.yearGroup = \"Year 5\";\n    const transaction = {\n      add: [item1, item2],\n    };\n    console.log(\"add - \", item1);\n    console.log(\"add - \", item2);\n    gridRef.current.api.applyTransaction(transaction);\n  }, []);\n\n  const addNewCourse = useCallback(() => {\n    const item1 = createRow();\n    item1.course = \"Physics\";\n    const transaction = {\n      add: [item1],\n    };\n    console.log(\"add - \", item1);\n    gridRef.current.api.applyTransaction(transaction);\n  }, []);\n\n  const removePhysics = useCallback(() => {\n    const allPhysics = [];\n    gridRef.current.api.forEachLeafNode(function (rowNode) {\n      if (rowNode.data.course === \"Physics\") {\n        allPhysics.push(rowNode.data);\n      }\n    });\n    const transaction = {\n      remove: allPhysics,\n    };\n    console.log(\"removing \" + allPhysics.length + \" physics items.\");\n    gridRef.current.api.applyTransaction(transaction);\n  }, []);\n\n  const moveCourse = useCallback(() => {\n    const item = pickExistingRowItemAtRandom(gridRef.current.api);\n    if (!item) {\n      return;\n    }\n    item.course = item.course === \"History\" ? \"Science\" : \"History\";\n    const transaction = {\n      update: [item],\n    };\n    console.log(\"moving \", item);\n    gridRef.current.api.applyTransaction(transaction);\n  }, []);\n\n  return (\n    <div style={containerStyle}>\n      <div className=\"example-wrapper\">\n        <div className=\"example-header\">\n          <div>\n            <label>\n              <input type=\"checkbox\" id=\"pivot-mode\" onClick={pivotMode} />\n              Group &amp; Pivot\n            </label>\n          </div>\n\n          <div style={{ marginTop: \"6px\" }}>\n            <button onClick={updateOneRecord}>Set One Value</button>\n            <button onClick={updateUsingTransaction}>Update Points</button>\n            <button onClick={addNewGroupUsingTransaction}>Add Year 5</button>\n            <button onClick={addNewCourse}>Add Physics Row</button>\n            <button onClick={removePhysics}>Remove All Physics</button>\n            <button onClick={moveCourse}>Move Course</button>\n          </div>\n        </div>\n\n        <div style={gridStyle}>\n          <AgGridReact\n            ref={gridRef}\n            rowData={rowData}\n            columnDefs={columnDefs}\n            defaultColDef={defaultColDef}\n            pivotMode={true}\n            groupDefaultExpanded={1}\n            getRowId={getRowId}\n            onGridReady={onGridReady}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst root = createRoot(document.getElementById(\"root\"));\nroot.render(\n  <StrictMode>\n    <GridExample />\n  </StrictMode>,\n);\nwindow.tearDownExample = () => root.unmount();\n","index.html":"<div class=\"example-wrapper\">\n    <div class=\"example-header\">\n        <div>\n            <label>\n                <input type=\"checkbox\" id=\"pivot-mode\" onclick=\"pivotMode()\" />\n                Group &amp; Pivot\n            </label>\n        </div>\n\n        <div style=\"margin-top: 6px\">\n            <button onclick=\"updateOneRecord()\">Set One Value</button>\n            <button onclick=\"updateUsingTransaction()\">Update Points</button>\n            <button onclick=\"addNewGroupUsingTransaction()\">Add Year 5</button>\n            <button onclick=\"addNewCourse()\">Add Physics Row</button>\n            <button onclick=\"removePhysics()\">Remove All Physics</button>\n            <button onclick=\"moveCourse()\">Move Course</button>\n        </div>\n    </div>\n    <div id=\"myGrid\"></div>\n</div>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            jsx: 'react',\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            // react\n            react: 'npm:react@18.2.0',\n            'react-dom': 'npm:react-dom@18.2.0',\n            'react-dom/client': 'npm:react-dom@18.2.0',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            css: {},\n            react: {\n                main: './umd/react.production.min.js',\n            },\n            'react-dom': {\n                main: './umd/react-dom.production.min.js',\n            },\n            'react-dom/server': {\n                main: '../umd/react-dom-server.browser.production.min.js',\n            },\n            app: {\n                main: './index.jsx',\n                defaultExtension: 'jsx',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"react":"18","react-dom":"18","@types/react":"18","@types/react-dom":"18","ag-grid-react":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}