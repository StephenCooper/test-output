{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n\n.example-header {\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\n    font-size: 13px;\n    margin-bottom: 5px;\n}\n","main.js":"let gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    { headerName: \"Student ID\", field: \"student\" },\n    { headerName: \"Year Group\", field: \"yearGroup\", rowGroup: true },\n    { headerName: \"Age\", field: \"age\" },\n    { headerName: \"Course\", field: \"course\", pivot: true },\n    {\n      headerName: \"Age Range\",\n      valueGetter: ageRangeValueGetter,\n      pivot: true,\n    },\n    { headerName: \"Points\", field: \"points\", aggFunc: \"sum\" },\n  ],\n  defaultColDef: {\n    flex: 1,\n    minWidth: 150,\n    cellRenderer: \"agAnimateShowChangeCellRenderer\",\n  },\n  rowData: getRowData(),\n  pivotMode: true,\n  groupDefaultExpanded: 1,\n  getRowId: (params) => String(params.data.student),\n  onGridReady: (params) => {\n    document.getElementById(\"pivot-mode\").checked = true;\n  },\n};\n\nfunction ageRangeValueGetter(params) {\n  const age = params.getValue(\"age\");\n  if (age === undefined) {\n    return null;\n  }\n  if (age < 20) {\n    return \"< 20\";\n  } else if (age > 30) {\n    return \"> 30\";\n  } else {\n    return \"20 to 30\";\n  }\n}\n\n// pretty basic, but deterministic (so same numbers each time we run), random number generator\nvar seed;\nfunction random() {\n  seed = ((seed || 1) * 16807) % 2147483647;\n  return seed;\n}\n\nfunction getRowData() {\n  const rowData = [];\n  for (let i = 1; i <= 100; i++) {\n    const row = createRow();\n    rowData.push(row);\n  }\n  return rowData;\n}\n\nvar studentId;\nfunction createRow() {\n  studentId = studentId ? studentId : 10023;\n  const randomNumber = random();\n  return {\n    student: studentId++,\n    points: (randomNumber % 60) + 40,\n    course: [\"Science\", \"History\"][randomNumber % 3 === 0 ? 0 : 1],\n    yearGroup: \"Year \" + ((randomNumber % 4) + 1), // 'Year 1' to 'Year 4'\n    age: (randomNumber % 25) + 15, // 15 to 40\n  };\n}\n\nfunction pivotMode() {\n  const pivotModeOn = document.getElementById(\"pivot-mode\").checked;\n\n  gridApi.setGridOption(\"pivotMode\", pivotModeOn);\n\n  gridApi.applyColumnState({\n    state: [\n      { colId: \"yearGroup\", rowGroup: pivotModeOn },\n      { colId: \"course\", pivot: pivotModeOn, pivotIndex: 1 },\n      { colId: \"ageRange\", pivot: pivotModeOn, pivotIndex: 0 },\n    ],\n  });\n}\n\nfunction updateOneRecord() {\n  const rowNodeToUpdate = pickExistingRowNodeAtRandom(gridApi);\n  if (!rowNodeToUpdate) return;\n\n  const randomValue = createNewRandomScore(rowNodeToUpdate.data);\n  console.log(\n    \"updating points to \" + randomValue + \" on \",\n    rowNodeToUpdate.data,\n  );\n  rowNodeToUpdate.setDataValue(\"points\", randomValue);\n}\n\nfunction createNewRandomScore(data) {\n  let randomValue = createRandomNumber();\n  // make sure random number is not actually the same number again\n  while (randomValue === data.points) {\n    randomValue = createRandomNumber();\n  }\n  return randomValue;\n}\n\nfunction createRandomNumber() {\n  return Math.floor(Math.random() * 100);\n}\n\nfunction pickExistingRowNodeAtRandom(api) {\n  const allItems = [];\n  api.forEachLeafNode(function (rowNode) {\n    allItems.push(rowNode);\n  });\n\n  if (allItems.length === 0) {\n    return;\n  }\n  const result = allItems[Math.floor(Math.random() * allItems.length)];\n\n  return result;\n}\n\nfunction pickExistingRowItemAtRandom(api) {\n  const rowNode = pickExistingRowNodeAtRandom(api);\n  return rowNode ? rowNode.data : null;\n}\n\nfunction updateUsingTransaction() {\n  const itemToUpdate = pickExistingRowItemAtRandom(gridApi);\n  if (!itemToUpdate) {\n    return;\n  }\n\n  console.log(\"updating - before\", itemToUpdate);\n  itemToUpdate.points = createNewRandomScore(itemToUpdate);\n  const transaction = {\n    update: [itemToUpdate],\n  };\n  console.log(\"updating - after\", itemToUpdate);\n  gridApi.applyTransaction(transaction);\n}\n\nfunction addNewGroupUsingTransaction() {\n  const item1 = createRow();\n  const item2 = createRow();\n  item1.yearGroup = \"Year 5\";\n  item2.yearGroup = \"Year 5\";\n  const transaction = {\n    add: [item1, item2],\n  };\n  console.log(\"add - \", item1);\n  console.log(\"add - \", item2);\n  gridApi.applyTransaction(transaction);\n}\n\nfunction addNewCourse() {\n  const item1 = createRow();\n  item1.course = \"Physics\";\n  const transaction = {\n    add: [item1],\n  };\n  console.log(\"add - \", item1);\n  gridApi.applyTransaction(transaction);\n}\n\nfunction removePhysics() {\n  const allPhysics = [];\n  gridApi.forEachLeafNode(function (rowNode) {\n    if (rowNode.data.course === \"Physics\") {\n      allPhysics.push(rowNode.data);\n    }\n  });\n  const transaction = {\n    remove: allPhysics,\n  };\n  console.log(\"removing \" + allPhysics.length + \" physics items.\");\n  gridApi.applyTransaction(transaction);\n}\n\nfunction moveCourse() {\n  const item = pickExistingRowItemAtRandom(gridApi);\n  if (!item) {\n    return;\n  }\n  item.course = item.course === \"History\" ? \"Science\" : \"History\";\n  const transaction = {\n    update: [item],\n  };\n  console.log(\"moving \", item);\n  gridApi.applyTransaction(transaction);\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n});\n","index.html":"<div class=\"example-wrapper\">\n    <div class=\"example-header\">\n        <div>\n            <label>\n                <input type=\"checkbox\" id=\"pivot-mode\" onclick=\"pivotMode()\" />\n                Group &amp; Pivot\n            </label>\n        </div>\n\n        <div style=\"margin-top: 6px\">\n            <button onclick=\"updateOneRecord()\">Set One Value</button>\n            <button onclick=\"updateUsingTransaction()\">Update Points</button>\n            <button onclick=\"addNewGroupUsingTransaction()\">Add Year 5</button>\n            <button onclick=\"addNewCourse()\">Add Physics Row</button>\n            <button onclick=\"removePhysics()\">Remove All Physics</button>\n            <button onclick=\"moveCourse()\">Move Course</button>\n        </div>\n    </div>\n    <div id=\"myGrid\"></div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}