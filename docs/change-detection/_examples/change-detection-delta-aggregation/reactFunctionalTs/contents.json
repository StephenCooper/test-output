{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"index.tsx","mainFileName":"index.tsx","styleFiles":[],"files":{"style.css":".ag-row-level-0 {\n    font-weight: bold;\n}\n\n.number-cell {\n    text-align: right;\n}\n\n.parent-container {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\n.top-container button {\n    margin-bottom: 4px;\n    margin-right: 4px;\n}\n\n.center-container {\n    min-height: 10px;\n    flex: 1 1 auto;\n}\n","index.tsx":"\"use client\";\n\nimport React, {\n  useCallback,\n  useMemo,\n  useRef,\n  useState,\n  StrictMode,\n} from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"./style.css\";\nimport {\n  CellStyleModule,\n  ClientSideRowModelApiModule,\n  ClientSideRowModelModule,\n  ColDef,\n  ColGroupDef,\n  ColTypeDef,\n  GetRowIdFunc,\n  GetRowIdParams,\n  GridApi,\n  GridOptions,\n  GridReadyEvent,\n  HighlightChangesModule,\n  IAggFunc,\n  IRowNode,\n  ModuleRegistry,\n  NumberFilterModule,\n  TextEditorModule,\n  ValidationModule,\n  ValueParserParams,\n  createGrid,\n} from \"ag-grid-community\";\nimport { RowGroupingModule, SetFilterModule } from \"ag-grid-enterprise\";\nModuleRegistry.registerModules([\n  ClientSideRowModelApiModule,\n  CellStyleModule,\n  ClientSideRowModelModule,\n  RowGroupingModule,\n  SetFilterModule,\n  HighlightChangesModule,\n  NumberFilterModule,\n  TextEditorModule,\n  ValidationModule /* Development Only */,\n]);\n\nlet rowIdCounter = 0;\n\nlet callCount = 0;\n\nfunction createRowData() {\n  const result = [];\n  for (let i = 1; i <= 2; i++) {\n    for (let j = 1; j <= 5; j++) {\n      for (let k = 1; k <= 3; k++) {\n        const rowDataItem = createRowItem(i, j, k);\n        result.push(rowDataItem);\n      }\n    }\n  }\n  return result;\n}\n\nfunction createRowItem(i: number, j: number, k: number) {\n  const rowDataItem = {\n    id: rowIdCounter++,\n    a: (j * k * 863) % 100,\n    b: (j * k * 811) % 100,\n    c: (j * k * 743) % 100,\n    d: (j * k * 677) % 100,\n    topGroup: \"Bottom\",\n    group: \"Group B\" + j,\n  };\n  if (i === 1) {\n    rowDataItem.topGroup = \"Top\";\n    rowDataItem.group = \"Group A\" + j;\n  }\n  return rowDataItem;\n}\n\n// converts strings to numbers\nfunction numberValueParser(params: ValueParserParams) {\n  console.log(\"=> updating to \" + params.newValue);\n  return Number(params.newValue);\n}\n\nfunction pickRandomColumn() {\n  const letters = [\"a\", \"b\", \"c\", \"d\"];\n  const randomIndex = Math.floor(Math.random() * letters.length);\n  return letters[randomIndex];\n}\n\nfunction createRandomNumber() {\n  return Math.floor(Math.random() * 100);\n}\n\nfunction pickExistingRowItemAtRandom(api: GridApi) {\n  const rowNode = pickExistingRowNodeAtRandom(api);\n  return rowNode ? rowNode.data : null;\n}\n\nconst pickExistingRowNodeAtRandom: (api: GridApi) => IRowNode | undefined = (\n  api: GridApi,\n) => {\n  const allItems: IRowNode[] = [];\n  api.forEachLeafNode(function (rowNode) {\n    allItems.push(rowNode);\n  });\n  if (allItems.length === 0) {\n    return undefined;\n  }\n  const result = allItems[Math.floor(Math.random() * allItems.length)];\n  return result;\n};\n\nconst GridExample = () => {\n  const gridRef = useRef<AgGridReact>(null);\n  const containerStyle = useMemo(() => ({ width: \"100%\", height: \"100%\" }), []);\n  const gridStyle = useMemo(() => ({ height: \"100%\", width: \"100%\" }), []);\n\n  const [columnDefs, setColumnDefs] = useState<ColDef[]>([\n    { field: \"topGroup\", rowGroup: true, hide: true },\n    { field: \"group\", rowGroup: true, hide: true },\n    { headerName: \"ID\", field: \"id\", cellClass: \"number-cell\", maxWidth: 70 },\n    { field: \"a\", type: \"valueColumn\" },\n    { field: \"b\", type: \"valueColumn\" },\n    { field: \"c\", type: \"valueColumn\" },\n    { field: \"d\", type: \"valueColumn\" },\n    {\n      headerName: \"Total\",\n      type: \"totalColumn\",\n      minWidth: 120,\n      // we use getValue() instead of data.a so that it gets the aggregated values at the group level\n      valueGetter:\n        'getValue(\"a\") + getValue(\"b\") + getValue(\"c\") + getValue(\"d\")',\n    },\n  ]);\n  const defaultColDef = useMemo<ColDef>(() => {\n    return {\n      flex: 1,\n    };\n  }, []);\n  const autoGroupColumnDef = useMemo<ColDef>(() => {\n    return {\n      minWidth: 180,\n    };\n  }, []);\n  const columnTypes = useMemo<{\n    [key: string]: ColTypeDef;\n  }>(() => {\n    return {\n      valueColumn: {\n        minWidth: 90,\n        editable: true,\n        aggFunc: \"sum\",\n        cellClass: \"number-cell\",\n        cellRenderer: \"agAnimateShowChangeCellRenderer\",\n        filter: \"agNumberColumnFilter\",\n        valueParser: numberValueParser,\n      },\n      totalColumn: {\n        cellRenderer: \"agAnimateShowChangeCellRenderer\",\n        cellClass: \"number-cell\",\n      },\n    };\n  }, []);\n  const aggFuncs = useMemo<{\n    [key: string]: IAggFunc;\n  }>(() => {\n    return {\n      sum: (params) => {\n        const values = params && params.values ? params.values : [];\n        let result = 0;\n        if (values) {\n          values.forEach((value) => {\n            if (typeof value === \"number\") {\n              result += value;\n            }\n          });\n        }\n        callCount++;\n        console.log(\n          callCount +\n            \" aggregation: sum([\" +\n            values.join(\",\") +\n            \"]) = \" +\n            result,\n        );\n        return result;\n      },\n    };\n  }, []);\n  const getRowId = useCallback(\n    (params: GetRowIdParams) => String(params.data.id),\n    [],\n  );\n\n  const onGridReady = useCallback((params: GridReadyEvent) => {\n    params.api.setGridOption(\"rowData\", createRowData());\n  }, []);\n\n  const updateOneRecord = useCallback(() => {\n    const rowNodeToUpdate = pickExistingRowNodeAtRandom(gridRef.current!.api!);\n    if (!rowNodeToUpdate) return;\n    const randomValue = createRandomNumber();\n    const randomColumnId = pickRandomColumn();\n    console.log(\n      \"updating \" + randomColumnId + \" to \" + randomValue + \" on \",\n      rowNodeToUpdate.data,\n    );\n    rowNodeToUpdate.setDataValue(randomColumnId, randomValue);\n  }, []);\n\n  const updateUsingTransaction = useCallback(() => {\n    const itemToUpdate = pickExistingRowItemAtRandom(gridRef.current!.api!);\n    if (!itemToUpdate) {\n      return;\n    }\n    console.log(\"updating - before\", itemToUpdate);\n    itemToUpdate[pickRandomColumn()] = createRandomNumber();\n    itemToUpdate[pickRandomColumn()] = createRandomNumber();\n    const transaction = {\n      update: [itemToUpdate],\n    };\n    console.log(\"updating - after\", itemToUpdate);\n    gridRef.current!.api.applyTransaction(transaction);\n  }, []);\n\n  const removeUsingTransaction = useCallback(() => {\n    const itemToRemove = pickExistingRowItemAtRandom(gridRef.current!.api!);\n    if (!itemToRemove) {\n      return;\n    }\n    const transaction = {\n      remove: [itemToRemove],\n    };\n    console.log(\"removing\", itemToRemove);\n    gridRef.current!.api.applyTransaction(transaction);\n  }, []);\n\n  const addUsingTransaction = useCallback(() => {\n    const i = Math.floor(Math.random() * 2);\n    const j = Math.floor(Math.random() * 5);\n    const k = Math.floor(Math.random() * 3);\n    const newItem = createRowItem(i, j, k);\n    const transaction = {\n      add: [newItem],\n    };\n    console.log(\"adding\", newItem);\n    gridRef.current!.api.applyTransaction(transaction);\n  }, []);\n\n  const changeGroupUsingTransaction = useCallback(() => {\n    const itemToUpdate = pickExistingRowItemAtRandom(gridRef.current!.api!);\n    if (!itemToUpdate) {\n      return;\n    }\n    itemToUpdate.topGroup = itemToUpdate.topGroup === \"Top\" ? \"Bottom\" : \"Top\";\n    const transaction = {\n      update: [itemToUpdate],\n    };\n    console.log(\"updating\", itemToUpdate);\n    gridRef.current!.api.applyTransaction(transaction);\n  }, []);\n\n  return (\n    <div style={containerStyle}>\n      <div className=\"parent-container\">\n        <div className=\"top-container\">\n          <button onClick={updateOneRecord}>Update One Value</button>\n          <button onClick={updateUsingTransaction}>\n            Update Using Transaction\n          </button>\n          <button onClick={removeUsingTransaction}>\n            Remove Using Transaction\n          </button>\n          <button onClick={addUsingTransaction}>Add Using Transaction</button>\n          <button onClick={changeGroupUsingTransaction}>\n            Change Group Using Transaction\n          </button>\n        </div>\n        <div className=\"center-container\">\n          <div style={gridStyle}>\n            <AgGridReact\n              ref={gridRef}\n              columnDefs={columnDefs}\n              defaultColDef={defaultColDef}\n              autoGroupColumnDef={autoGroupColumnDef}\n              columnTypes={columnTypes}\n              aggregateOnlyChangedColumns={true}\n              aggFuncs={aggFuncs}\n              groupDefaultExpanded={1}\n              suppressAggFuncInHeader={true}\n              getRowId={getRowId}\n              onGridReady={onGridReady}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst root = createRoot(document.getElementById(\"root\")!);\nroot.render(\n  <StrictMode>\n    <GridExample />\n  </StrictMode>,\n);\n","index.html":"<div class=\"parent-container\">\n    <div class=\"top-container\">\n        <button onclick=\"updateOneRecord()\">Update One Value</button>\n        <button onclick=\"updateUsingTransaction()\">Update Using Transaction</button>\n        <button onclick=\"removeUsingTransaction()\">Remove Using Transaction</button>\n        <button onclick=\"addUsingTransaction()\">Add Using Transaction</button>\n        <button onclick=\"changeGroupUsingTransaction()\">Change Group Using Transaction</button>\n    </div>\n    <div class=\"center-container\">\n        <div id=\"myGrid\" style=\"height: 100%\"></div>\n    </div>\n</div>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            jsx: 'react',\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            // react\n            react: 'npm:react@18.2.0',\n            'react-dom': 'npm:react-dom@18.2.0',\n            'react-dom/client': 'npm:react-dom@18.2.0',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            css: {},\n            react: {\n                main: './umd/react.production.min.js',\n            },\n            'react-dom': {\n                main: './umd/react-dom.production.min.js',\n            },\n            'react-dom/server': {\n                main: '../umd/react-dom-server.browser.production.min.js',\n            },\n            app: {\n                main: './index.tsx',\n                defaultExtension: 'tsx',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"react":"18","react-dom":"18","@types/react":"18","@types/react-dom":"18","ag-grid-react":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}