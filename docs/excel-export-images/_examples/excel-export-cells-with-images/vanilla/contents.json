{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["imageUtils.js","interfaces.js","countryCellRenderer.js","main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".container {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n.grid-wrapper {\n    display: flex;\n    flex: 1 1 0px;\n}\n\n.grid-wrapper > div {\n    width: 100%;\n    height: 100%;\n}\n\nbutton.export {\n    margin-bottom: 5px;\n    font-weight: bold;\n}\n","imageUtils.js":"const createBlob = (response) => response.blob();\n\nconst fromBlobToBase64 = (blob) =>\n    new Promise((res) => {\n        const reader = new FileReader();\n        reader.onloadend = () => res(reader.result);\n        reader.readAsDataURL(blob);\n    });\n\nconst createBase64ImageFromURL = (url) =>\n    fetch(url)\n        .then(createBlob)\n        .then((blob) => fromBlobToBase64(blob));\n\nconst createBase64ImagesFromURLArray = (arr) => {\n    const map = new Map();\n    const promiseArray = arr.reduce((promises, currentUrl) => {\n        if (!map.has(currentUrl)) {\n            const promise = createBase64ImageFromURL(currentUrl);\n            promise.then((base64) => map.set(currentUrl, base64));\n            promises.push(promise);\n        }\n\n        return promises;\n    }, []);\n\n    return Promise.all(promiseArray).then(() => map);\n};\n\n// Example specific code\nconst createCountryCodeMap = (countryCodeObject) =>\n    fetch('https://flagcdn.com/en/codes.json')\n        .then((response) => response.json())\n        .then((codes) => {\n            Object.keys(codes).forEach((code) => (countryCodeObject[codes[code]] = code));\n            return countryCodeObject;\n        });\n\nconst createBase64FlagsFromResponse = (response, countryCodeObject, base64FlagsObject) => {\n    const urlPrefix = 'https://flagcdn.com/w20/';\n    const extension = '.png';\n    return response\n        .json()\n        .then((data) => createCountryCodeMap(countryCodeObject).then(() => data.filter((rec) => rec.country != null)))\n        .then((data) => {\n            const urls = data.map((rec) => {\n                const countryCode = countryCodeObject[rec.country];\n                return urlPrefix + countryCode + extension;\n            });\n\n            return createBase64ImagesFromURLArray(urls).then((map) => {\n                map.forEach((value, key) => {\n                    const code = key.replace(urlPrefix, '').replace(extension, '');\n                    base64FlagsObject[code] = value;\n                });\n                return data;\n            });\n        })\n        .then((data) => data);\n};\n","interfaces.js":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","countryCellRenderer.js":"\n\nclass CountryCellRenderer  {\n    eGui;\n\n    init(params) {\n        this.eGui = document.createElement('img');\n        this.eGui.alt = params.data.country;\n\n        const context = params.context;\n        this.eGui.src = context.base64flags[context.countryCodes[params.data.country]];\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n\n    refresh() {\n        return false;\n    }\n}\n","main.js":"const countryCodes = {};\nconst base64flags = {};\n\nconst columnDefs = [\n  {\n    field: \"country\",\n    headerName: \" \",\n    minWidth: 70,\n    width: 70,\n    maxWidth: 70,\n    cellRenderer: CountryCellRenderer,\n    cellRendererParams: {\n      base64flags: base64flags,\n      countryCodes: countryCodes,\n    },\n  },\n  { field: \"athlete\" },\n  { field: \"age\" },\n  { field: \"year\" },\n  { field: \"date\" },\n  { field: \"sport\" },\n  { field: \"gold\" },\n  { field: \"silver\" },\n  { field: \"bronze\" },\n  { field: \"total\" },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n  columnDefs: columnDefs,\n  defaultColDef: {\n    width: 150,\n  },\n  defaultExcelExportParams: {\n    addImageToCell: (rowIndex, col, value) => {\n      if (col.getColId() !== \"country\") {\n        return;\n      }\n\n      const countryCode = countryCodes[value];\n      return {\n        image: {\n          id: countryCode,\n          base64: base64flags[countryCode],\n          imageType: \"png\",\n          width: 20,\n          height: 11,\n          position: {\n            offsetX: 30,\n            offsetY: 5.5,\n          },\n        },\n      };\n    },\n  },\n  context: {\n    base64flags: base64flags,\n    countryCodes: countryCodes,\n  },\n  onGridReady: (params) => {\n    fetch(\"https://www.ag-grid.com/example-assets/small-olympic-winners.json\")\n      .then((data) =>\n        createBase64FlagsFromResponse(data, countryCodes, base64flags),\n      )\n      .then((data) => params.api.setGridOption(\"rowData\", data));\n  },\n};\n\nfunction onBtExport() {\n  gridApi.exportDataAsExcel();\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n});\n","index.html":"<div class=\"container\">\n    <div>\n        <button class=\"export\" onclick=\"onBtExport()\">Export to Excel</button>\n    </div>\n    <div class=\"grid-wrapper\">\n        <div id=\"myGrid\"></div>\n    </div>\n</div>\n","interfaces.ts":"export interface FlagContext {\n    countryCodes: any;\n    base64flags: any;\n}\n\nexport interface IOlympicData {\n    athlete: string;\n    age: number;\n    country: string;\n    year: number;\n    date: string;\n    sport: string;\n    gold: number;\n    silver: number;\n    bronze: number;\n    total: number;\n}\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}