{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"index.tsx","mainFileName":"index.tsx","styleFiles":[],"files":{"styles.css":".container {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n.grid-wrapper {\n    display: flex;\n    flex: 1 1 0px;\n}\n\n.grid-wrapper > div {\n    width: 100%;\n    height: 100%;\n}\n\nbutton.export {\n    margin-bottom: 5px;\n    font-weight: bold;\n}\n","imageUtils.tsx":"const createBlob = (response) => response.blob();\n\nconst fromBlobToBase64 = (blob) =>\n    new Promise((res) => {\n        const reader = new FileReader();\n        reader.onloadend = () => res(reader.result);\n        reader.readAsDataURL(blob);\n    });\n\nconst createBase64ImageFromURL = (url) =>\n    fetch(url)\n        .then(createBlob)\n        .then((blob) => fromBlobToBase64(blob));\n\nconst createBase64ImagesFromURLArray = (arr) => {\n    const map = new Map();\n    const promiseArray = arr.reduce((promises, currentUrl) => {\n        if (!map.has(currentUrl)) {\n            const promise = createBase64ImageFromURL(currentUrl);\n            promise.then((base64) => map.set(currentUrl, base64));\n            promises.push(promise);\n        }\n\n        return promises;\n    }, []);\n\n    return Promise.all(promiseArray).then(() => map);\n};\n\n// Example specific code\nconst createCountryCodeMap = (countryCodeObject) =>\n    fetch('https://flagcdn.com/en/codes.json')\n        .then((response) => response.json())\n        .then((codes) => {\n            Object.keys(codes).forEach((code) => (countryCodeObject[codes[code]] = code));\n            return countryCodeObject;\n        });\n\nexport const createBase64FlagsFromResponse = (response, countryCodeObject, base64FlagsObject) => {\n    const urlPrefix = 'https://flagcdn.com/w20/';\n    const extension = '.png';\n    return response\n        .json()\n        .then((data) => createCountryCodeMap(countryCodeObject).then(() => data.filter((rec) => rec.country != null)))\n        .then((data) => {\n            const urls = data.map((rec) => {\n                const countryCode = countryCodeObject[rec.country];\n                return urlPrefix + countryCode + extension;\n            });\n\n            return createBase64ImagesFromURLArray(urls).then((map) => {\n                map.forEach((value, key) => {\n                    const code = key.replace(urlPrefix, '').replace(extension, '');\n                    base64FlagsObject[code] = value;\n                });\n                return data;\n            });\n        })\n        .then((data) => data);\n};\n","interfaces.tsx":"export interface FlagContext {\n    countryCodes: any;\n    base64flags: any;\n}\n\nexport interface IOlympicData {\n    athlete: string;\n    age: number;\n    country: string;\n    year: number;\n    date: string;\n    sport: string;\n    gold: number;\n    silver: number;\n    bronze: number;\n    total: number;\n}\n","countryCellRenderer.tsx":"import React from 'react';\n\nimport type { CustomCellRendererProps } from 'ag-grid-react';\n\nimport type { FlagContext, IOlympicData } from './interfaces';\n\nexport default (props: CustomCellRendererProps<IOlympicData, any, FlagContext>) => (\n    <React.Fragment>\n        <img\n            alt={props.data!.country}\n            src={props.context.base64flags[props.context.countryCodes[props.data!.country]]}\n        />\n    </React.Fragment>\n);\n","index.tsx":"\"use client\";\n\nimport React, {\n  useCallback,\n  useMemo,\n  useRef,\n  useState,\n  StrictMode,\n} from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"./styles.css\";\nimport {\n  ClientSideRowModelModule,\n  ColDef,\n  ColGroupDef,\n  ExcelExportParams,\n  GridApi,\n  GridOptions,\n  GridReadyEvent,\n  ModuleRegistry,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\nimport {\n  ColumnMenuModule,\n  ContextMenuModule,\n  ExcelExportModule,\n} from \"ag-grid-enterprise\";\nimport { createBase64FlagsFromResponse } from \"./imageUtils\";\nimport { FlagContext } from \"./interfaces\";\nimport CountryCellRenderer from \"./countryCellRenderer.tsx\";\nimport { IOlympicData } from \"./interfaces\";\nModuleRegistry.registerModules([\n  ClientSideRowModelModule,\n  ExcelExportModule,\n  ColumnMenuModule,\n  ContextMenuModule,\n  ValidationModule /* Development Only */,\n]);\n\nconst countryCodes: any = {};\n\nconst base64flags: any = {};\n\nconst GridExample = () => {\n  const gridRef = useRef<AgGridReact<IOlympicData>>(null);\n  const containerStyle = useMemo(() => ({ width: \"100%\", height: \"100%\" }), []);\n  const gridStyle = useMemo(() => ({ height: \"100%\", width: \"100%\" }), []);\n\n  const [columnDefs, setColumnDefs] = useState<ColDef[]>([\n    {\n      field: \"country\",\n      headerName: \" \",\n      minWidth: 70,\n      width: 70,\n      maxWidth: 70,\n      cellRenderer: CountryCellRenderer,\n      cellRendererParams: {\n        base64flags: base64flags,\n        countryCodes: countryCodes,\n      },\n    },\n    { field: \"athlete\" },\n    { field: \"age\" },\n    { field: \"year\" },\n    { field: \"date\" },\n    { field: \"sport\" },\n    { field: \"gold\" },\n    { field: \"silver\" },\n    { field: \"bronze\" },\n    { field: \"total\" },\n  ]);\n  const defaultColDef = useMemo<ColDef>(() => {\n    return {\n      width: 150,\n    };\n  }, []);\n  const defaultExcelExportParams = useMemo<ExcelExportParams>(() => {\n    return {\n      addImageToCell: (rowIndex, col, value) => {\n        if (col.getColId() !== \"country\") {\n          return;\n        }\n        const countryCode = countryCodes[value];\n        return {\n          image: {\n            id: countryCode,\n            base64: base64flags[countryCode],\n            imageType: \"png\",\n            width: 20,\n            height: 11,\n            position: {\n              offsetX: 30,\n              offsetY: 5.5,\n            },\n          },\n        };\n      },\n    };\n  }, []);\n  const context = useMemo(() => {\n    return {\n      base64flags: base64flags,\n      countryCodes: countryCodes,\n    } as FlagContext;\n  }, []);\n\n  const onGridReady = useCallback((params: GridReadyEvent) => {\n    fetch(\"https://www.ag-grid.com/example-assets/small-olympic-winners.json\")\n      .then((data) =>\n        createBase64FlagsFromResponse(data, countryCodes, base64flags),\n      )\n      .then((data) => params.api.setGridOption(\"rowData\", data));\n  }, []);\n\n  const onBtExport = useCallback(() => {\n    gridRef.current!.api.exportDataAsExcel();\n  }, []);\n\n  return (\n    <div style={containerStyle}>\n      <div className=\"container\">\n        <div>\n          <button className=\"export\" onClick={onBtExport}>\n            Export to Excel\n          </button>\n        </div>\n        <div className=\"grid-wrapper\">\n          <div style={gridStyle}>\n            <AgGridReact<IOlympicData>\n              ref={gridRef}\n              columnDefs={columnDefs}\n              defaultColDef={defaultColDef}\n              defaultExcelExportParams={defaultExcelExportParams}\n              context={context}\n              onGridReady={onGridReady}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst root = createRoot(document.getElementById(\"root\")!);\nroot.render(\n  <StrictMode>\n    <GridExample />\n  </StrictMode>,\n);\n","index.html":"<div class=\"container\">\n    <div>\n        <button class=\"export\" onclick=\"onBtExport()\">Export to Excel</button>\n    </div>\n    <div class=\"grid-wrapper\">\n        <div id=\"myGrid\"></div>\n    </div>\n</div>\n","interfaces.ts":"export interface FlagContext {\n    countryCodes: any;\n    base64flags: any;\n}\n\nexport interface IOlympicData {\n    athlete: string;\n    age: number;\n    country: string;\n    year: number;\n    date: string;\n    sport: string;\n    gold: number;\n    silver: number;\n    bronze: number;\n    total: number;\n}\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            jsx: 'react',\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            // react\n            react: 'npm:react@18.2.0',\n            'react-dom': 'npm:react-dom@18.2.0',\n            'react-dom/client': 'npm:react-dom@18.2.0',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            css: {},\n            react: {\n                main: './umd/react.production.min.js',\n            },\n            'react-dom': {\n                main: './umd/react-dom.production.min.js',\n            },\n            'react-dom/server': {\n                main: '../umd/react-dom-server.browser.production.min.js',\n            },\n            app: {\n                main: './index.tsx',\n                defaultExtension: 'tsx',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"react":"18","react-dom":"18","@types/react":"18","@types/react-dom":"18","ag-grid-react":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}