{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["data.js","main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n\n.example-header {\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\n    font-size: 13px;\n    margin-bottom: 5px;\n}\n","data.js":"function getData() {\n    return [\n        {\n            colour: 'Black',\n        },\n        {\n            colour: 'BLACK',\n        },\n        {\n            colour: 'black',\n        },\n        {\n            colour: 'Red',\n        },\n        {\n            colour: 'RED',\n        },\n        {\n            colour: 'red',\n        },\n        {\n            colour: 'Orange',\n        },\n        {\n            colour: 'ORANGE',\n        },\n        {\n            colour: 'orange',\n        },\n        {\n            colour: 'White',\n        },\n        {\n            colour: 'WHITE',\n        },\n        {\n            colour: 'white',\n        },\n        {\n            colour: 'Yellow',\n        },\n        {\n            colour: 'YELLOW',\n        },\n        {\n            colour: 'yellow',\n        },\n        {\n            colour: 'Green',\n        },\n        {\n            colour: 'GREEN',\n        },\n        {\n            colour: 'green',\n        },\n        {\n            colour: 'Purple',\n        },\n        {\n            colour: 'PURPLE',\n        },\n        {\n            colour: 'purple',\n        },\n    ];\n}\n","main.js":"let gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    {\n      headerName: \"Case Insensitive (default)\",\n      field: \"colour\",\n      filter: \"agSetColumnFilter\",\n      filterParams: {\n        caseSensitive: false,\n        cellRenderer: colourCellRenderer,\n      },\n    },\n    {\n      headerName: \"Case Sensitive\",\n      field: \"colour\",\n      filter: \"agSetColumnFilter\",\n      filterParams: {\n        caseSensitive: true,\n        cellRenderer: colourCellRenderer,\n      },\n    },\n  ],\n  defaultColDef: {\n    flex: 1,\n    minWidth: 225,\n    cellRenderer: colourCellRenderer,\n    floatingFilter: true,\n  },\n  sideBar: \"filters\",\n  onFirstDataRendered: onFirstDataRendered,\n  rowData: getData(),\n};\n\nconst FIXED_STYLES =\n  \"vertical-align: middle; border: 1px solid black; margin: 3px; display: inline-block; width: 10px; height: 10px\";\n\nconst FILTER_TYPES = {\n  insensitive: \"colour\",\n  sensitive: \"colour_1\",\n};\n\nfunction colourCellRenderer(params) {\n  if (!params.value || params.value === \"(Select All)\") {\n    return params.value;\n  }\n\n  return `<div style=\"background-color: ${params.value.toLowerCase()}; ${FIXED_STYLES}\"></div>${params.value}`;\n}\n\nfunction setModel(type) {\n  gridApi\n    .setColumnFilterModel(FILTER_TYPES[type], { values: MANGLED_COLOURS })\n    .then(() => {\n      gridApi.onFilterChanged();\n    });\n}\n\nfunction getModel(type) {\n  alert(\n    JSON.stringify(gridApi.getColumnFilterModel(FILTER_TYPES[type]), null, 2),\n  );\n}\n\nfunction setFilterValues(type) {\n  gridApi.getColumnFilterInstance(FILTER_TYPES[type]).then((instance) => {\n    instance.setFilterValues(MANGLED_COLOURS);\n    instance.applyModel();\n    gridApi.onFilterChanged();\n  });\n}\n\nfunction getValues(type) {\n  gridApi.getColumnFilterInstance(FILTER_TYPES[type]).then((instance) => {\n    alert(JSON.stringify(instance.getFilterValues(), null, 2));\n  });\n}\n\nfunction reset(type) {\n  gridApi.getColumnFilterInstance(FILTER_TYPES[type]).then((instance) => {\n    instance.resetFilterValues();\n    instance.setModel(null).then(() => {\n      gridApi.onFilterChanged();\n    });\n  });\n}\n\nvar MANGLED_COLOURS = [\"ReD\", \"OrAnGe\", \"WhItE\", \"YeLlOw\"];\n\nfunction onFirstDataRendered(params) {\n  params.api.getToolPanelInstance(\"filters\").expandFilters();\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n});\n","index.html":"<div class=\"example-wrapper\">\n    <div class=\"example-header\">\n        <div>\n            Case Insensitive:\n            <button onClick=\"setModel('insensitive')\">API: setModel() - mismatching case</button>\n            <button onClick=\"getModel('insensitive')\">API: getModel()</button>\n            <button onClick=\"setFilterValues('insensitive')\">API: setFilterValues() - mismatching case</button>\n            <button onClick=\"getValues('insensitive')\">API: getFilterValues()</button>\n            <button onClick=\"reset('insensitive')\">Reset</button>\n        </div>\n        <div style=\"padding-top: 10px\">\n            Case Sensitive:\n            <button onClick=\"setModel('sensitive')\">API: setModel() - mismatching case</button>\n            <button onClick=\"getModel('sensitive')\">API: getModel()</button>\n            <button onClick=\"setFilterValues('sensitive')\">API: setFilterValues() - mismatching case</button>\n            <button onClick=\"getValues('sensitive')\">API: getFilterValues()</button>\n            <button onClick=\"reset('sensitive')\">Reset</button>\n        </div>\n    </div>\n    <div id=\"myGrid\"></div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}