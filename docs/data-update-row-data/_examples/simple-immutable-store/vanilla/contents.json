{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":[],"files":{"main.js":"function getInitialData() {\n  const data = [];\n  for (let i = 0; i < 5; i++) {\n    data.push(createItem());\n  }\n\n  return data;\n}\n\nlet immutableStore = [];\n\nfunction addFiveItems(append) {\n  const newStore = immutableStore.slice();\n  for (let i = 0; i < 5; i++) {\n    const newItem = createItem();\n    if (append) {\n      newStore.push(newItem);\n    } else {\n      newStore.splice(0, 0, newItem);\n    }\n  }\n  immutableStore = newStore;\n  gridApi.setGridOption(\"rowData\", immutableStore);\n}\n\nfunction removeSelected() {\n  const selectedRowNodes = gridApi.getSelectedNodes();\n  const selectedIds = selectedRowNodes.map(function (rowNode) {\n    return rowNode.id;\n  });\n  immutableStore = immutableStore.filter(function (dataItem) {\n    return selectedIds.indexOf(dataItem.symbol) < 0;\n  });\n  gridApi.setGridOption(\"rowData\", immutableStore);\n}\n\nfunction setSelectedToGroup(newGroup) {\n  const selectedRowNodes = gridApi.getSelectedNodes();\n  const selectedIds = selectedRowNodes.map(function (rowNode) {\n    return rowNode.id;\n  });\n  immutableStore = immutableStore.map(function (dataItem) {\n    const itemSelected = selectedIds.indexOf(dataItem.symbol) >= 0;\n    if (itemSelected) {\n      return {\n        // symbol and price stay the same\n        symbol: dataItem.symbol,\n        price: dataItem.price,\n        // group gets the group\n        group: newGroup,\n      };\n    } else {\n      return dataItem;\n    }\n  });\n  gridApi.setGridOption(\"rowData\", immutableStore);\n}\n\nfunction updatePrices() {\n  const newStore = [];\n  immutableStore.forEach((item) => {\n    newStore.push({\n      // use same symbol as last time, this is the unique id\n      symbol: item.symbol,\n      // group also stays the same\n      group: item.group,\n      // add random price\n      price: Math.floor(Math.random() * 100),\n    });\n  });\n  immutableStore = newStore;\n  gridApi.setGridOption(\"rowData\", immutableStore);\n}\n\nfunction filter(list, callback) {\n  const filteredList = [];\n  list.forEach((item) => {\n    if (callback(item)) {\n      filteredList.push(item);\n    }\n  });\n  return filteredList;\n}\n\nfunction createItem() {\n  const item = {\n    group: [\"A\", \"B\", \"C\"][Math.floor(Math.random() * 3)],\n    symbol: createUniqueRandomSymbol(),\n    price: Math.floor(Math.random() * 100),\n  };\n  return item;\n}\n\nfunction onGroupingEnabled(enabled) {\n  setGroupingEnabled(enabled, gridApi);\n}\n\nfunction setGroupingEnabled(enabled, api) {\n  if (enabled) {\n    api.applyColumnState({\n      state: [\n        { colId: \"group\", rowGroup: true, hide: true },\n        { colId: \"symbol\", hide: true },\n      ],\n    });\n  } else {\n    api.applyColumnState({\n      state: [\n        { colId: \"group\", rowGroup: false, hide: false },\n        { colId: \"symbol\", hide: false },\n      ],\n    });\n  }\n\n  setItemVisible(\"groupingOn\", !enabled);\n  setItemVisible(\"groupingOff\", enabled);\n}\n\nfunction setItemVisible(id, visible) {\n  const element = document.querySelector(\"#\" + id);\n  element.style.display = visible ? \"inline\" : \"none\";\n}\n\n// creates a unique symbol, eg 'ADG' or 'ZJD'\nfunction createUniqueRandomSymbol() {\n  let symbol;\n  const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\n  let isUnique = false;\n  while (!isUnique) {\n    symbol = \"\";\n    // create symbol\n    for (let i = 0; i < 3; i++) {\n      symbol += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    // check uniqueness\n    isUnique = true;\n    immutableStore.forEach((oldItem) => {\n      if (oldItem.symbol === symbol) {\n        isUnique = false;\n      }\n    });\n  }\n\n  return symbol;\n}\n\nfunction reverseItems() {\n  immutableStore.reverse();\n  gridApi.setGridOption(\"rowData\", immutableStore);\n}\n\nlet gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    { headerName: \"Symbol\", field: \"symbol\" },\n    { headerName: \"Price\", field: \"price\" },\n    { headerName: \"Group\", field: \"group\" },\n  ],\n  defaultColDef: {\n    width: 250,\n  },\n  rowSelection: {\n    mode: \"multiRow\",\n  },\n  cellSelection: true,\n  autoGroupColumnDef: {\n    headerName: \"Symbol\",\n    cellRenderer: \"agGroupCellRenderer\",\n    field: \"symbol\",\n  },\n  statusBar: {\n    statusPanels: [{ statusPanel: \"agAggregationComponent\", align: \"right\" }],\n  },\n  groupDefaultExpanded: 1,\n  rowData: immutableStore,\n  getRowId: (params) => {\n    return params.data.symbol;\n  },\n  onGridReady: (params) => {\n    immutableStore = [];\n    immutableStore = getInitialData();\n    params.api.setGridOption(\"rowData\", immutableStore);\n    setGroupingEnabled(false, params.api);\n  },\n};\n\n// after page is loaded, create the grid.\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const eGridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(eGridDiv, gridOptions);\n});\n","index.html":"<div style=\"height: 100%; width: 100%; display: flex; flex-direction: column\">\n    <div>\n        <div style=\"margin-bottom: 5px; min-height: 30px\">\n            <button onclick=\"reverseItems()\">Reverse</button>\n            <button onclick=\"addFiveItems(true)\">Append</button>\n            <button onclick=\"addFiveItems(false)\">Prepend</button>\n            <button onclick=\"removeSelected()\">Remove Selected</button>\n            <button onclick=\"updatePrices()\">Update Prices</button>\n        </div>\n        <div style=\"margin-bottom: 5px; min-height: 30px\">\n            <button id=\"groupingOn\" onclick=\"onGroupingEnabled(true)\">Grouping On</button>\n            <button id=\"groupingOff\" onclick=\"onGroupingEnabled(false)\">Grouping Off</button>\n            <button onclick=\"setSelectedToGroup('A')\">Move to Group A</button>\n            <button onclick=\"setSelectedToGroup('B')\">Move to Group B</button>\n            <button onclick=\"setSelectedToGroup('C')\">Move to Group C</button>\n        </div>\n    </div>\n    <div style=\"flex: 1 1 0px\">\n        <div id=\"myGrid\" style=\"height: 100%\"></div>\n    </div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}