{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"index.jsx","mainFileName":"index.jsx","scriptFiles":[],"styleFiles":[],"files":{"index.jsx":"'use client';\nimport React, { StrictMode, useCallback, useMemo, useRef, useState, } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { ClientSideRowModelModule, ColumnApiModule, ModuleRegistry, RowSelectionModule, TextFilterModule, ValidationModule, } from \"ag-grid-community\";\nimport { CellSelectionModule, RowGroupingModule, StatusBarModule, } from \"ag-grid-enterprise\";\nimport { AgGridReact } from \"ag-grid-react\";\nModuleRegistry.registerModules([\n    ColumnApiModule,\n    TextFilterModule,\n    RowSelectionModule,\n    ClientSideRowModelModule,\n    RowGroupingModule,\n    StatusBarModule,\n    CellSelectionModule,\n    ValidationModule /* Development Only */,\n]);\n// creates a unique symbol, eg 'ADG' or 'ZJD'\nfunction createUniqueRandomSymbol(data) {\n    let symbol = \"\";\n    const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    let isUnique = false;\n    while (!isUnique) {\n        symbol = \"\";\n        // create symbol\n        for (let i = 0; i < 3; i++) {\n            symbol += possible.charAt(Math.floor(Math.random() * possible.length));\n        }\n        // check uniqueness\n        isUnique = true;\n        data.forEach(function (oldItem) {\n            if (oldItem.symbol === symbol) {\n                isUnique = false;\n            }\n        });\n    }\n    return symbol;\n}\nfunction getInitialData() {\n    const data = [];\n    for (let i = 0; i < 5; i++) {\n        data.push(createItem(data));\n    }\n    return data;\n}\nfunction createItem(data) {\n    const item = {\n        group: [\"A\", \"B\", \"C\"][Math.floor(Math.random() * 3)],\n        symbol: createUniqueRandomSymbol(data),\n        price: Math.floor(Math.random() * 100),\n    };\n    return item;\n}\nfunction setGroupingEnabled(enabled, api) {\n    if (enabled) {\n        api.applyColumnState({\n            state: [\n                { colId: \"group\", rowGroup: true, hide: true },\n                { colId: \"symbol\", hide: true },\n            ],\n        });\n    }\n    else {\n        api.applyColumnState({\n            state: [\n                { colId: \"group\", rowGroup: false, hide: false },\n                { colId: \"symbol\", hide: false },\n            ],\n        });\n    }\n    setItemVisible(\"groupingOn\", !enabled);\n    setItemVisible(\"groupingOff\", enabled);\n}\nfunction setItemVisible(id, visible) {\n    const element = document.querySelector(\"#\" + id);\n    element.style.display = visible ? \"inline\" : \"none\";\n}\nconst rowSelection = {\n    mode: \"multiRow\",\n    groupSelects: \"descendants\",\n    headerCheckbox: false,\n};\nconst GridExample = () => {\n    const gridRef = useRef(null);\n    const containerStyle = useMemo(() => ({ width: \"100%\", height: \"100%\" }), []);\n    const gridStyle = useMemo(() => ({ height: \"100%\", width: \"100%\" }), []);\n    const [rowData, setRowData] = useState(getInitialData());\n    const [columnDefs, setColumnDefs] = useState([\n        { headerName: \"Symbol\", field: \"symbol\" },\n        { headerName: \"Price\", field: \"price\" },\n        { headerName: \"Group\", field: \"group\" },\n    ]);\n    const defaultColDef = useMemo(() => {\n        return {\n            width: 250,\n        };\n    }, []);\n    const autoGroupColumnDef = useMemo(() => {\n        return {\n            headerName: \"Symbol\",\n            cellRenderer: \"agGroupCellRenderer\",\n            field: \"symbol\",\n        };\n    }, []);\n    const statusBar = useMemo(() => {\n        return {\n            statusPanels: [{ statusPanel: \"agAggregationComponent\", align: \"right\" }],\n        };\n    }, []);\n    const getRowId = useCallback(function (params) {\n        return params.data.symbol;\n    }, []);\n    const onGridReady = useCallback((params) => {\n        setGroupingEnabled(false, params.api);\n    }, []);\n    const addFiveItems = useCallback((append) => {\n        const newStore = rowData.slice();\n        for (let i = 0; i < 5; i++) {\n            const newItem = createItem(newStore);\n            if (append) {\n                newStore.push(newItem);\n            }\n            else {\n                newStore.splice(0, 0, newItem);\n            }\n        }\n        setRowData(newStore);\n    }, [rowData]);\n    const removeSelected = useCallback(() => {\n        const selectedRowNodes = gridRef.current.api.getSelectedNodes();\n        const selectedIds = selectedRowNodes.map(function (rowNode) {\n            return rowNode.id;\n        });\n        const filteredData = rowData.filter(function (dataItem) {\n            return selectedIds.indexOf(dataItem.symbol) < 0;\n        });\n        setRowData(filteredData);\n    }, [rowData]);\n    const setSelectedToGroup = useCallback((newGroup) => {\n        const selectedRowNodes = gridRef.current.api.getSelectedNodes();\n        const selectedIds = selectedRowNodes.map(function (rowNode) {\n            return rowNode.id;\n        });\n        const newData = rowData.map(function (dataItem) {\n            const itemSelected = selectedIds.indexOf(dataItem.symbol) >= 0;\n            if (itemSelected) {\n                return {\n                    // symbol and price stay the same\n                    symbol: dataItem.symbol,\n                    price: dataItem.price,\n                    // group gets the group\n                    group: newGroup,\n                };\n            }\n            else {\n                return dataItem;\n            }\n        });\n        setRowData(newData);\n    }, [rowData]);\n    const updatePrices = useCallback(() => {\n        const newStore = [];\n        rowData.forEach(function (item) {\n            newStore.push({\n                // use same symbol as last time, this is the unique id\n                symbol: item.symbol,\n                // group also stays the same\n                group: item.group,\n                // add random price\n                price: Math.floor(Math.random() * 100),\n            });\n        });\n        setRowData(newStore);\n    }, [rowData]);\n    const onGroupingEnabled = useCallback((enabled) => {\n        setGroupingEnabled(enabled, gridRef.current.api);\n    }, []);\n    const reverseItems = useCallback(() => {\n        const reversedData = rowData.slice().reverse();\n        setRowData(reversedData);\n    }, [rowData]);\n    return (<div style={containerStyle}>\n      <div style={{\n            height: \"100%\",\n            width: \"100%\",\n            display: \"flex\",\n            flexDirection: \"column\",\n        }}>\n        <div>\n          <div style={{ marginBottom: \"5px\", minHeight: \"30px\" }}>\n            <button onClick={reverseItems}>Reverse</button>\n            <button onClick={() => addFiveItems(true)}>Append</button>\n            <button onClick={() => addFiveItems(false)}>Prepend</button>\n            <button onClick={removeSelected}>Remove Selected</button>\n            <button onClick={updatePrices}>Update Prices</button>\n          </div>\n          <div style={{ marginBottom: \"5px\", minHeight: \"30px\" }}>\n            <button id=\"groupingOn\" onClick={() => onGroupingEnabled(true)}>\n              Grouping On\n            </button>\n            <button id=\"groupingOff\" onClick={() => onGroupingEnabled(false)}>\n              Grouping Off\n            </button>\n            <button onClick={() => setSelectedToGroup(\"A\")}>\n              Move to Group A\n            </button>\n            <button onClick={() => setSelectedToGroup(\"B\")}>\n              Move to Group B\n            </button>\n            <button onClick={() => setSelectedToGroup(\"C\")}>\n              Move to Group C\n            </button>\n          </div>\n        </div>\n        <div style={{ flex: \"1 1 0px\" }}>\n          <div style={gridStyle}>\n            <AgGridReact ref={gridRef} rowData={rowData} columnDefs={columnDefs} defaultColDef={defaultColDef} rowSelection={rowSelection} cellSelection={true} autoGroupColumnDef={autoGroupColumnDef} statusBar={statusBar} groupDefaultExpanded={1} getRowId={getRowId} onGridReady={onGridReady}/>\n          </div>\n        </div>\n      </div>\n    </div>);\n};\nconst root = createRoot(document.getElementById(\"root\"));\nroot.render(<StrictMode>\n    <GridExample />\n  </StrictMode>);\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            jsx: 'react',\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            // react\n            react: 'npm:react@18.2.0',\n            'react-dom': 'npm:react-dom@18.2.0',\n            'react-dom/client': 'npm:react-dom@18.2.0',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            css: {},\n            react: {\n                main: './umd/react.production.min.js',\n            },\n            'react-dom': {\n                main: './umd/react-dom.production.min.js',\n            },\n            'react-dom/server': {\n                main: '../umd/react-dom-server.browser.production.min.js',\n            },\n            app: {\n                main: './index.jsx',\n                defaultExtension: 'jsx',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"react":"18","react-dom":"18","@types/react":"18","@types/react-dom":"18","ag-grid-react":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}