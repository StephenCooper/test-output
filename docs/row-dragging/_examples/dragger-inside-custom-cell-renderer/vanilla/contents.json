{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["customCellRenderer.js","main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".ag-ltr .ag-cell.custom-athlete-cell.ag-cell-focus:not(.ag-cell-range-selected):focus-within {\n    border: 1px solid #ff7b7b;\n}\n.ag-cell.custom-athlete-cell {\n    padding-left: 0;\n    padding-right: 0;\n}\n.ag-cell.custom-athlete-cell > div {\n    height: 100%;\n}\n\n.my-custom-cell-renderer {\n    display: flex;\n    font-size: 0.7rem;\n    background-color: #4180d6;\n    color: white;\n    padding: 0.25rem;\n    align-items: center;\n    justify-content: space-between;\n    box-sizing: border-box;\n    height: 100%;\n}\n\n.my-custom-cell-renderer > * {\n    line-height: normal;\n}\n\n.my-custom-cell-renderer i {\n    visibility: hidden;\n    cursor: move;\n    color: orange;\n}\n\n.my-custom-cell-renderer:hover i {\n    visibility: visible;\n}\n\n.my-custom-cell-renderer .athlete-info {\n    display: flex;\n    flex-direction: column;\n    width: 85px;\n    max-width: 85px;\n}\n\n.my-custom-cell-renderer .athlete-info > span {\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n","customCellRenderer.js":"\nclass CustomCellRenderer  {\n    eGui;\n\n    init(params) {\n        this.eGui = document.createElement('div');\n        this.eGui.classList.add('my-custom-cell-renderer');\n        this.eGui.innerHTML =\n            /* html */\n            `<div class=\"athlete-info\">\n            <span>${params.data.athlete}</span>\n            <span>${params.data.country}</span>\n        </div>\n        <span>${params.data.year}</span>`;\n\n        // creates the row dragger element\n        const rowDragger = document.createElement('i');\n        rowDragger.classList.add('fas', 'fa-arrows-alt-v');\n        this.eGui.appendChild(rowDragger);\n\n        // registers as a row dragger\n        params.registerRowDragger(rowDragger);\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n\n    refresh(params) {\n        return false;\n    }\n}\n","main.js":"const columnDefs = [\n  {\n    field: \"athlete\",\n    cellClass: \"custom-athlete-cell\",\n    cellRenderer: CustomCellRenderer,\n  },\n  { field: \"country\" },\n  { field: \"year\", width: 100 },\n  { field: \"date\" },\n  { field: \"sport\" },\n  { field: \"gold\" },\n  { field: \"silver\" },\n  { field: \"bronze\" },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n  defaultColDef: {\n    width: 170,\n    filter: true,\n  },\n  rowDragManaged: true,\n  columnDefs: columnDefs,\n};\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then((data) => gridApi.setGridOption(\"rowData\", data));\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}},"extras":["fontawesome"]}