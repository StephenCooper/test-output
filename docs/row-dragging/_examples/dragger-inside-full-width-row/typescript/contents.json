{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"main.ts","styleFiles":["style.css"],"files":{"style.css":".full-width-panel {\n    /* undo the white-space setting Fresh puts in */\n    white-space: normal;\n    height: 100%;\n    width: 100%;\n    border: 2px solid grey;\n    border-style: ridge;\n    box-sizing: border-box;\n    padding: 5px;\n    background-color: #99999944;\n}\n.full-width-flag {\n    float: left;\n    padding: 6px;\n}\n.full-width-summary {\n    float: left;\n    /*margin-left: 10px;*/\n    margin-right: 10px;\n}\n.full-width-panel label {\n    padding-top: 3px;\n    display: inline-block;\n    font-size: 12px;\n}\n.full-width-center {\n    overflow-y: scroll;\n    border: 1px solid grey;\n    padding: 2px;\n    height: 100%;\n    box-sizing: border-box;\n    font-family: cursive;\n    background-color: #99999944;\n}\n.full-width-center p {\n    margin-top: 0px;\n}\n.full-width-title {\n    font-size: 20px;\n}\n","data.ts":"export function getData(): any[] {\n    const rowData = [\n        {\n            // these attributes appear in the top level rows of the grid\n            name: 'Ireland',\n            continent: 'Europe',\n            language: 'English',\n            code: 'ie',\n            // these are used in the panel\n            population: 4000000,\n        },\n        // and then repeat for all the other countries\n        {\n            name: 'Spain',\n            continent: 'Europe',\n            language: 'Spanish',\n            code: 'es',\n            population: 4000000,\n        },\n        {\n            name: 'United Kingdom',\n            continent: 'Europe',\n            language: 'English',\n            code: 'gb',\n            population: 4000000,\n        },\n        {\n            name: 'France',\n            continent: 'Europe',\n            language: 'French',\n            code: 'fr',\n            population: 4000000,\n        },\n        {\n            name: 'Germany',\n            continent: 'Europe',\n            language: 'German',\n            code: 'de',\n            population: 4000000,\n        },\n        {\n            name: 'Sweden',\n            continent: 'Europe',\n            language: 'Swedish',\n            code: 'se',\n            population: 4000000,\n        },\n        {\n            name: 'Norway',\n            continent: 'Europe',\n            language: 'Norwegian',\n            code: 'no',\n            population: 4000000,\n        },\n        {\n            name: 'Italy',\n            continent: 'Europe',\n            language: 'Italian',\n            code: 'it',\n            population: 4000000,\n        },\n        {\n            name: 'Greece',\n            continent: 'Europe',\n            language: 'Greek',\n            code: 'gr',\n            population: 4000000,\n        },\n        {\n            name: 'Iceland',\n            continent: 'Europe',\n            language: 'Icelandic',\n            code: 'is',\n            population: 4000000,\n        },\n        {\n            name: 'Portugal',\n            continent: 'Europe',\n            language: 'Portuguese',\n            code: 'pt',\n            population: 4000000,\n        },\n        {\n            name: 'Malta',\n            continent: 'Europe',\n            language: 'Maltese',\n            code: 'mt',\n            population: 4000000,\n        },\n        {\n            name: 'Brazil',\n            continent: 'South America',\n            language: 'Portuguese',\n            code: 'br',\n            population: 4000000,\n        },\n        {\n            name: 'Argentina',\n            continent: 'South America',\n            language: 'Spanish',\n            code: 'ar',\n            population: 4000000,\n        },\n        {\n            name: 'Colombia',\n            continent: 'South America',\n            language: 'Spanish',\n            code: 'co',\n            population: 4000000,\n        },\n        {\n            name: 'Peru',\n            continent: 'South America',\n            language: 'Spanish',\n            code: 'pe',\n            population: 4000000,\n        },\n        {\n            name: 'Venezuela',\n            continent: 'South America',\n            language: 'Spanish',\n            code: 've',\n            population: 4000000,\n        },\n        {\n            name: 'Uruguay',\n            continent: 'South America',\n            language: 'Spanish',\n            code: 'uy',\n            population: 4000000,\n        },\n    ];\n    return rowData;\n}\n","fullWidthCellRenderer.ts":"import type { ICellRendererComp, ICellRendererParams } from 'ag-grid-community';\n\nexport class FullWidthCellRenderer implements ICellRendererComp {\n    eGui!: HTMLElement;\n\n    init(params: ICellRendererParams) {\n        // trick to convert string of html into dom object\n        const eTemp = document.createElement('div');\n        eTemp.innerHTML = this.getTemplate(params);\n        this.eGui = eTemp.firstElementChild as HTMLElement;\n        params.registerRowDragger(this.eGui, undefined, params.data.name, true);\n        this.consumeMouseWheelOnCenterText();\n    }\n\n    getTemplate(params: ICellRendererParams) {\n        // the flower row shares the same data as the parent row\n        const data = params.node.data;\n\n        const template =\n            '<div class=\"full-width-panel\">' +\n            '  <div class=\"full-width-flag\">' +\n            '    <img border=\"0\" src=\"https://www.ag-grid.com/example-assets/large-flags/' +\n            data.code +\n            '.png\">' +\n            '  </div>' +\n            '  <div class=\"full-width-summary\">' +\n            '    <span class=\"full-width-title\">' +\n            data.name +\n            '</span><br/>' +\n            '    <label><b>Population:</b> ' +\n            data.population +\n            '</label><br/>' +\n            '    <label><b>Language:</b> ' +\n            data.language +\n            '</label><br/>' +\n            '  </div>' +\n            '  <div class=\"full-width-center\">' +\n            latinText() +\n            '  </div>' +\n            '</div>';\n\n        return template;\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n\n    // if we don't do this, then the mouse wheel will be picked up by the main\n    // grid and scroll the main grid and not this component. this ensures that\n    // the wheel move is only picked up by the text field\n    consumeMouseWheelOnCenterText() {\n        const eFullWidthCenter = this.eGui.querySelector('.full-width-center')!;\n\n        const mouseWheelListener = function (event: any) {\n            event.stopPropagation();\n        };\n\n        // event is 'mousewheel' for IE9, Chrome, Safari, Opera\n        eFullWidthCenter.addEventListener('mousewheel', mouseWheelListener);\n        // event is 'DOMMouseScroll' Firefox\n        eFullWidthCenter.addEventListener('DOMMouseScroll', mouseWheelListener);\n    }\n\n    refresh(params: ICellRendererParams): boolean {\n        return false;\n    }\n}\n\nfunction latinText() {\n    return '<p>Sample Text in a Paragraph</p><p>Lorem ipsum dolor sit amet, his mazim necessitatibus te, mea volutpat intellegebat at. Ea nec perpetua liberavisse, et modo rebum persius pri. Velit recteque reprimique quo at. Vis ex persius oporteat, esse voluptatum moderatius te vis. Ex agam suscipit aliquando eum. Mediocrem molestiae id pri, ei cibo facilisis mel. Ne sale nonumy sea. Et vel lorem omittam vulputate. Ne prima impedit percipitur vis, erat summo an pro. Id urbanitas deterruisset cum, at legere oportere has. No saperet lobortis elaboraret qui, alii zril at vix, nulla soluta ornatus per ad. Feugiat consequuntur vis ad, te sit quodsi persequeris, labore perpetua mei ad. Ex sea affert ullamcorper disputationi, sit nisl elit elaboraret te, quodsi doctus verear ut eam. Eu vel malis nominati, per ex melius delenit incorrupte. Partem complectitur sed in. Vix dicta tincidunt ea. Id nec urbanitas voluptaria, pri no nostro disputationi. Falli graeco salutatus pri ea.</p><p>Quo ad omnesque phaedrum principes, tale urbanitas constituam et ius, pericula consequat ad est. Ius tractatos referrentur deterruisset an, odio consequuntur sed ad. Ea molestie adipiscing adversarium eos, tale veniam sea no. Mutat nullam philosophia sed ad. Pri eu dicta consulatu, te mollis quaerendum sea. Ei doming commodo euismod vis. Cu modus aliquip inermis his, eos et eirmod regione delicata, at odio definiebas vis.</p><p>Lorem ipsum dolor sit amet, his mazim necessitatibus te, mea volutpat intellegebat at. Ea nec perpetua liberavisse, et modo rebum persius pri. Velit recteque reprimique quo at. Vis ex persius oporteat, esse voluptatum moderatius te vis. Ex agam suscipit aliquando eum. Mediocrem molestiae id pri, ei cibo facilisis mel. Ne sale nonumy sea. Et vel lorem omittam vulputate. Ne prima impedit percipitur vis, erat summo an pro. Id urbanitas deterruisset cum, at legere oportere has. No saperet lobortis elaboraret qui, alii zril at vix, nulla soluta ornatus per ad. Feugiat consequuntur vis ad, te sit quodsi persequeris, labore perpetua mei ad. Ex sea affert ullamcorper disputationi, sit nisl elit elaboraret te, quodsi doctus verear ut eam. Eu vel malis nominati, per ex melius delenit incorrupte. Partem complectitur sed in. Vix dicta tincidunt ea. Id nec urbanitas voluptaria, pri no nostro disputationi. Falli graeco salutatus pri ea.</p><p>Quo ad omnesque phaedrum principes, tale urbanitas constituam et ius, pericula consequat ad est. Ius tractatos referrentur deterruisset an, odio consequuntur sed ad. Ea molestie adipiscing adversarium eos, tale veniam sea no. Mutat nullam philosophia sed ad. Pri eu dicta consulatu, te mollis quaerendum sea. Ei doming commodo euismod vis. Cu modus aliquip inermis his, eos et eirmod regione delicata, at odio definiebas vis.</p>';\n}\n","main.ts":"import {\n  ClientSideRowModelModule,\n  ColDef,\n  ColGroupDef,\n  GridApi,\n  GridOptions,\n  ICellRendererParams,\n  IsFullWidthRowParams,\n  ModuleRegistry,\n  RowDragModule,\n  RowHeightParams,\n  TextFilterModule,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\nimport { getData } from \"./data\";\nimport { FullWidthCellRenderer } from \"./fullWidthCellRenderer\";\n\nModuleRegistry.registerModules([\n  TextFilterModule,\n  RowDragModule,\n  ClientSideRowModelModule,\n  ValidationModule /* Development Only */,\n]);\n\nlet gridApi: GridApi;\n\nconst gridOptions: GridOptions = {\n  columnDefs: [\n    { field: \"name\", cellRenderer: countryCellRenderer },\n    { field: \"continent\" },\n    { field: \"language\" },\n  ],\n  defaultColDef: {\n    flex: 1,\n    filter: true,\n  },\n  rowData: getData(),\n  rowDragManaged: true,\n  getRowHeight: (params: RowHeightParams) => {\n    // return 100px height for full width rows\n    if (isFullWidth(params.data)) {\n      return 100;\n    }\n  },\n  isFullWidthRow: (params: IsFullWidthRowParams) => {\n    return isFullWidth(params.rowNode.data);\n  },\n  // see AG Grid docs cellRenderer for details on how to build cellRenderers\n  fullWidthCellRenderer: FullWidthCellRenderer,\n};\n\nfunction countryCellRenderer(params: ICellRendererParams) {\n  if (!params.fullWidth) {\n    return params.value;\n  }\n  const flag =\n    '<img border=\"0\" width=\"15\" height=\"10\" src=\"https://www.ag-grid.com/example-assets/flags/' +\n    params.data.code +\n    '.png\">';\n  return (\n    '<span style=\"cursor: default;\">' + flag + \" \" + params.value + \"</span>\"\n  );\n}\n\nfunction isFullWidth(data: any) {\n  // return true when country is Peru, France or Italy\n  return [\"Peru\", \"France\", \"Italy\"].indexOf(data.name) >= 0;\n}\n\n// setup the grid after the page has finished loading\nconst gridDiv = document.querySelector<HTMLElement>(\"#myGrid\")!;\ngridApi = createGrid(gridDiv, gridOptions);\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {},\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        // map tells the System loader where to look for things\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            // appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap,\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {},\n            app: {\n                main: './main.ts',\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}