{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"main.ts","styleFiles":[],"files":{"style.css":".fa-folder {\n    color: darkorange;\n}\n\n.fa-file-pdf {\n    color: red;\n}\n\n.fa-file-excel {\n    color: green;\n}\n\n.fa-file-audio {\n    color: blue;\n}\n\n.filename {\n    padding: 5px;\n    color: var(--ag-foreground-color);\n    font-size: 16px;\n    font-family: 'Courier New', Courier, monospace;\n    font-weight: normal;\n}\n\n.hover-over {\n    background-color: var(--ag-accent-color);\n}\n","data.ts":"export function getData(): any[] {\n    return [\n        { id: 1, filePath: ['Documents'], type: 'folder' },\n        { id: 2, filePath: ['Documents', 'txt'], type: 'folder' },\n        {\n            id: 3,\n            filePath: ['Documents', 'txt', 'notes.txt'],\n            type: 'file',\n            dateModified: 'May 21 2017 01:50:00 PM',\n            size: 14.7,\n        },\n        { id: 4, filePath: ['Documents', 'pdf'], type: 'folder' },\n        {\n            id: 5,\n            filePath: ['Documents', 'pdf', 'book.pdf'],\n            type: 'file',\n            dateModified: 'May 20 2017 01:50:00 PM',\n            size: 2.1,\n        },\n        {\n            id: 6,\n            filePath: ['Documents', 'pdf', 'cv.pdf'],\n            type: 'file',\n            dateModified: 'May 20 2016 11:50:00 PM',\n            size: 2.4,\n        },\n        { id: 7, filePath: ['Documents', 'xls'], type: 'folder' },\n        {\n            id: 8,\n            filePath: ['Documents', 'xls', 'accounts.xls'],\n            type: 'file',\n            dateModified: 'Aug 12 2016 10:50:00 AM',\n            size: 4.3,\n        },\n        { id: 9, filePath: ['Documents', 'stuff'], type: 'folder' },\n        {\n            id: 10,\n            filePath: ['Documents', 'stuff', 'xyz.txt'],\n            type: 'file',\n            dateModified: 'Jan 17 2016 08:03:00 PM',\n            size: 1.1,\n        },\n        { id: 11, filePath: ['Music'], type: 'folder' },\n        { id: 12, filePath: ['Music', 'mp3'], type: 'folder' },\n        {\n            id: 13,\n            filePath: ['Music', 'mp3', 'theme.mp3'],\n            type: 'file',\n            dateModified: 'Sep 11 2016 08:03:00 PM',\n            size: 14.3,\n        },\n        { id: 14, filePath: ['Misc'], type: 'folder' },\n        {\n            id: 15,\n            filePath: ['Misc', 'temp.txt'],\n            type: 'file',\n            dateModified: 'Aug 12 2016 10:50:00 PM',\n            size: 101,\n        },\n    ];\n}\n","main.ts":"import {\n  createApp,\n  defineComponent,\n  onBeforeMount,\n  ref,\n  shallowRef,\n} from \"vue\";\nimport { AgGridVue } from \"ag-grid-vue3\";\nimport \"./style.css\";\nimport {\n  CellClassParams,\n  CellStyleModule,\n  ClientSideRowModelApiModule,\n  ClientSideRowModelModule,\n  ColDef,\n  ColGroupDef,\n  GetDataPath,\n  GetRowIdFunc,\n  GetRowIdParams,\n  GridApi,\n  GridOptions,\n  GridReadyEvent,\n  ICellRendererParams,\n  IRowNode,\n  ModuleRegistry,\n  RefreshCellsParams,\n  RenderApiModule,\n  RowDragEndEvent,\n  RowDragLeaveEvent,\n  RowDragModule,\n  RowDragMoveEvent,\n  ValidationModule,\n  ValueFormatterParams,\n  createGrid,\n} from \"ag-grid-community\";\nimport { TreeDataModule } from \"ag-grid-enterprise\";\nimport { getData } from \"./data\";\nModuleRegistry.registerModules([\n  RowDragModule,\n  ClientSideRowModelApiModule,\n  RenderApiModule,\n  CellStyleModule,\n  ClientSideRowModelModule,\n  TreeDataModule,\n  ValidationModule /* Development Only */,\n]);\n\nclass FileCellRenderer {\n  private eGui!: any;\n\n  init(params: ICellRendererParams) {\n    const tempDiv = document.createElement(\"div\");\n    const value = params.value;\n    const icon = this.getFileIcon(params.value);\n    tempDiv.innerHTML = icon\n      ? '<i class=\"' +\n        icon +\n        '\"/>' +\n        '<span class=\"filename\">' +\n        value +\n        \"</span>\"\n      : value;\n    this.eGui = tempDiv.firstChild!;\n  }\n  getGui() {\n    return this.eGui;\n  }\n\n  getFileIcon(filename: string) {\n    return filename.endsWith(\".mp3\") || filename.endsWith(\".wav\")\n      ? \"far fa-file-audio\"\n      : filename.endsWith(\".xls\")\n        ? \"far fa-file-excel\"\n        : filename.endsWith(\".txt\")\n          ? \"far fa-file\"\n          : filename.endsWith(\".pdf\")\n            ? \"far fa-file-pdf\"\n            : \"far fa-folder\";\n  }\n}\n\nconst valueFormatter = function (params: ValueFormatterParams) {\n  return params.value ? params.value + \" MB\" : \"\";\n};\n\nconst cellClassRules = {\n  \"hover-over\": (params: CellClassParams) => {\n    return params.node === potentialParent;\n  },\n};\n\nvar potentialParent: any = null;\n\nfunction moveToPath(\n  newParentPath: string[],\n  node: IRowNode,\n  allUpdatedNodes: any[],\n) {\n  // last part of the file path is the file name\n  const oldPath = node.data.filePath;\n  const fileName = oldPath[oldPath.length - 1];\n  const newChildPath = newParentPath.slice();\n  newChildPath.push(fileName);\n  node.data.filePath = newChildPath;\n  allUpdatedNodes.push(node.data);\n  if (node.childrenAfterGroup) {\n    node.childrenAfterGroup.forEach((childNode) => {\n      moveToPath(newChildPath, childNode, allUpdatedNodes);\n    });\n  }\n}\n\nfunction isSelectionParentOfTarget(selectedNode: IRowNode, targetNode: any) {\n  const children = selectedNode.childrenAfterGroup || [];\n  for (let i = 0; i < children.length; i++) {\n    if (targetNode && children[i].key === targetNode.key) return true;\n    isSelectionParentOfTarget(children[i], targetNode);\n  }\n  return false;\n}\n\nfunction arePathsEqual(path1: string[], path2: string[]) {\n  if (path1.length !== path2.length) {\n    return false;\n  }\n  let equal = true;\n  path1.forEach(function (item, index) {\n    if (path2[index] !== item) {\n      equal = false;\n    }\n  });\n  return equal;\n}\n\nfunction setPotentialParentForNode(\n  api: GridApi,\n  overNode: IRowNode | undefined | null,\n) {\n  let newPotentialParent;\n  if (overNode) {\n    newPotentialParent =\n      overNode.data.type === \"folder\"\n        ? // if over a folder, we take the immediate row\n          overNode\n        : // if over a file, we take the parent row (which will be a folder)\n          overNode.parent;\n  } else {\n    newPotentialParent = null;\n  }\n  const alreadySelected = potentialParent === newPotentialParent;\n  if (alreadySelected) {\n    return;\n  }\n  // we refresh the previous selection (if it exists) to clear\n  // the highlighted and then the new selection.\n  const rowsToRefresh = [];\n  if (potentialParent) {\n    rowsToRefresh.push(potentialParent);\n  }\n  if (newPotentialParent) {\n    rowsToRefresh.push(newPotentialParent);\n  }\n  potentialParent = newPotentialParent;\n  refreshRows(api, rowsToRefresh);\n}\n\nfunction refreshRows(api: GridApi, rowsToRefresh: IRowNode[]) {\n  const params: RefreshCellsParams = {\n    // refresh these rows only.\n    rowNodes: rowsToRefresh,\n    // because the grid does change detection, the refresh\n    // will not happen because the underlying value has not\n    // changed. to get around this, we force the refresh,\n    // which skips change detection.\n    force: true,\n  };\n  api.refreshCells(params);\n}\n\nconst VueExample = defineComponent({\n  template: `\n        <div style=\"height: 100%\">\n                <ag-grid-vue\n      style=\"width: 100%; height: 100%;\"\n      @grid-ready=\"onGridReady\"\n      :columnDefs=\"columnDefs\"\n      :defaultColDef=\"defaultColDef\"\n      :rowData=\"rowData\"\n      :treeData=\"true\"\n      :groupDefaultExpanded=\"groupDefaultExpanded\"\n      :getDataPath=\"getDataPath\"\n      :getRowId=\"getRowId\"\n      :autoGroupColumnDef=\"autoGroupColumnDef\"\n      @row-drag-move=\"onRowDragMove\"\n      @row-drag-leave=\"onRowDragLeave\"\n      @row-drag-end=\"onRowDragEnd\"></ag-grid-vue>\n        </div>\n    `,\n  components: {\n    \"ag-grid-vue\": AgGridVue,\n  },\n  setup(props) {\n    const gridApi = shallowRef<GridApi | null>(null);\n    const columnDefs = ref<ColDef[]>([\n      {\n        field: \"dateModified\",\n        cellClassRules: cellClassRules,\n      },\n      {\n        field: \"size\",\n        valueFormatter: valueFormatter,\n        cellClassRules: cellClassRules,\n      },\n    ]);\n    const defaultColDef = ref<ColDef>({\n      flex: 1,\n    });\n    const rowData = ref<any[] | null>(getData());\n    const groupDefaultExpanded = ref(-1);\n    const getDataPath = ref<GetDataPath>((data: any) => {\n      return data.filePath;\n    });\n    const getRowId = ref<GetRowIdFunc>((params: GetRowIdParams) => {\n      return String(params.data.id);\n    });\n    const autoGroupColumnDef = ref<ColDef>({\n      rowDrag: true,\n      headerName: \"Files\",\n      minWidth: 300,\n      cellRendererParams: {\n        suppressCount: true,\n        innerRenderer: FileCellRenderer,\n      },\n      cellClassRules: {\n        \"hover-over\": (params) => {\n          return params.node === potentialParent;\n        },\n      },\n    });\n\n    function onRowDragMove(event: RowDragMoveEvent) {\n      setPotentialParentForNode(event.api, event.overNode);\n    }\n    function onRowDragLeave(event: RowDragLeaveEvent) {\n      // clear node to highlight\n      setPotentialParentForNode(event.api, null);\n    }\n    function onRowDragEnd(event: RowDragEndEvent) {\n      if (!potentialParent) {\n        return;\n      }\n      const movingData = event.node.data;\n      // take new parent path from parent, if data is missing, means it's the root node,\n      // which has no data.\n      const newParentPath = potentialParent.data\n        ? potentialParent.data.filePath\n        : [];\n      const needToChangeParent = !arePathsEqual(\n        newParentPath,\n        movingData.filePath,\n      );\n      // check we are not moving a folder into a child folder\n      const invalidMode = isSelectionParentOfTarget(\n        event.node,\n        potentialParent,\n      );\n      if (invalidMode) {\n        console.log(\"invalid move\");\n      }\n      if (needToChangeParent && !invalidMode) {\n        const updatedRows: any[] = [];\n        moveToPath(newParentPath, event.node, updatedRows);\n        gridApi.value!.applyTransaction({\n          update: updatedRows,\n        });\n        gridApi.value!.clearFocusedCell();\n      }\n      // clear node to highlight\n      setPotentialParentForNode(event.api, null);\n    }\n    const onGridReady = (params: GridReadyEvent) => {\n      gridApi.value = params.api;\n    };\n\n    return {\n      gridApi,\n      columnDefs,\n      defaultColDef,\n      rowData,\n      groupDefaultExpanded,\n      getDataPath,\n      getRowId,\n      autoGroupColumnDef,\n      onGridReady,\n      onRowDragMove,\n      onRowDragLeave,\n      onRowDragEnd,\n    };\n  },\n});\n\ncreateApp(VueExample).mount(\"#app\");\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        defaultExtension: 'js',\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            vue: 'npm:vue@3.5.0/dist/vue.esm-browser.js',\n            '@vue/reactivity': 'npm:@vue/reactivity@3.0.0/dist/reactivity.esm-browser.prod.js',\n\n            // vue class component\n            'vue-class-component': 'npm:vue-class-component@^8.0.0-beta.3/dist/vue-class-component.cjs.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            'css.js': {\n                defaultExtension: 'js',\n            },\n            vue: {\n                defaultExtension: 'js',\n            },\n            app: {\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-vue3': {\n                main: './dist/main.umd.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"vue":"^3.5.0","ag-grid-vue3":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}},"extras":["fontawesome"]}