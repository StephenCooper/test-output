{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["data.js","main.js"],"styleFiles":["style.css"],"files":{"style.css":".fa-folder {\n    color: darkorange;\n}\n\n.fa-file-pdf {\n    color: red;\n}\n\n.fa-file-excel {\n    color: green;\n}\n\n.fa-file-audio {\n    color: blue;\n}\n\n.filename {\n    padding: 5px;\n    color: var(--ag-foreground-color);\n    font-size: 16px;\n    font-family: 'Courier New', Courier, monospace;\n    font-weight: normal;\n}\n\n.hover-over {\n    background-color: var(--ag-accent-color);\n}\n","data.js":"function getData() {\n    return [\n        { id: 1, filePath: ['Documents'], type: 'folder' },\n        { id: 2, filePath: ['Documents', 'txt'], type: 'folder' },\n        {\n            id: 3,\n            filePath: ['Documents', 'txt', 'notes.txt'],\n            type: 'file',\n            dateModified: 'May 21 2017 01:50:00 PM',\n            size: 14.7,\n        },\n        { id: 4, filePath: ['Documents', 'pdf'], type: 'folder' },\n        {\n            id: 5,\n            filePath: ['Documents', 'pdf', 'book.pdf'],\n            type: 'file',\n            dateModified: 'May 20 2017 01:50:00 PM',\n            size: 2.1,\n        },\n        {\n            id: 6,\n            filePath: ['Documents', 'pdf', 'cv.pdf'],\n            type: 'file',\n            dateModified: 'May 20 2016 11:50:00 PM',\n            size: 2.4,\n        },\n        { id: 7, filePath: ['Documents', 'xls'], type: 'folder' },\n        {\n            id: 8,\n            filePath: ['Documents', 'xls', 'accounts.xls'],\n            type: 'file',\n            dateModified: 'Aug 12 2016 10:50:00 AM',\n            size: 4.3,\n        },\n        { id: 9, filePath: ['Documents', 'stuff'], type: 'folder' },\n        {\n            id: 10,\n            filePath: ['Documents', 'stuff', 'xyz.txt'],\n            type: 'file',\n            dateModified: 'Jan 17 2016 08:03:00 PM',\n            size: 1.1,\n        },\n        { id: 11, filePath: ['Music'], type: 'folder' },\n        { id: 12, filePath: ['Music', 'mp3'], type: 'folder' },\n        {\n            id: 13,\n            filePath: ['Music', 'mp3', 'theme.mp3'],\n            type: 'file',\n            dateModified: 'Sep 11 2016 08:03:00 PM',\n            size: 14.3,\n        },\n        { id: 14, filePath: ['Misc'], type: 'folder' },\n        {\n            id: 15,\n            filePath: ['Misc', 'temp.txt'],\n            type: 'file',\n            dateModified: 'Aug 12 2016 10:50:00 PM',\n            size: 101,\n        },\n    ];\n}\n","main.js":"class FileCellRenderer {\n  eGui;\n\n  init(params) {\n    const tempDiv = document.createElement(\"div\");\n    const value = params.value;\n    const icon = this.getFileIcon(params.value);\n    tempDiv.innerHTML = icon\n      ? '<i class=\"' +\n        icon +\n        '\"/>' +\n        '<span class=\"filename\">' +\n        value +\n        \"</span>\"\n      : value;\n    this.eGui = tempDiv.firstChild;\n  }\n  getGui() {\n    return this.eGui;\n  }\n\n  getFileIcon(filename) {\n    return filename.endsWith(\".mp3\") || filename.endsWith(\".wav\")\n      ? \"far fa-file-audio\"\n      : filename.endsWith(\".xls\")\n        ? \"far fa-file-excel\"\n        : filename.endsWith(\".txt\")\n          ? \"far fa-file\"\n          : filename.endsWith(\".pdf\")\n            ? \"far fa-file-pdf\"\n            : \"far fa-folder\";\n  }\n}\n\nconst valueFormatter = function (params) {\n  return params.value ? params.value + \" MB\" : \"\";\n};\n\nconst cellClassRules = {\n  \"hover-over\": (params) => {\n    return params.node === potentialParent;\n  },\n};\n\nlet gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    {\n      field: \"dateModified\",\n      cellClassRules: cellClassRules,\n    },\n    {\n      field: \"size\",\n      valueFormatter: valueFormatter,\n      cellClassRules: cellClassRules,\n    },\n  ],\n  defaultColDef: {\n    flex: 1,\n  },\n  rowData: getData(),\n  treeData: true,\n  groupDefaultExpanded: -1,\n  getDataPath: (data) => {\n    return data.filePath;\n  },\n  getRowId: (params) => {\n    return String(params.data.id);\n  },\n  autoGroupColumnDef: {\n    rowDrag: true,\n    headerName: \"Files\",\n    minWidth: 300,\n    cellRendererParams: {\n      suppressCount: true,\n      innerRenderer: FileCellRenderer,\n    },\n    cellClassRules: {\n      \"hover-over\": (params) => {\n        return params.node === potentialParent;\n      },\n    },\n  },\n  onRowDragEnd: onRowDragEnd,\n  onRowDragMove: onRowDragMove,\n  onRowDragLeave: onRowDragLeave,\n};\n\nvar potentialParent = null;\n\nfunction onRowDragMove(event) {\n  setPotentialParentForNode(event.api, event.overNode);\n}\n\nfunction onRowDragLeave(event) {\n  // clear node to highlight\n  setPotentialParentForNode(event.api, null);\n}\n\nfunction onRowDragEnd(event) {\n  if (!potentialParent) {\n    return;\n  }\n\n  const movingData = event.node.data;\n\n  // take new parent path from parent, if data is missing, means it's the root node,\n  // which has no data.\n  const newParentPath = potentialParent.data\n    ? potentialParent.data.filePath\n    : [];\n  const needToChangeParent = !arePathsEqual(newParentPath, movingData.filePath);\n\n  // check we are not moving a folder into a child folder\n  const invalidMode = isSelectionParentOfTarget(event.node, potentialParent);\n  if (invalidMode) {\n    console.log(\"invalid move\");\n  }\n\n  if (needToChangeParent && !invalidMode) {\n    const updatedRows = [];\n    moveToPath(newParentPath, event.node, updatedRows);\n\n    gridApi.applyTransaction({\n      update: updatedRows,\n    });\n    gridApi.clearFocusedCell();\n  }\n\n  // clear node to highlight\n  setPotentialParentForNode(event.api, null);\n}\n\nfunction moveToPath(newParentPath, node, allUpdatedNodes) {\n  // last part of the file path is the file name\n  const oldPath = node.data.filePath;\n  const fileName = oldPath[oldPath.length - 1];\n  const newChildPath = newParentPath.slice();\n  newChildPath.push(fileName);\n\n  node.data.filePath = newChildPath;\n\n  allUpdatedNodes.push(node.data);\n\n  if (node.childrenAfterGroup) {\n    node.childrenAfterGroup.forEach((childNode) => {\n      moveToPath(newChildPath, childNode, allUpdatedNodes);\n    });\n  }\n}\n\nfunction isSelectionParentOfTarget(selectedNode, targetNode) {\n  const children = selectedNode.childrenAfterGroup || [];\n  for (let i = 0; i < children.length; i++) {\n    if (targetNode && children[i].key === targetNode.key) return true;\n    isSelectionParentOfTarget(children[i], targetNode);\n  }\n  return false;\n}\n\nfunction arePathsEqual(path1, path2) {\n  if (path1.length !== path2.length) {\n    return false;\n  }\n\n  let equal = true;\n  path1.forEach(function (item, index) {\n    if (path2[index] !== item) {\n      equal = false;\n    }\n  });\n\n  return equal;\n}\n\nfunction setPotentialParentForNode(api, overNode) {\n  let newPotentialParent;\n  if (overNode) {\n    newPotentialParent =\n      overNode.data.type === \"folder\"\n        ? // if over a folder, we take the immediate row\n          overNode\n        : // if over a file, we take the parent row (which will be a folder)\n          overNode.parent;\n  } else {\n    newPotentialParent = null;\n  }\n\n  const alreadySelected = potentialParent === newPotentialParent;\n  if (alreadySelected) {\n    return;\n  }\n\n  // we refresh the previous selection (if it exists) to clear\n  // the highlighted and then the new selection.\n  const rowsToRefresh = [];\n  if (potentialParent) {\n    rowsToRefresh.push(potentialParent);\n  }\n  if (newPotentialParent) {\n    rowsToRefresh.push(newPotentialParent);\n  }\n\n  potentialParent = newPotentialParent;\n\n  refreshRows(api, rowsToRefresh);\n}\n\nfunction refreshRows(api, rowsToRefresh) {\n  const params = {\n    // refresh these rows only.\n    rowNodes: rowsToRefresh,\n    // because the grid does change detection, the refresh\n    // will not happen because the underlying value has not\n    // changed. to get around this, we force the refresh,\n    // which skips change detection.\n    force: true,\n  };\n  api.refreshCells(params);\n}\n\n// wait for the document to be loaded, otherwise\n// AG Grid will not find the div in the document.\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  // lookup the container we want the Grid to use\n  const eGridDiv = document.querySelector(\"#myGrid\");\n\n  // create the grid passing in the div to use together with the columns & data we want to use\n  gridApi = agGrid.createGrid(eGridDiv, gridOptions);\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}},"extras":["fontawesome"]}