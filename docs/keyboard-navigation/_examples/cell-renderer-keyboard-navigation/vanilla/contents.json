{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["customElements.js","main.js"],"styleFiles":["styles.css"],"files":{"styles.css":"html,\nbody {\n    height: 100%;\n    width: 100%;\n    margin: 0;\n    box-sizing: border-box;\n    -webkit-overflow-scrolling: touch;\n}\n\nhtml {\n    position: absolute;\n    top: 0;\n    left: 0;\n    padding: 0;\n    overflow: auto;\n}\n\nbody {\n    padding: 1rem;\n    overflow: auto;\n}\n\n.custom-element {\n    display: flex;\n    align-items: center;\n    gap: 5px;\n    height: 100%;\n}\n\n.custom-element button {\n    width: 80px;\n    padding: 5px;\n    height: initial;\n    margin: 0;\n}\n\n.custom-element input {\n    width: 100px;\n    padding: 5px;\n    height: initial;\n    margin: 0;\n}\n\n.custom-element a {\n    line-height: 1rem;\n}\n\n.custom-element a:focus-visible {\n    outline: 2px solid blue;\n    outline-offset: 2px;\n    border-radius: 2px;\n}\n\na {\n    color: inherit;\n}\n","customElements.js":"\nclass CustomElements  {\n    eGui;\n\n    init(params) {\n        this.eGui = document.createElement('div');\n        this.eGui.classList.add('custom-element');\n        this.eGui.innerHTML = `\n        <button>Age: ${params.data.age ? params.data.age : '?'}</button>\n        <input value=\"${params.data.country ? params.data.country : ''}\"/>\n        <a href=\"https://www.google.com/search?q=${params.data.sport}\" target=\"_blank\">${params.data.sport}</a>\n    `;\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n\n    refresh(params) {\n        return false;\n    }\n}\n","main.js":"const GRID_CELL_CLASSNAME = \"ag-cell\";\n\nfunction getAllFocusableElementsOf(el) {\n  return Array.from(\n    el.querySelectorAll(\n      'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])',\n    ),\n  ).filter((focusableEl) => {\n    return focusableEl.tabIndex !== -1;\n  });\n}\n\nfunction getEventPath(event) {\n  const path = [];\n  let currentTarget = event.target;\n\n  while (currentTarget) {\n    path.push(currentTarget);\n    currentTarget = currentTarget.parentElement;\n  }\n\n  return path;\n}\n\n/**\n * Capture whether the user is tabbing forwards or backwards and suppress keyboard event if tabbing\n * outside of the children\n */\nfunction suppressKeyboardEvent({ event }) {\n  const { key, shiftKey } = event;\n  const path = getEventPath(event);\n  const isTabForward = key === \"Tab\" && shiftKey === false;\n  const isTabBackward = key === \"Tab\" && shiftKey === true;\n\n  let suppressEvent = false;\n\n  // Handle cell children tabbing\n  if (isTabForward || isTabBackward) {\n    const eGridCell = path.find((el) => {\n      if (el.classList === undefined) return false;\n      return el.classList.contains(GRID_CELL_CLASSNAME);\n    });\n\n    if (!eGridCell) {\n      return suppressEvent;\n    }\n\n    const focusableChildrenElements = getAllFocusableElementsOf(eGridCell);\n    const lastCellChildEl =\n      focusableChildrenElements[focusableChildrenElements.length - 1];\n    const firstCellChildEl = focusableChildrenElements[0];\n\n    // Suppress keyboard event if tabbing forward within the cell and the current focused element is not the last child\n    if (focusableChildrenElements.length === 0) {\n      return false;\n    }\n\n    const currentIndex = focusableChildrenElements.indexOf(\n      document.activeElement,\n    );\n\n    if (isTabForward) {\n      const isLastChildFocused =\n        lastCellChildEl && document.activeElement === lastCellChildEl;\n\n      if (!isLastChildFocused) {\n        suppressEvent = true;\n        if (currentIndex !== -1 || document.activeElement === eGridCell) {\n          event.preventDefault();\n          focusableChildrenElements[currentIndex + 1].focus();\n        }\n      }\n    }\n    // Suppress keyboard event if tabbing backwards within the cell, and the current focused element is not the first child\n    else {\n      const cellHasFocusedChildren =\n        eGridCell.contains(document.activeElement) &&\n        eGridCell !== document.activeElement;\n\n      // Manually set focus to the last child element if cell doesn't have focused children\n      if (!cellHasFocusedChildren) {\n        lastCellChildEl.focus();\n        // Cancel keyboard press, so that it doesn't focus on the last child and then pass through the keyboard press to\n        // move to the 2nd last child element\n        event.preventDefault();\n      }\n\n      const isFirstChildFocused =\n        firstCellChildEl && document.activeElement === firstCellChildEl;\n      if (!isFirstChildFocused) {\n        suppressEvent = true;\n        if (currentIndex !== -1 || document.activeElement === eGridCell) {\n          event.preventDefault();\n          focusableChildrenElements[currentIndex - 1].focus();\n        }\n      }\n    }\n  }\n\n  return suppressEvent;\n}\n\nconst columnDefs = [\n  {\n    field: \"athlete\",\n  },\n  {\n    field: \"country\",\n    flex: 1,\n    cellRenderer: CustomElements,\n  },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n  columnDefs,\n  defaultColDef: {\n    minWidth: 130,\n    suppressKeyboardEvent,\n  },\n};\n\n// Setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/small-olympic-winners.json\")\n    .then((response) => response.json())\n    .then((data) => {\n      gridApi.setGridOption(\"rowData\", data);\n    });\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%; width: 100%\"></div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}