{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["data.js","dragSourceRenderer.js","main.js"],"styleFiles":["style.css"],"files":{"style.css":".outer {\n    display: flex;\n    height: 100%;\n}\n\n.drop-col {\n    padding-left: 10px;\n    box-sizing: border-box;\n    flex: 1 1 0px;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    width: 0px;\n}\n\n.drop-target {\n    border: 1px solid #888;\n    padding: 10px;\n}\n\n.json-display {\n    padding-top: 10px;\n    box-sizing: border-box;\n    flex: 1 1 auto;\n    border: 1px solid #888;\n    background-color: #99999944;\n    overflow: auto;\n}\n\n.json-row {\n    border: 1px solid grey;\n    margin: 4px;\n    white-space: nowrap;\n    display: inline-block;\n}\n\n.grid-col {\n    flex: 1 1 auto;\n    height: 100%;\n}\n\n.red-row {\n    background-color: #cc222244;\n}\n\n.green-row {\n    background-color: #33cc3344;\n}\n\n.blue-row {\n    background-color: #2244cc44;\n}\n\n#myGrid {\n    width: 100%;\n    height: 100%;\n}\n","data.js":"let rowIdSequence = 100;\n\nfunction getData() {\n    const data = [];\n    ['Red', 'Green', 'Blue', 'Red', 'Green', 'Blue', 'Red', 'Green', 'Blue'].forEach((color) => {\n        const newDataItem = {\n            id: rowIdSequence++,\n            color: color,\n            value1: Math.floor(Math.random() * 100),\n            value2: Math.floor(Math.random() * 100),\n        };\n        data.push(newDataItem);\n    });\n    return data;\n}\n","dragSourceRenderer.js":"\nclass DragSourceRenderer  {\n    eGui;\n    rowNode;\n    onDragStartListener;\n\n    init(params) {\n        const eTemp = document.createElement('div');\n        eTemp.innerHTML = '<div draggable=\"true\">Drag Me!</div>';\n\n        this.eGui = eTemp.firstChild ;\n        this.rowNode = params.node;\n\n        this.onDragStartListener = this.onDragStart.bind(this);\n        this.eGui.addEventListener('dragstart', this.onDragStartListener);\n    }\n\n    onDragStart(dragEvent) {\n        dragEvent.dataTransfer.setData('text/plain', 'Dragged item with ID: ' + this.rowNode.data.id);\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n\n    refresh(params) {\n        return false;\n    }\n\n    destroy() {\n        this.eGui.removeEventListener('dragstart', this.onDragStartListener);\n    }\n}\n","main.js":"const rowClassRules = {\n  \"red-row\": 'data.color == \"Red\"',\n  \"green-row\": 'data.color == \"Green\"',\n  \"blue-row\": 'data.color == \"Blue\"',\n};\n\nlet gridApi;\n\nconst gridOptions = {\n  defaultColDef: {\n    width: 80,\n    filter: true,\n  },\n  rowClassRules: rowClassRules,\n  rowData: getData(),\n  rowDragManaged: true,\n  columnDefs: [\n    { cellRenderer: DragSourceRenderer, minWidth: 100 },\n    { field: \"id\" },\n    { field: \"color\" },\n    { field: \"value1\" },\n    { field: \"value2\" },\n  ],\n};\n\nfunction onDragOver(event) {\n  const types = event.dataTransfer.types;\n\n  const dragSupported = types.length;\n\n  if (dragSupported) {\n    event.dataTransfer.dropEffect = \"move\";\n  }\n\n  event.preventDefault();\n}\n\nfunction onDrop(event) {\n  event.preventDefault();\n\n  const textData = event.dataTransfer.getData(\"text/plain\");\n  const eJsonRow = document.createElement(\"div\");\n  eJsonRow.classList.add(\"json-row\");\n  eJsonRow.innerText = textData;\n\n  const eJsonDisplay = document.querySelector(\"#eJsonDisplay\");\n  eJsonDisplay.appendChild(eJsonRow);\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n});\n","index.html":"<div class=\"outer\">\n    <div class=\"grid-col\">\n        <div id=\"myGrid\"></div>\n    </div>\n\n    <div class=\"drop-col\" ondragover=\"onDragOver(event)\" ondrop=\"onDrop(event)\">\n        <span id=\"eDropTarget\" class=\"drop-target\"> ==> Drop to here </span>\n        <div id=\"eJsonDisplay\" class=\"json-display\"></div>\n    </div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}