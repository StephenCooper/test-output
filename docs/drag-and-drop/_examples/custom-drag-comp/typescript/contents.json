{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"main.ts","styleFiles":["style.css"],"files":{"style.css":".outer {\n    display: flex;\n    height: 100%;\n}\n\n.drop-col {\n    padding-left: 10px;\n    box-sizing: border-box;\n    flex: 1 1 0px;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    width: 0px;\n}\n\n.drop-target {\n    border: 1px solid #888;\n    padding: 10px;\n}\n\n.json-display {\n    padding-top: 10px;\n    box-sizing: border-box;\n    flex: 1 1 auto;\n    border: 1px solid #888;\n    background-color: #99999944;\n    overflow: auto;\n}\n\n.json-row {\n    border: 1px solid grey;\n    margin: 4px;\n    white-space: nowrap;\n    display: inline-block;\n}\n\n.grid-col {\n    flex: 1 1 auto;\n    height: 100%;\n}\n\n.red-row {\n    background-color: #cc222244;\n}\n\n.green-row {\n    background-color: #33cc3344;\n}\n\n.blue-row {\n    background-color: #2244cc44;\n}\n\n#myGrid {\n    width: 100%;\n    height: 100%;\n}\n","data.ts":"let rowIdSequence = 100;\n\nexport function getData(): any[] {\n    const data: any[] = [];\n    ['Red', 'Green', 'Blue', 'Red', 'Green', 'Blue', 'Red', 'Green', 'Blue'].forEach((color) => {\n        const newDataItem = {\n            id: rowIdSequence++,\n            color: color,\n            value1: Math.floor(Math.random() * 100),\n            value2: Math.floor(Math.random() * 100),\n        };\n        data.push(newDataItem);\n    });\n    return data;\n}\n","dragSourceRenderer.ts":"import type { ICellRendererComp, ICellRendererParams, IRowNode } from 'ag-grid-community';\n\nexport class DragSourceRenderer implements ICellRendererComp {\n    eGui!: HTMLElement;\n    rowNode!: IRowNode;\n    onDragStartListener: any;\n\n    init(params: ICellRendererParams) {\n        const eTemp = document.createElement('div');\n        eTemp.innerHTML = '<div draggable=\"true\">Drag Me!</div>';\n\n        this.eGui = eTemp.firstChild as HTMLElement;\n        this.rowNode = params.node;\n\n        this.onDragStartListener = this.onDragStart.bind(this);\n        this.eGui.addEventListener('dragstart', this.onDragStartListener);\n    }\n\n    onDragStart(dragEvent: any) {\n        dragEvent.dataTransfer.setData('text/plain', 'Dragged item with ID: ' + this.rowNode.data.id);\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n\n    refresh(params: ICellRendererParams): boolean {\n        return false;\n    }\n\n    destroy() {\n        this.eGui.removeEventListener('dragstart', this.onDragStartListener);\n    }\n}\n","main.ts":"import {\n  ClientSideRowModelModule,\n  ColDef,\n  ColGroupDef,\n  GridApi,\n  GridOptions,\n  ModuleRegistry,\n  RowClassRules,\n  RowDragModule,\n  RowStyleModule,\n  TextFilterModule,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\nimport { getData } from \"./data\";\nimport { DragSourceRenderer } from \"./dragSourceRenderer\";\n\nModuleRegistry.registerModules([\n  TextFilterModule,\n  RowDragModule,\n  RowStyleModule,\n  ClientSideRowModelModule,\n  ValidationModule /* Development Only */,\n]);\n\nconst rowClassRules = {\n  \"red-row\": 'data.color == \"Red\"',\n  \"green-row\": 'data.color == \"Green\"',\n  \"blue-row\": 'data.color == \"Blue\"',\n};\n\nlet gridApi: GridApi;\n\nconst gridOptions: GridOptions = {\n  defaultColDef: {\n    width: 80,\n    filter: true,\n  },\n  rowClassRules: rowClassRules,\n  rowData: getData(),\n  rowDragManaged: true,\n  columnDefs: [\n    { cellRenderer: DragSourceRenderer, minWidth: 100 },\n    { field: \"id\" },\n    { field: \"color\" },\n    { field: \"value1\" },\n    { field: \"value2\" },\n  ],\n};\n\nfunction onDragOver(event: any) {\n  const types = event.dataTransfer.types;\n\n  const dragSupported = types.length;\n\n  if (dragSupported) {\n    event.dataTransfer.dropEffect = \"move\";\n  }\n\n  event.preventDefault();\n}\n\nfunction onDrop(event: any) {\n  event.preventDefault();\n\n  const textData = event.dataTransfer.getData(\"text/plain\");\n  const eJsonRow = document.createElement(\"div\");\n  eJsonRow.classList.add(\"json-row\");\n  eJsonRow.innerText = textData;\n\n  const eJsonDisplay = document.querySelector(\"#eJsonDisplay\")!;\n  eJsonDisplay.appendChild(eJsonRow);\n}\n\n// setup the grid after the page has finished loading\nconst gridDiv = document.querySelector<HTMLElement>(\"#myGrid\")!;\ngridApi = createGrid(gridDiv, gridOptions);\n\nif (typeof window !== \"undefined\") {\n  // Attach external event handlers to window so they can be called from index.html\n  (<any>window).onDragOver = onDragOver;\n  (<any>window).onDrop = onDrop;\n}\n","index.html":"<div class=\"outer\">\n    <div class=\"grid-col\">\n        <div id=\"myGrid\"></div>\n    </div>\n\n    <div class=\"drop-col\" ondragover=\"onDragOver(event)\" ondrop=\"onDrop(event)\">\n        <span id=\"eDropTarget\" class=\"drop-target\"> ==> Drop to here </span>\n        <div id=\"eJsonDisplay\" class=\"json-display\"></div>\n    </div>\n</div>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {},\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        // map tells the System loader where to look for things\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            // appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap,\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {},\n            app: {\n                main: './main.ts',\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}