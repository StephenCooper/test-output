{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"app.component.ts","scriptFiles":[],"styleFiles":[],"files":{"style.css":".outer {\n    display: flex;\n    height: 100%;\n}\n\n.inner-col {\n    width: 0;\n    flex-grow: 1;\n    height: 100%;\n}\n\n.factory-panel {\n    display: flex;\n    flex-direction: column;\n}\n\n.factory {\n    padding: 10px;\n    margin: 10px;\n    flex-grow: 1;\n}\n\n.factory-red {\n    background-color: #cc222244;\n    border: 1px solid #cc222288;\n}\n\n.factory-green {\n    background-color: #33cc3344;\n    border: 1px solid #33cc3388;\n}\n\n.factory-blue {\n    background-color: #2244cc44;\n    border: 1px solid #2244cc88;\n}\n\n.factory-bin {\n    background-color: #99999944;\n    border: 1px solid #999;\n}\n\n.ag-row.red-row {\n    background-color: #cc222244;\n}\n\n.ag-row.green-row {\n    background-color: #33cc3344;\n}\n\n.ag-row.blue-row {\n    background-color: #2244cc44;\n}\n","styles.css":".outer {\n    display: flex;\n    height: 100%;\n}\n\n.inner-col {\n    width: 0;\n    flex-grow: 1;\n    height: 100%;\n}\n\n.factory-panel {\n    display: flex;\n    flex-direction: column;\n}\n\n.factory {\n    padding: 10px;\n    margin: 10px;\n    flex-grow: 1;\n}\n\n.factory-red {\n    background-color: #cc222244;\n    border: 1px solid #cc222288;\n}\n\n.factory-green {\n    background-color: #33cc3344;\n    border: 1px solid #33cc3388;\n}\n\n.factory-blue {\n    background-color: #2244cc44;\n    border: 1px solid #2244cc88;\n}\n\n.factory-bin {\n    background-color: #99999944;\n    border: 1px solid #999;\n}\n\n.ag-row.red-row {\n    background-color: #cc222244;\n}\n\n.ag-row.green-row {\n    background-color: #33cc3344;\n}\n\n.ag-row.blue-row {\n    background-color: #2244cc44;\n}\n","app.component.ts":"import { Component } from \"@angular/core\";\n\nimport { AgGridAngular } from \"ag-grid-angular\";\nimport type {\n  ColDef,\n  GridApi,\n  GridOptions,\n  GridReadyEvent,\n} from \"ag-grid-community\";\nimport {\n  ClientSideRowModelApiModule,\n  ClientSideRowModelModule,\n  DragAndDropModule,\n  ModuleRegistry,\n  RowApiModule,\n  RowDragModule,\n  RowStyleModule,\n  TextFilterModule,\n  ValidationModule,\n} from \"ag-grid-community\";\n\nimport \"./styles.css\";\n\nModuleRegistry.registerModules([\n  DragAndDropModule,\n  ClientSideRowModelApiModule,\n  RowApiModule,\n  TextFilterModule,\n  RowDragModule,\n  RowStyleModule,\n  ClientSideRowModelModule,\n  ValidationModule /* Development Only */,\n]);\n\n@Component({\n  standalone: true,\n  imports: [AgGridAngular],\n  selector: \"my-app\",\n  template: `\n    <div class=\"outer\">\n      <div\n        style=\"height: 100%;\"\n        class=\"inner-col\"\n        (dragover)=\"gridDragOver($event)\"\n        (drop)=\"gridDrop($event, 'left')\"\n      >\n        <ag-grid-angular\n          style=\"height: 100%\"\n          [gridOptions]=\"leftGridOptions\"\n          [columnDefs]=\"columnDefs\"\n          (gridReady)=\"onGridReady($event, 'left')\"\n        >\n        </ag-grid-angular>\n      </div>\n\n      <div class=\"inner-col factory-panel\">\n        <span\n          id=\"eBin\"\n          (dragover)=\"binDragOver($event)\"\n          (drop)=\"binDrop($event)\"\n          class=\"factory factory-bin\"\n        >\n          <i class=\"far fa-trash-alt\"\n            ><span class=\"filename\"> Trash - </span></i\n          >\n          Drop target to destroy row\n        </span>\n        <span\n          draggable=\"true\"\n          (dragstart)=\"dragStart($event, 'Red')\"\n          class=\"factory factory-red\"\n        >\n          <i class=\"far fa-plus-square\"\n            ><span class=\"filename\"> Create - </span></i\n          >\n          Drag source for new red item\n        </span>\n        <span\n          draggable=\"true\"\n          (dragstart)=\"dragStart($event, 'Green')\"\n          class=\"factory factory-green\"\n        >\n          <i class=\"far fa-plus-square\"\n            ><span class=\"filename\"> Create - </span></i\n          >\n          Drag source for new green item\n        </span>\n        <span\n          draggable=\"true\"\n          (dragstart)=\"dragStart($event, 'Blue')\"\n          class=\"factory factory-blue\"\n        >\n          <i class=\"far fa-plus-square\"\n            ><span class=\"filename\"> Create - </span></i\n          >\n          Drag source for new blue item\n        </span>\n      </div>\n\n      <div\n        style=\"height: 100%;\"\n        class=\"inner-col\"\n        (dragover)=\"gridDragOver($event)\"\n        (drop)=\"gridDrop($event, 'right')\"\n      >\n        <ag-grid-angular\n          style=\"height: 100%\"\n          [gridOptions]=\"rightGridOptions\"\n          [columnDefs]=\"columnDefs\"\n          (gridReady)=\"onGridReady($event, 'right')\"\n        >\n        </ag-grid-angular>\n      </div>\n    </div>\n  `,\n})\nexport class AppComponent {\n  private leftGridApi!: GridApi;\n  private rightGridApi!: GridApi;\n\n  rowIdSequence = 100;\n\n  columnDefs: ColDef[] = [\n    { field: \"id\", dndSource: true },\n    { field: \"color\" },\n    { field: \"value1\" },\n    { field: \"value2\" },\n  ];\n\n  leftGridOptions: GridOptions = {\n    defaultColDef: {\n      flex: 1,\n      filter: true,\n    },\n    rowClassRules: {\n      \"red-row\": 'data.color == \"Red\"',\n      \"green-row\": 'data.color == \"Green\"',\n      \"blue-row\": 'data.color == \"Blue\"',\n    },\n    getRowId: (params) => {\n      return String(params.data.id);\n    },\n    rowData: this.createLeftRowData(),\n    rowDragManaged: true,\n  };\n\n  rightGridOptions: GridOptions = {\n    defaultColDef: {\n      flex: 1,\n      filter: true,\n    },\n    rowClassRules: {\n      \"red-row\": 'data.color == \"Red\"',\n      \"green-row\": 'data.color == \"Green\"',\n      \"blue-row\": 'data.color == \"Blue\"',\n    },\n    getRowId: (params) => {\n      return String(params.data.id);\n    },\n    rowData: [],\n    rowDragManaged: true,\n  };\n\n  createLeftRowData() {\n    const data: any[] = [];\n    [\"Red\", \"Green\", \"Blue\"].forEach((color) => {\n      data.push(this.createDataItem(color));\n    });\n    return data;\n  }\n\n  createDataItem(color: string) {\n    return {\n      id: this.rowIdSequence++,\n      color: color,\n      value1: Math.floor(Math.random() * 100),\n      value2: Math.floor(Math.random() * 100),\n    };\n  }\n\n  binDragOver(event: any) {\n    const dragSupported =\n      event.dataTransfer.types.indexOf(\"application/json\") >= 0;\n    if (dragSupported) {\n      event.dataTransfer.dropEffect = \"move\";\n      event.preventDefault();\n    }\n  }\n\n  binDrop(event: any) {\n    event.preventDefault();\n    const jsonData = event.dataTransfer.getData(\"application/json\");\n    const data = JSON.parse(jsonData);\n\n    // if data missing or data has no id, do nothing\n    if (!data || data.id == null) {\n      return;\n    }\n\n    const transaction = {\n      remove: [data],\n    };\n\n    const rowIsInLeftGrid = !!this.leftGridApi.getRowNode(data.id);\n    if (rowIsInLeftGrid) {\n      this.leftGridApi.applyTransaction(transaction);\n    }\n\n    const rowIsInRightGrid = !!this.rightGridApi.getRowNode(data.id);\n    if (rowIsInRightGrid) {\n      this.rightGridApi.applyTransaction(transaction);\n    }\n  }\n\n  dragStart(event: any, color: string) {\n    const newItem = this.createDataItem(color);\n    const jsonData = JSON.stringify(newItem);\n    event.dataTransfer.setData(\"application/json\", jsonData);\n  }\n\n  gridDragOver(event: any) {\n    const dragSupported = event.dataTransfer.types.length;\n\n    if (dragSupported) {\n      event.dataTransfer.dropEffect = \"copy\";\n      event.preventDefault();\n    }\n  }\n\n  gridDrop(event: any, grid: string) {\n    event.preventDefault();\n\n    const jsonData = event.dataTransfer.getData(\"application/json\");\n    const data = JSON.parse(jsonData);\n\n    // if data missing or data has no it, do nothing\n    if (!data || data.id == null) {\n      return;\n    }\n\n    const gridApi = grid == \"left\" ? this.leftGridApi : this.rightGridApi;\n\n    // do nothing if row is already in the grid, otherwise we would have duplicates\n    const rowAlreadyInGrid = !!gridApi!.getRowNode(data.id);\n    if (rowAlreadyInGrid) {\n      console.log(\"not adding row to avoid duplicates in the grid\");\n      return;\n    }\n\n    const transaction = {\n      add: [data],\n    };\n    gridApi!.applyTransaction(transaction);\n  }\n\n  onGridReady(params: GridReadyEvent, grid: \"left\" | \"right\") {\n    if (grid === \"left\") {\n      this.leftGridApi = params.api;\n    } else {\n      this.rightGridApi = params.api;\n    }\n  }\n}\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","main.ts":"import '@angular/compiler';\nimport { provideHttpClient } from '@angular/common/http';\nimport { enableProdMode } from '@angular/core';\nimport { bootstrapApplication } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\nif ((window as any).ENABLE_PROD_MODE) {\n    enableProdMode();\n}\n\nbootstrapApplication(AppComponent, {\n    providers: [provideHttpClient()],\n});\n","systemjs.config.js":"(function (global) {\n    var ANGULAR_VERSION = '^19';\n    window.ENABLE_PROD_MODE = true;\n\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true,\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        // map tells the System loader where to look for things\n        map: {\n            '@angular/compiler': 'npm:@angular/compiler@' + ANGULAR_VERSION + '/fesm2022/compiler.mjs',\n            '@angular/platform-browser-dynamic':\n                'npm:@angular/platform-browser-dynamic@' + ANGULAR_VERSION + '/fesm2022/platform-browser-dynamic.mjs',\n\n            '@angular/core': 'npm:@angular/core@' + ANGULAR_VERSION + '/fesm2022/core.mjs',\n            '@angular/core/primitives/signals':\n                'npm:@angular/core@' + ANGULAR_VERSION + '/fesm2022/primitives/signals.mjs',\n            '@angular/core/primitives/event-dispatch':\n                'npm:@angular/core@' + ANGULAR_VERSION + '/fesm2022/primitives/event-dispatch.mjs',\n            '@angular/common': 'npm:@angular/common@' + ANGULAR_VERSION + '/fesm2022/common.mjs',\n            '@angular/common/http': 'npm:@angular/common@' + ANGULAR_VERSION + '/fesm2022/http.mjs',\n\n            '@angular/platform-browser':\n                'npm:@angular/platform-browser@' + ANGULAR_VERSION + '/fesm2022/platform-browser.mjs',\n            '@angular/platform-browser/animations':\n                'npm:@angular/platform-browser@' + ANGULAR_VERSION + '/fesm2022/animations.mjs',\n\n            '@angular/forms': 'npm:@angular/forms@' + ANGULAR_VERSION + '/fesm2022/forms.mjs',\n            '@angular/animations': 'npm:@angular/animations@' + ANGULAR_VERSION + '/fesm2022/animations.mjs',\n            '@angular/animations/browser': 'npm:@angular/animations@' + ANGULAR_VERSION + '/fesm2022/browser.mjs',\n\n            rxjs: 'npm:rxjs@7.8.1/dist/bundles/rxjs.umd.min.js',\n            'rxjs/operators': 'npm:rxjs@7.8.1/dist/bundles/rxjs.umd.min.js',\n\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@4.4/lib/typescript.min.js',\n\n            // our app is within the app folder, appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap,\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {}, // Stop css.js from defaulting to apps .ts extension\n            app: {\n                main: './main.ts',\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-angular': {\n                main: './fesm2022/ag-grid-angular.mjs',\n                defaultExtension: 'mjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"@angular/core":"^19","@angular/common":"^19","@angular/forms":"^19","@angular/platform-browser":"^19","ag-grid-angular":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}},"extras":["fontawesome"]}