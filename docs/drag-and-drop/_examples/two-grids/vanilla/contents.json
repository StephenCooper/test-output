{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":["style.css"],"files":{"style.css":".outer {\n    display: flex;\n    height: 100%;\n}\n\n.inner-col {\n    width: 0;\n    flex-grow: 1;\n    height: 100%;\n}\n\n.factory-panel {\n    display: flex;\n    flex-direction: column;\n}\n\n.factory {\n    padding: 10px;\n    margin: 10px;\n    flex-grow: 1;\n}\n\n.factory-red {\n    background-color: #cc222244;\n    border: 1px solid #cc222288;\n}\n\n.factory-green {\n    background-color: #33cc3344;\n    border: 1px solid #33cc3388;\n}\n\n.factory-blue {\n    background-color: #2244cc44;\n    border: 1px solid #2244cc88;\n}\n\n.factory-bin {\n    background-color: #99999944;\n    border: 1px solid #999;\n}\n\n.ag-row.red-row {\n    background-color: #cc222244;\n}\n\n.ag-row.green-row {\n    background-color: #33cc3344;\n}\n\n.ag-row.blue-row {\n    background-color: #2244cc44;\n}\n","main.js":"let rowIdSequence = 100;\n\nconst leftColumnDefs = [\n  { field: \"id\", dndSource: true },\n  { field: \"color\" },\n  { field: \"value1\" },\n  { field: \"value2\" },\n];\n\nconst rightColumnDefs = [\n  { field: \"id\", dndSource: true },\n  { field: \"color\" },\n  { field: \"value1\" },\n  { field: \"value2\" },\n];\n\nlet leftApi;\nconst leftGridOptions = {\n  defaultColDef: {\n    flex: 1,\n    filter: true,\n  },\n  rowClassRules: {\n    \"red-row\": 'data.color == \"Red\"',\n    \"green-row\": 'data.color == \"Green\"',\n    \"blue-row\": 'data.color == \"Blue\"',\n  },\n  getRowId: (params) => {\n    return String(params.data.id);\n  },\n  rowData: createLeftRowData(),\n  rowDragManaged: true,\n  columnDefs: leftColumnDefs,\n};\n\nlet rightApi;\nconst rightGridOptions = {\n  defaultColDef: {\n    flex: 1,\n    filter: true,\n  },\n  rowClassRules: {\n    \"red-row\": 'data.color == \"Red\"',\n    \"green-row\": 'data.color == \"Green\"',\n    \"blue-row\": 'data.color == \"Blue\"',\n  },\n  getRowId: (params) => {\n    return String(params.data.id);\n  },\n  rowData: [],\n  rowDragManaged: true,\n  columnDefs: rightColumnDefs,\n};\n\nfunction createLeftRowData() {\n  return [\"Red\", \"Green\", \"Blue\"].map(function (color) {\n    return createDataItem(color);\n  });\n}\n\nfunction createDataItem(color) {\n  return {\n    id: rowIdSequence++,\n    color: color,\n    value1: Math.floor(Math.random() * 100),\n    value2: Math.floor(Math.random() * 100),\n  };\n}\n\nfunction binDragOver(event) {\n  const dragSupported = event.dataTransfer.types.length;\n\n  if (dragSupported) {\n    event.dataTransfer.dropEffect = \"move\";\n    event.preventDefault();\n  }\n}\n\nfunction binDrop(event) {\n  event.preventDefault();\n\n  const jsonData = event.dataTransfer.getData(\"application/json\");\n  const data = JSON.parse(jsonData);\n\n  // if data missing or data has no id, do nothing\n  if (!data || data.id == null) {\n    return;\n  }\n\n  const transaction = {\n    remove: [data],\n  };\n\n  const rowIsInLeftGrid = !!leftApi.getRowNode(data.id);\n  if (rowIsInLeftGrid) {\n    leftApi.applyTransaction(transaction);\n  }\n\n  const rowIsInRightGrid = !!rightApi.getRowNode(data.id);\n  if (rowIsInRightGrid) {\n    rightApi.applyTransaction(transaction);\n  }\n}\n\nfunction dragStart(event, color) {\n  const newItem = createDataItem(color);\n  const jsonData = JSON.stringify(newItem);\n\n  event.dataTransfer.setData(\"application/json\", jsonData);\n}\n\nfunction gridDragOver(event) {\n  const dragSupported = event.dataTransfer.types.length;\n\n  if (dragSupported) {\n    event.dataTransfer.dropEffect = \"copy\";\n    event.preventDefault();\n  }\n}\n\nfunction gridDrop(event, grid) {\n  event.preventDefault();\n\n  const jsonData = event.dataTransfer.getData(\"application/json\");\n  const data = JSON.parse(jsonData);\n\n  // if data missing or data has no it, do nothing\n  if (!data || data.id == null) {\n    return;\n  }\n\n  const gridApi = grid == \"left\" ? leftApi : rightApi;\n\n  // do nothing if row is already in the grid, otherwise we would have duplicates\n  const rowAlreadyInGrid = !!gridApi.getRowNode(data.id);\n  if (rowAlreadyInGrid) {\n    console.log(\"not adding row to avoid duplicates in the grid\");\n    return;\n  }\n\n  const transaction = {\n    add: [data],\n  };\n  gridApi.applyTransaction(transaction);\n}\n\nconst leftGridDiv = document.querySelector(\"#eLeftGrid\");\nleftApi = agGrid.createGrid(leftGridDiv, leftGridOptions);\n\nconst rightGridDiv = document.querySelector(\"#eRightGrid\");\nrightApi = agGrid.createGrid(rightGridDiv, rightGridOptions);\n\nif (typeof window !== \"undefined\") {\n  // Attach external event handlers to window so they can be called from index.html\n  window.binDragOver = binDragOver;\n  window.binDrop = binDrop;\n  window.dragStart = dragStart;\n  window.gridDragOver = gridDragOver;\n  window.gridDrop = gridDrop;\n}\n","index.html":"<div class=\"outer\">\n    <div\n        id=\"eLeftGrid\"\n        style=\"height: 100%\"\n        class=\"inner-col\"\n        ondragover=\"gridDragOver(event)\"\n        ondrop=\"gridDrop(event,'left')\"\n    ></div>\n\n    <div class=\"inner-col factory-panel\">\n        <span id=\"eBin\" ondragover=\"binDragOver(event)\" ondrop=\"binDrop(event)\" class=\"factory factory-bin\">\n            <i class=\"far fa-trash-alt\"><span class=\"filename\"> Trash - </span></i>\n            Drop target to destroy row\n        </span>\n        <span draggable=\"true\" ondragstart=\"dragStart(event,'Red')\" class=\"factory factory-red\">\n            <i class=\"far fa-plus-square\"><span class=\"filename\"> Create - </span></i>\n            Drag source for new red item\n        </span>\n        <span draggable=\"true\" ondragstart=\"dragStart(event,'Green')\" class=\"factory factory-green\">\n            <i class=\"far fa-plus-square\"><span class=\"filename\"> Create - </span></i>\n            Drag source for new green item\n        </span>\n        <span draggable=\"true\" ondragstart=\"dragStart(event,'Blue')\" class=\"factory factory-blue\">\n            <i class=\"far fa-plus-square\"><span class=\"filename\"> Create - </span></i>\n            Drag source for new blue item\n        </span>\n    </div>\n\n    <div\n        id=\"eRightGrid\"\n        style=\"height: 100%\"\n        class=\"inner-col\"\n        ondragover=\"gridDragOver(event)\"\n        ondrop=\"gridDrop(event,'right')\"\n    ></div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}},"extras":["fontawesome"]}