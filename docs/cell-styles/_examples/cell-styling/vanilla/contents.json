{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".rag-red {\n    background-color: #cc222244;\n}\n.rag-green {\n    background-color: #33cc3344;\n}\n.rag-blue {\n    background-color: #2244cc44;\n}\n\n.rag-red-outer .rag-element {\n    background-color: #cc222244;\n}\n.rag-green-outer .rag-element {\n    background-color: #33cc3344;\n}\n.rag-blue-blue .rag-element {\n    background-color: #2244cc44;\n}\n","main.js":"const ragCellClassRules = {\n  \"rag-green-outer\": (params) => params.value === 2008,\n  \"rag-blue-outer\": (params) => params.value === 2004,\n  \"rag-red-outer\": (params) => params.value === 2000,\n};\n\nconst columnDefs = [\n  { field: \"athlete\" },\n  {\n    field: \"age\",\n    maxWidth: 90,\n    valueParser: numberParser,\n    cellClassRules: {\n      \"rag-green\": \"x < 20\",\n      \"rag-blue\": \"x >= 20 && x < 25\",\n      \"rag-red\": \"x >= 25\",\n    },\n  },\n  { field: \"country\" },\n  {\n    field: \"year\",\n    maxWidth: 90,\n    valueParser: numberParser,\n    cellClassRules: ragCellClassRules,\n    cellRenderer: ragRenderer,\n  },\n  { field: \"date\", cellClass: \"rag-blue\" },\n  {\n    field: \"sport\",\n    cellClass: cellClass,\n  },\n  {\n    field: \"gold\",\n    valueParser: numberParser,\n    cellStyle: {\n      // you can use either came case or dashes, the grid converts to whats needed\n      backgroundColor: \"#aaffaa\", // light green\n    },\n  },\n  {\n    field: \"silver\",\n    valueParser: numberParser,\n    // when cellStyle is a func, we can have the style change\n    // dependent on the data, eg different colors for different values\n    cellStyle: cellStyle,\n  },\n  {\n    field: \"bronze\",\n    valueParser: numberParser,\n    // same as above, but demonstrating dashes in the style, grid takes care of converting to/from camel case\n    cellStyle: cellStyle,\n  },\n];\n\nfunction cellStyle(params) {\n  const color = numberToColor(params.value);\n  return {\n    backgroundColor: color,\n  };\n}\n\nfunction cellClass(params) {\n  return params.value === \"Swimming\" ? \"rag-green\" : \"rag-blue\";\n}\n\nfunction numberToColor(val) {\n  if (val === 0) {\n    return \"#ffaaaa\";\n  } else if (val == 1) {\n    return \"#aaaaff\";\n  } else {\n    return \"#aaffaa\";\n  }\n}\n\nfunction ragRenderer(params) {\n  return '<span class=\"rag-element\">' + params.value + \"</span>\";\n}\n\nfunction numberParser(params) {\n  const newValue = params.newValue;\n  let valueAsNumber;\n  if (newValue === null || newValue === undefined || newValue === \"\") {\n    valueAsNumber = null;\n  } else {\n    valueAsNumber = parseFloat(params.newValue);\n  }\n  return valueAsNumber;\n}\n\nlet gridApi;\n\nconst gridOptions = {\n  columnDefs: columnDefs,\n  defaultColDef: {\n    flex: 1,\n    minWidth: 150,\n    editable: true,\n  },\n};\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then((data) => gridApi.setGridOption(\"rowData\", data));\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}