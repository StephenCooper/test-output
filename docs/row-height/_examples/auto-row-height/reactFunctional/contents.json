{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"index.jsx","mainFileName":"index.jsx","styleFiles":[],"files":{"data.jsx":"export function getData() {\n    const latinSentence =\n        'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu.';\n    const latinWords = latinSentence.split(' ');\n\n    const rowData = [];\n\n    function generateRandomSentence(row, col) {\n        const wordCount = ((row + 1) * (col + 1) * 733 * 19) % latinWords.length;\n        const parts = [];\n        for (let i = 0; i < wordCount; i++) {\n            parts.push(latinWords[i]);\n        }\n        const sentence = parts.join(' ');\n        return sentence + '.';\n    }\n\n    // create 100 rows\n    for (let i = 0; i < 100; i++) {\n        const item = {\n            rowNumber: 'Row ' + i,\n            autoA: generateRandomSentence(i, 1),\n            autoB: generateRandomSentence(i, 2),\n            autoC: generateRandomSentence(i, 3),\n        };\n        rowData.push(item);\n    }\n\n    return rowData;\n}\n","index.jsx":"\"use client\";\n\nimport React, {\n  useCallback,\n  useMemo,\n  useRef,\n  useState,\n  StrictMode,\n} from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport { getData } from \"./data.jsx\";\nimport {\n  ClientSideRowModelModule,\n  ModuleRegistry,\n  RowAutoHeightModule,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\nimport {\n  ColumnMenuModule,\n  ColumnsToolPanelModule,\n  ContextMenuModule,\n  RowGroupingModule,\n} from \"ag-grid-enterprise\";\nModuleRegistry.registerModules([\n  RowAutoHeightModule,\n  ClientSideRowModelModule,\n  ColumnsToolPanelModule,\n  ColumnMenuModule,\n  ContextMenuModule,\n  RowGroupingModule,\n  ValidationModule /* Development Only */,\n]);\n\nconst GridExample = () => {\n  const containerStyle = useMemo(() => ({ width: \"100%\", height: \"100%\" }), []);\n  const gridStyle = useMemo(() => ({ height: \"100%\", width: \"100%\" }), []);\n\n  const [columnDefs, setColumnDefs] = useState([\n    {\n      headerName: \"Row #\",\n      field: \"rowNumber\",\n      width: 120,\n    },\n    {\n      field: \"autoA\",\n      width: 300,\n      wrapText: true,\n      autoHeight: true,\n      headerName: \"A) Auto Height\",\n    },\n    {\n      width: 300,\n      field: \"autoB\",\n      wrapText: true,\n      headerName: \"B) Normal Height\",\n    },\n  ]);\n  const sideBar = useMemo(() => {\n    return {\n      toolPanels: [\n        {\n          id: \"columns\",\n          labelDefault: \"Columns\",\n          labelKey: \"columns\",\n          iconKey: \"columns\",\n          toolPanel: \"agColumnsToolPanel\",\n          toolPanelParams: {\n            suppressRowGroups: true,\n            suppressValues: true,\n            suppressPivots: true,\n            suppressPivotMode: true,\n            suppressSideButtons: true,\n            suppressColumnFilter: true,\n            suppressColumnSelectAll: true,\n            suppressColumnExpandAll: true,\n          },\n        },\n      ],\n      defaultToolPanel: \"columns\",\n    };\n  }, []);\n\n  const onGridReady = useCallback((params) => {\n    // in this example, the CSS styles are loaded AFTER the grid is created,\n    // so we put this in a timeout, so height is calculated after styles are applied.\n    setTimeout(() => {\n      params.api.setGridOption(\"rowData\", getData());\n    }, 500);\n  }, []);\n\n  return (\n    <div style={containerStyle}>\n      <div style={gridStyle}>\n        <AgGridReact\n          columnDefs={columnDefs}\n          sideBar={sideBar}\n          onGridReady={onGridReady}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst root = createRoot(document.getElementById(\"root\"));\nroot.render(\n  <StrictMode>\n    <GridExample />\n  </StrictMode>,\n);\nwindow.tearDownExample = () => root.unmount();\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            jsx: 'react',\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            // react\n            react: 'npm:react@18.2.0',\n            'react-dom': 'npm:react-dom@18.2.0',\n            'react-dom/client': 'npm:react-dom@18.2.0',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            css: {},\n            react: {\n                main: './umd/react.production.min.js',\n            },\n            'react-dom': {\n                main: './umd/react-dom.production.min.js',\n            },\n            'react-dom/server': {\n                main: '../umd/react-dom-server.browser.production.min.js',\n            },\n            app: {\n                main: './index.jsx',\n                defaultExtension: 'jsx',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"react":"18","react-dom":"18","@types/react":"18","@types/react-dom":"18","ag-grid-react":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}