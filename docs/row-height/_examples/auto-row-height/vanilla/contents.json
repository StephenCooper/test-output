{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["data.js","main.js"],"styleFiles":[],"files":{"data.js":"function getData() {\n    const latinSentence =\n        'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu.';\n    const latinWords = latinSentence.split(' ');\n\n    const rowData = [];\n\n    function generateRandomSentence(row, col) {\n        const wordCount = ((row + 1) * (col + 1) * 733 * 19) % latinWords.length;\n        const parts = [];\n        for (let i = 0; i < wordCount; i++) {\n            parts.push(latinWords[i]);\n        }\n        const sentence = parts.join(' ');\n        return sentence + '.';\n    }\n\n    // create 100 rows\n    for (let i = 0; i < 100; i++) {\n        const item = {\n            rowNumber: 'Row ' + i,\n            autoA: generateRandomSentence(i, 1),\n            autoB: generateRandomSentence(i, 2),\n            autoC: generateRandomSentence(i, 3),\n        };\n        rowData.push(item);\n    }\n\n    return rowData;\n}\n","main.js":"let gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    {\n      headerName: \"Row #\",\n      field: \"rowNumber\",\n      width: 120,\n    },\n    {\n      field: \"autoA\",\n      width: 300,\n      wrapText: true,\n      autoHeight: true,\n      headerName: \"A) Auto Height\",\n    },\n    {\n      width: 300,\n      field: \"autoB\",\n      wrapText: true,\n      headerName: \"B) Normal Height\",\n    },\n  ],\n  onGridReady: (params) => {\n    // in this example, the CSS styles are loaded AFTER the grid is created,\n    // so we put this in a timeout, so height is calculated after styles are applied.\n    setTimeout(() => {\n      params.api.setGridOption(\"rowData\", getData());\n    }, 500);\n  },\n  sideBar: {\n    toolPanels: [\n      {\n        id: \"columns\",\n        labelDefault: \"Columns\",\n        labelKey: \"columns\",\n        iconKey: \"columns\",\n        toolPanel: \"agColumnsToolPanel\",\n        toolPanelParams: {\n          suppressRowGroups: true,\n          suppressValues: true,\n          suppressPivots: true,\n          suppressPivotMode: true,\n          suppressSideButtons: true,\n          suppressColumnFilter: true,\n          suppressColumnSelectAll: true,\n          suppressColumnExpandAll: true,\n        },\n      },\n    ],\n    defaultToolPanel: \"columns\",\n  },\n};\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}