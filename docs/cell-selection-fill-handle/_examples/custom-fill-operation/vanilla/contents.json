{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":[],"files":{"main.js":"const daysList = [\n  \"Sunday\",\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n];\n\nlet gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    { field: \"athlete\", minWidth: 150 },\n    { headerName: \"Day of the Week\", field: \"dayOfTheWeek\", minWidth: 180 },\n    { field: \"age\", maxWidth: 90 },\n    { field: \"country\", minWidth: 150 },\n    { field: \"year\", maxWidth: 90 },\n    { field: \"date\", minWidth: 150 },\n    { field: \"sport\", minWidth: 150 },\n    { field: \"gold\" },\n    { field: \"silver\" },\n    { field: \"bronze\" },\n  ],\n  defaultColDef: {\n    flex: 1,\n    minWidth: 100,\n    editable: true,\n    cellDataType: false,\n  },\n  cellSelection: {\n    handle: {\n      mode: \"fill\",\n      setFillValue(params) {\n        const hasNonDayValues = params.initialValues.some(function (val) {\n          return daysList.indexOf(val) === -1;\n        });\n\n        if (hasNonDayValues) {\n          return false;\n        }\n\n        const lastValue = params.values[params.values.length - 1];\n        const idxOfLast = daysList.indexOf(lastValue);\n        const nextDay = daysList[(idxOfLast + 1) % daysList.length];\n        console.log(\"Custom Fill Operation -> Next Day is:\", nextDay);\n        return nextDay;\n      },\n    },\n  },\n  onFillStart: (event) => {\n    console.log(\"Fill Start\", event);\n  },\n  onFillEnd: (event) => {\n    console.log(\"Fill End\", event);\n  },\n};\n\nfunction createRowData(rowData) {\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n\n  for (let i = 0; i < rowData.length; i++) {\n    const dt = new Date(\n      getRandom(currentYear - 10, currentYear + 10),\n      getRandom(0, 12),\n      getRandom(1, 25),\n    );\n    rowData[i].dayOfTheWeek = daysList[dt.getDay()];\n  }\n  return rowData;\n}\nvar getRandom = function (start, finish) {\n  return Math.floor(Math.random() * (finish - start) + start);\n};\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/small-olympic-winners.json\")\n    .then((response) => response.json())\n    .then(function (data) {\n      gridApi.setGridOption(\"rowData\", createRowData(data));\n    });\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}