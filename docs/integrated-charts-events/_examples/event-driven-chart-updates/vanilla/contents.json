{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":true,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":["style.css"],"files":{"style.css":".wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    height: 300px;\n    flex: none;\n}\n\n.my-chart {\n    height: 400px;\n    flex: none;\n}\n","main.js":"let gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    { field: \"Month\", width: 150, chartDataType: \"category\" },\n    { field: \"Sunshine (hours)\", chartDataType: \"series\" },\n    { field: \"Rainfall (mm)\", chartDataType: \"series\" },\n  ],\n  defaultColDef: { flex: 1 },\n  cellSelection: true,\n  popupParent: document.body,\n  enableCharts: true,\n  chartThemeOverrides: {\n    common: {\n      title: { enabled: true, text: \"Monthly Weather\" },\n      subtitle: { enabled: true },\n      legend: { enabled: true },\n    },\n  },\n  onFirstDataRendered: onFirstDataRendered,\n  onChartCreated: onChartCreated,\n  onChartRangeSelectionChanged: onChartRangeSelectionChanged,\n  onChartOptionsChanged: onChartOptionsChanged,\n};\n\nfunction onFirstDataRendered(params) {\n  const createRangeChartParams = {\n    cellRange: {\n      rowStartIndex: 0,\n      rowEndIndex: 3,\n      columns: [\"Month\", \"Sunshine (hours)\"],\n    },\n    chartType: \"stackedColumn\",\n    chartContainer: document.querySelector(\"#myChart\"),\n  };\n\n  params.api.createRangeChart(createRangeChartParams);\n}\n\nfunction onChartCreated(event) {\n  console.log(\"Created chart with ID \" + event.chartId);\n  updateTitle(gridApi, event.chartId);\n}\n\nfunction onChartRangeSelectionChanged(event) {\n  console.log(\"Changed range selection of chart with ID \" + event.chartId);\n  updateTitle(gridApi, event.chartId);\n}\n\nfunction onChartOptionsChanged(event) {\n  console.log(\"Changed options of chart with ID \" + event.chartId);\n}\n\nfunction updateTitle(api, chartId) {\n  const cellRange = api.getCellRanges()[1];\n  if (!cellRange) return;\n  const columnCount = cellRange.columns.length;\n  const rowCount = cellRange.endRow.rowIndex - cellRange.startRow.rowIndex + 1;\n  const subtitle = `Using series data from ${columnCount} column(s) and ${rowCount} row(s)`;\n\n  api.updateChart({\n    type: \"rangeChartUpdate\",\n    chartId: chartId,\n    chartThemeOverrides: {\n      common: {\n        subtitle: { text: subtitle },\n      },\n    },\n  });\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(\n    gridDiv,\n    gridOptions,\n  ); /** DARK INTEGRATED START **/\n  const isInitialModeDark =\n    document.documentElement.dataset.agThemeMode?.includes(\"dark\");\n\n  const updateChartThemes = (isDark) => {\n    const themes = [\n      \"ag-default\",\n      \"ag-material\",\n      \"ag-sheets\",\n      \"ag-polychroma\",\n      \"ag-vivid\",\n    ];\n    const currentThemes = gridApi.getGridOption(\"chartThemes\");\n    const customTheme =\n      currentThemes &&\n      currentThemes.some((theme) => theme.startsWith(\"my-custom-theme\"));\n\n    let modifiedThemes = customTheme\n      ? isDark\n        ? [\"my-custom-theme-dark\", \"my-custom-theme-light\"]\n        : [\"my-custom-theme-light\", \"my-custom-theme-dark\"]\n      : Array.from(\n          new Set(themes.map((theme) => theme + (isDark ? \"-dark\" : \"\"))),\n        );\n\n    // updating the 'chartThemes' grid option will cause the chart to reactively update!\n    gridApi.setGridOption(\"chartThemes\", modifiedThemes);\n  };\n\n  // update chart themes when example first loads\n  let initialSet = false;\n  const maxTries = 5;\n  let tries = 0;\n  const trySetInitial = (delay) => {\n    if (gridApi) {\n      initialSet = true;\n      updateChartThemes(isInitialModeDark);\n    } else {\n      if (tries < maxTries) {\n        setTimeout(() => trySetInitial(), 250);\n        tries++;\n      }\n    }\n  };\n  trySetInitial(0);\n\n  const handleColorSchemeChange = (event) => {\n    const { darkMode } = event.detail;\n    updateChartThemes(darkMode);\n  };\n\n  // listen for user-triggered dark mode changes (not removing listener is fine here!)\n  document.addEventListener(\"color-scheme-change\", handleColorSchemeChange);\n  /** DARK INTEGRATED END **/\n\n  fetch(\"https://www.ag-grid.com/example-assets/weather-se-england.json\")\n    .then((response) => response.json())\n    .then(function (data) {\n      gridApi.setGridOption(\"rowData\", data);\n    });\n});\n","index.html":"<div class=\"wrapper\">\n    <div id=\"myGrid\" class=\"my-grid\"></div>\n    <div id=\"myChart\" class=\"my-chart\"></div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0","ag-charts-community":"latest","ag-charts-enterprise":"latest"}}}