{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["medalCellRenderer.js","updateCellRenderer.js","main.js"],"styleFiles":[],"files":{"medalCellRenderer.js":"\nclass MedalCellRenderer  {\n     eGui;\n\n    init(params) {\n        console.log('renderer created');\n        this.eGui = document.createElement('span');\n        this.updateDisplayValue(params);\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n\n    refresh(params) {\n        console.log('renderer refreshed');\n        this.updateDisplayValue(params);\n        return true;\n    }\n\n     updateDisplayValue(params) {\n        this.eGui.textContent = new Array(params.value).fill('#').join('');\n    }\n}\n","updateCellRenderer.js":"\nclass UpdateCellRenderer  {\n     eGui;\n     params;\n\n    init(params) {\n        this.eGui = document.createElement('div');\n        this.eGui.innerHTML = '<button>Update Data</button>';\n        this.eGui.addEventListener('click', () => this.onClick());\n        this.params = params;\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n\n    refresh() {\n        return false;\n    }\n\n    onClick() {\n        const { node } = this.params;\n        const { gold, silver, bronze } = node.data;\n        node.updateData({\n            ...node.data,\n            gold: gold + 1,\n            silver: silver + 1,\n            bronze: bronze + 1,\n        });\n    }\n}\n","main.js":"let gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    { field: \"athlete\" },\n    { field: \"year\" },\n    { field: \"gold\", cellRenderer: MedalCellRenderer },\n    { field: \"silver\", cellRenderer: MedalCellRenderer },\n    { field: \"bronze\", cellRenderer: MedalCellRenderer },\n    { cellRenderer: UpdateCellRenderer },\n  ],\n  defaultColDef: {\n    flex: 1,\n    minWidth: 100,\n  },\n};\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/small-olympic-winners.json\")\n    .then((response) => response.json())\n    .then((data) => {\n      gridApi.setGridOption(\"rowData\", data);\n    });\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%; width: 100%\"></div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}