{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"main.ts","styleFiles":[],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n\n.number {\n    text-align: right;\n}\n","data.ts":"const MIN_BOOK_COUNT = 10;\nconst MAX_BOOK_COUNT = 20;\n\nconst MIN_TRADE_COUNT = 1;\nconst MAX_TRADE_COUNT = 10;\n\nconst products = [\n    'Palm Oil',\n    'Rubber',\n    'Wool',\n    'Amber',\n    'Copper',\n    'Lead',\n    'Zinc',\n    'Tin',\n    'Aluminium',\n    'Aluminium Alloy',\n    'Nickel',\n    'Cobalt',\n    'Molybdenum',\n    'Recycled Steel',\n    'Corn',\n    'Oats',\n    'Rough Rice',\n    'Soybeans',\n    'Rapeseed',\n    'Soybean Meal',\n    'Soybean Oil',\n    'Wheat',\n    'Milk',\n    'Coca',\n    'Coffee C',\n    'Cotton No.2',\n    'Sugar No.11',\n    'Sugar No.14',\n];\n\nconst portfolios = ['Aggressive', 'Defensive', 'Income', 'Speculative', 'Hybrid'];\n\n// start the book id's and trade id's at some future random number,\n// looks more realistic than starting them at 0\nlet nextBookId = 62472;\nlet nextTradeId = 24287;\n\n// a list of the data, that we modify as we go. if you are using an immutable\n// data store (such as Redux) then this would be similar to your store of data.\nexport var globalRowData: any[];\n\n// build up the test data\nexport function getData() {\n    globalRowData = [];\n    for (let i = 0; i < products.length; i++) {\n        const product = products[i];\n        for (let j = 0; j < portfolios.length; j++) {\n            const portfolio = portfolios[j];\n\n            const bookCount = randomBetween(MAX_BOOK_COUNT, MIN_BOOK_COUNT);\n\n            for (let k = 0; k < bookCount; k++) {\n                const book = createBookName();\n                const tradeCount = randomBetween(MAX_TRADE_COUNT, MIN_TRADE_COUNT);\n                for (let l = 0; l < tradeCount; l++) {\n                    const trade = createTradeRecord(product, portfolio, book);\n                    globalRowData.push(trade);\n                }\n            }\n        }\n    }\n}\n\nfunction randomBetween(min: number, max: number) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction createTradeRecord(product: string, portfolio: string, book: string) {\n    const current = Math.floor(Math.random() * 100000) + 100;\n    const previous = current + Math.floor(Math.random() * 10000) - 2000;\n    const trade = {\n        product: product,\n        portfolio: portfolio,\n        book: book,\n        trade: createTradeId(),\n        submitterID: randomBetween(10, 1000),\n        submitterDealID: randomBetween(10, 1000),\n        dealType: Math.random() < 0.2 ? 'Physical' : 'Financial',\n        bidFlag: Math.random() < 0.5 ? 'Buy' : 'Sell',\n        current: current,\n        previous: previous,\n        pl1: randomBetween(100, 1000),\n        pl2: randomBetween(100, 1000),\n        gainDx: randomBetween(100, 1000),\n        sxPx: randomBetween(100, 1000),\n        _99Out: randomBetween(100, 1000),\n    };\n    return trade;\n}\n\nfunction createBookName() {\n    nextBookId++;\n    return 'GL-' + nextBookId;\n}\n\nfunction createTradeId() {\n    nextTradeId++;\n    return nextTradeId;\n}\n","main.ts":"import {\n  createApp,\n  defineComponent,\n  onBeforeMount,\n  ref,\n  shallowRef,\n} from \"vue\";\nimport { AgGridVue } from \"ag-grid-vue3\";\nimport \"./styles.css\";\nimport {\n  AsyncTransactionsFlushedEvent,\n  CellStyleModule,\n  ClientSideRowModelApiModule,\n  ClientSideRowModelModule,\n  ColDef,\n  ColGroupDef,\n  GetRowIdFunc,\n  GetRowIdParams,\n  GridApi,\n  GridOptions,\n  GridReadyEvent,\n  HighlightChangesModule,\n  ModuleRegistry,\n  ValidationModule,\n  ValueFormatterParams,\n  createGrid,\n} from \"ag-grid-community\";\nimport { RowGroupingModule, RowGroupingPanelModule } from \"ag-grid-enterprise\";\nimport { getData, globalRowData } from \"./data\";\nModuleRegistry.registerModules([\n  ClientSideRowModelApiModule,\n  CellStyleModule,\n  ClientSideRowModelModule,\n  RowGroupingModule,\n  RowGroupingPanelModule,\n  HighlightChangesModule,\n  ValidationModule /* Development Only */,\n]);\n\nconst UPDATE_COUNT = 20;\n\nfunction numberCellFormatter(params: ValueFormatterParams) {\n  return Math.floor(params.value)\n    .toString()\n    .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\");\n}\n\nfunction startFeed(api: GridApi) {\n  let count = 1;\n  setInterval(() => {\n    const thisCount = count++;\n    const updatedIndexes: any = {};\n    const newItems: any[] = [];\n    for (let i = 0; i < UPDATE_COUNT; i++) {\n      // pick one index at random\n      const index = Math.floor(Math.random() * globalRowData.length);\n      // dont do same index twice, otherwise two updates for same row in one transaction\n      if (updatedIndexes[index]) {\n        continue;\n      }\n      const itemToUpdate = globalRowData[index];\n      const newItem: any = copyObject(itemToUpdate);\n      // copy previous to current value\n      newItem.previous = newItem.current;\n      // then create new current value\n      newItem.current = Math.floor(Math.random() * 100000) + 100;\n      newItems.push(newItem);\n    }\n    const resultCallback = () => {\n      console.log(\"transactionApplied() - \" + thisCount);\n    };\n    api.applyTransactionAsync({ update: newItems }, resultCallback);\n    console.log(\"applyTransactionAsync() - \" + thisCount);\n  }, 500);\n}\n\n// makes a copy of the original and merges in the new values\nfunction copyObject(object: any) {\n  // start with new object\n  const newObject: any = {};\n  // copy in the old values\n  Object.keys(object).forEach((key) => {\n    newObject[key] = object[key];\n  });\n  return newObject;\n}\n\nconst VueExample = defineComponent({\n  template: `\n        <div style=\"height: 100%\">\n                <div class=\"example-wrapper\">\n      <div style=\"margin-bottom: 5px\">\n        <button v-on:click=\"onFlushTransactions()\">Flush Transactions</button>\n        <span id=\"eMessage\"></span>\n      </div>\n      <ag-grid-vue\n        style=\"width: 100%; height: 100%;\"\n        @grid-ready=\"onGridReady\"\n        :columnDefs=\"columnDefs\"\n        :suppressAggFuncInHeader=\"true\"\n        :rowGroupPanelShow=\"rowGroupPanelShow\"\n        :asyncTransactionWaitMillis=\"asyncTransactionWaitMillis\"\n        :getRowId=\"getRowId\"\n        :defaultColDef=\"defaultColDef\"\n        :autoGroupColumnDef=\"autoGroupColumnDef\"\n        :rowData=\"rowData\"\n        @async-transactions-flushed=\"onAsyncTransactionsFlushed\"></ag-grid-vue>\n      </div>\n        </div>\n    `,\n  components: {\n    \"ag-grid-vue\": AgGridVue,\n  },\n  setup(props) {\n    const gridApi = shallowRef<GridApi | null>(null);\n    const columnDefs = ref<ColDef[]>([\n      // these are the row groups, so they are all hidden (they are show in the group column)\n      {\n        headerName: \"Product\",\n        field: \"product\",\n        enableRowGroup: true,\n        rowGroupIndex: 0,\n        hide: true,\n      },\n      {\n        headerName: \"Portfolio\",\n        field: \"portfolio\",\n        enableRowGroup: true,\n        rowGroupIndex: 1,\n        hide: true,\n      },\n      {\n        headerName: \"Book\",\n        field: \"book\",\n        enableRowGroup: true,\n        rowGroupIndex: 2,\n        hide: true,\n      },\n      { headerName: \"Trade\", field: \"trade\", width: 100 },\n      // all the other columns (visible and not grouped)\n      {\n        headerName: \"Current\",\n        field: \"current\",\n        width: 200,\n        aggFunc: \"sum\",\n        enableValue: true,\n        cellClass: \"number\",\n        valueFormatter: numberCellFormatter,\n        cellRenderer: \"agAnimateShowChangeCellRenderer\",\n      },\n      {\n        headerName: \"Previous\",\n        field: \"previous\",\n        width: 200,\n        aggFunc: \"sum\",\n        enableValue: true,\n        cellClass: \"number\",\n        valueFormatter: numberCellFormatter,\n        cellRenderer: \"agAnimateShowChangeCellRenderer\",\n      },\n      {\n        headerName: \"Deal Type\",\n        field: \"dealType\",\n        enableRowGroup: true,\n      },\n      {\n        headerName: \"Bid\",\n        field: \"bidFlag\",\n        enableRowGroup: true,\n        width: 100,\n      },\n      {\n        headerName: \"PL 1\",\n        field: \"pl1\",\n        width: 200,\n        aggFunc: \"sum\",\n        enableValue: true,\n        cellClass: \"number\",\n        valueFormatter: numberCellFormatter,\n        cellRenderer: \"agAnimateShowChangeCellRenderer\",\n      },\n      {\n        headerName: \"PL 2\",\n        field: \"pl2\",\n        width: 200,\n        aggFunc: \"sum\",\n        enableValue: true,\n        cellClass: \"number\",\n        valueFormatter: numberCellFormatter,\n        cellRenderer: \"agAnimateShowChangeCellRenderer\",\n      },\n      {\n        headerName: \"Gain-DX\",\n        field: \"gainDx\",\n        width: 200,\n        aggFunc: \"sum\",\n        enableValue: true,\n        cellClass: \"number\",\n        valueFormatter: numberCellFormatter,\n        cellRenderer: \"agAnimateShowChangeCellRenderer\",\n      },\n      {\n        headerName: \"SX / PX\",\n        field: \"sxPx\",\n        width: 200,\n        aggFunc: \"sum\",\n        enableValue: true,\n        cellClass: \"number\",\n        valueFormatter: numberCellFormatter,\n        cellRenderer: \"agAnimateShowChangeCellRenderer\",\n      },\n      {\n        headerName: \"99 Out\",\n        field: \"_99Out\",\n        width: 200,\n        aggFunc: \"sum\",\n        enableValue: true,\n        cellClass: \"number\",\n        valueFormatter: numberCellFormatter,\n        cellRenderer: \"agAnimateShowChangeCellRenderer\",\n      },\n      {\n        headerName: \"Submitter ID\",\n        field: \"submitterID\",\n        width: 200,\n        aggFunc: \"sum\",\n        enableValue: true,\n        cellClass: \"number\",\n        valueFormatter: numberCellFormatter,\n        cellRenderer: \"agAnimateShowChangeCellRenderer\",\n      },\n      {\n        headerName: \"Submitted Deal ID\",\n        field: \"submitterDealID\",\n        width: 200,\n        aggFunc: \"sum\",\n        enableValue: true,\n        cellClass: \"number\",\n        valueFormatter: numberCellFormatter,\n        cellRenderer: \"agAnimateShowChangeCellRenderer\",\n      },\n    ]);\n    const rowGroupPanelShow = ref<\"always\" | \"onlyWhenGrouping\" | \"never\">(\n      \"always\",\n    );\n    const asyncTransactionWaitMillis = ref(4000);\n    const getRowId = ref<GetRowIdFunc>((params: GetRowIdParams) =>\n      String(params.data.trade),\n    );\n    const defaultColDef = ref<ColDef>({\n      width: 120,\n    });\n    const autoGroupColumnDef = ref<ColDef>({\n      width: 250,\n    });\n    const rowData = ref<any[]>(null);\n\n    function onAsyncTransactionsFlushed(e: AsyncTransactionsFlushedEvent) {\n      console.log(\n        \"========== onAsyncTransactionsFlushed: applied \" +\n          e.results.length +\n          \" transactions\",\n      );\n    }\n    function onFlushTransactions() {\n      gridApi.value!.flushAsyncTransactions();\n    }\n    const onGridReady = (params: GridReadyEvent) => {\n      gridApi.value = params.api;\n\n      getData();\n      params.api.setGridOption(\"rowData\", globalRowData);\n      startFeed(params.api);\n    };\n\n    return {\n      gridApi,\n      columnDefs,\n      rowGroupPanelShow,\n      asyncTransactionWaitMillis,\n      getRowId,\n      defaultColDef,\n      autoGroupColumnDef,\n      rowData,\n      onGridReady,\n      onAsyncTransactionsFlushed,\n      onFlushTransactions,\n    };\n  },\n});\n\ncreateApp(VueExample).mount(\"#app\");\n","index.html":"<div class=\"example-wrapper\">\n    <div style=\"margin-bottom: 5px\">\n        <button onclick=\"onFlushTransactions()\">Flush Transactions</button>\n        <span id=\"eMessage\"></span>\n    </div>\n    <div id=\"myGrid\"></div>\n</div>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        defaultExtension: 'js',\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            vue: 'npm:vue@3.5.0/dist/vue.esm-browser.js',\n            '@vue/reactivity': 'npm:@vue/reactivity@3.0.0/dist/reactivity.esm-browser.prod.js',\n\n            // vue class component\n            'vue-class-component': 'npm:vue-class-component@^8.0.0-beta.3/dist/vue-class-component.cjs.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            'css.js': {\n                defaultExtension: 'js',\n            },\n            vue: {\n                defaultExtension: 'js',\n            },\n            app: {\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-vue3': {\n                main: './dist/main.umd.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"vue":"^3.5.0","ag-grid-vue3":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}