{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["customDragAndDropImage.js","main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".my-custom-drag-and-drop-cover {\n    padding: 2rem;\n    color: white;\n    cursor: move;\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    border-radius: 0.5rem;\n}\n","customDragAndDropImage.js":"\n\n\n\n\nclass CustomDragAndDropImage {\n     params;\n     eGui;\n     eIcon;\n     eLabel;\n\n    init(params) {\n        this.params = params;\n        const div = document.createElement('div');\n        const eLabel = (this.eLabel = document.createElement('div'));\n        const eIcon = (this.eIcon = document.createElement('i'));\n\n        this.eGui = div;\n\n        div.style.setProperty('background-color', params.accentColour);\n\n        div.appendChild(eIcon);\n        div.appendChild(eLabel);\n        div.classList.add('my-custom-drag-and-drop-cover');\n        eIcon.classList.add('fa-2x', 'fas');\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n\n    setLabel(label) {\n        this.eLabel.innerHTML = label;\n    }\n\n    setIcon(icon) {\n        const { eIcon, params } = this;\n        const { dragSource } = params;\n\n        if (!eIcon || !dragSource) {\n            return;\n        }\n\n        if (!icon) {\n            icon = dragSource.getDefaultIconName ? dragSource.getDefaultIconName() : 'notAllowed';\n        }\n\n        if (icon === 'hide' && params.api.getGridOption('suppressDragLeaveHidesColumns')) {\n            return;\n        }\n\n        eIcon.classList.toggle('fa-hand-point-left', icon === 'left');\n        eIcon.classList.toggle('fa-hand-point-right', icon === 'right');\n        eIcon.classList.toggle('fa-ban', icon === 'notAllowed');\n        eIcon.classList.toggle('fa-mask', icon === 'hide');\n        eIcon.classList.toggle('fa-thumbtack', icon === 'pinned');\n        eIcon.classList.toggle('fa-walking', icon === 'move');\n    }\n}\n","main.js":"let gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    { field: \"athlete\" },\n    { field: \"country\" },\n    { field: \"year\", width: 100 },\n    { field: \"date\" },\n    { field: \"sport\" },\n    { field: \"gold\" },\n    { field: \"silver\" },\n    { field: \"bronze\" },\n  ],\n\n  defaultColDef: {\n    width: 170,\n    filter: true,\n  },\n  dragAndDropImageComponent: CustomDragAndDropImage,\n  dragAndDropImageComponentParams: {\n    accentColour: \"SlateGray\",\n  },\n};\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then((data) => gridApi.setGridOption(\"rowData\", data));\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}},"extras":["fontawesome"]}