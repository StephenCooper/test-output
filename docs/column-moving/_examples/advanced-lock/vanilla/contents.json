{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["controlsCellRenderer.js","main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n\n.locked-col {\n    background-color: #999999;\n    border: 1px solid #aaa;\n}\n\n.legend-bar {\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\n    font-size: 13px;\n    margin-bottom: 1rem;\n}\n\n.legend-box {\n    width: 15px;\n    height: 15px;\n    display: inline-block;\n    vertical-align: text-top;\n}\n\n.ag-cell button {\n    padding: 0.25rem;\n    margin-right: 0.25rem;\n}\n","controlsCellRenderer.js":"\n// simple cell renderer returns dummy buttons. in a real application, a component would probably\n// be used with operations tied to the buttons. in this example, the cell renderer is just for\n// display purposes.\nclass ControlsCellRenderer  {\n    eGui;\n\n    init() {\n        this.eGui = document.createElement('div');\n\n        const button = document.createElement('button');\n        button.textContent = 'Action';\n        this.eGui.appendChild(button);\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n\n    refresh() {\n        return false;\n    }\n}\n","main.js":"const columnDefs = [\n  {\n    lockPosition: \"left\",\n    cellRenderer: ControlsCellRenderer,\n    cellClass: \"locked-col\",\n    width: 120,\n    suppressNavigable: true,\n  },\n  { field: \"athlete\" },\n  { field: \"age\" },\n  { field: \"country\" },\n  { field: \"year\" },\n  { field: \"date\" },\n  { field: \"sport\" },\n  { field: \"gold\" },\n  { field: \"silver\" },\n  { field: \"bronze\" },\n  { field: \"total\" },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n  columnDefs: columnDefs,\n  defaultColDef: {\n    width: 150,\n  },\n  onColumnPinned: onColumnPinned,\n  suppressDragLeaveHidesColumns: true,\n};\n\nfunction onColumnPinned(event) {\n  const allCols = event.api.getAllGridColumns();\n\n  if (event.pinned !== \"right\") {\n    const allFixedCols = allCols.filter((col) => col.getColDef().lockPosition);\n    event.api.setColumnsPinned(allFixedCols, event.pinned);\n  }\n}\n\nfunction onPinAthleteLeft() {\n  gridApi.applyColumnState({\n    state: [{ colId: \"athlete\", pinned: \"left\" }],\n  });\n}\nfunction onPinAthleteRight() {\n  gridApi.applyColumnState({\n    state: [{ colId: \"athlete\", pinned: \"right\" }],\n  });\n}\n\nfunction onUnpinAthlete() {\n  gridApi.applyColumnState({\n    state: [{ colId: \"athlete\", pinned: null }],\n  });\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then((data) => gridApi.setGridOption(\"rowData\", data));\n});\n","index.html":"<div class=\"example-wrapper\">\n    <div class=\"legend-bar\">\n        <button onclick=\"onPinAthleteLeft()\">Pin Athlete Left</button>\n        <button onclick=\"onPinAthleteRight()\">Pin Athlete Right</button>\n        <button onclick=\"onUnpinAthlete()\">Un-Pin Athlete</button>\n        &nbsp;&nbsp;&nbsp;&nbsp;\n        <span class=\"locked-col legend-box\"></span> Position Locked Column\n    </div>\n    <div id=\"myGrid\"></div>\n</div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}