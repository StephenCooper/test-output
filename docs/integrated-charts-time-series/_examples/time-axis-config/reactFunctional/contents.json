{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":true,"entryFileName":"index.jsx","mainFileName":"index.jsx","styleFiles":[],"files":{"style.css":".wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    height: 300px;\n    flex: none;\n}\n\n.my-chart {\n    height: 400px;\n    flex: none;\n}\n","data.jsx":"export async function getData(delay = 100) {\n    return new Promise((resolve) => setTimeout(() => resolve(data), delay));\n}\n\nconst data = [\n    { timestamp: 1600983900792, cpuUsage: 99 },\n    { timestamp: 1600983905792, cpuUsage: 83 },\n    { timestamp: 1600983912792, cpuUsage: 59 },\n    { timestamp: 1600983915792, cpuUsage: 70 },\n    { timestamp: 1600983921792, cpuUsage: 99 },\n    { timestamp: 1600983929792, cpuUsage: 74 },\n    { timestamp: 1600983930792, cpuUsage: 90 },\n    { timestamp: 1600983936792, cpuUsage: 96 },\n    { timestamp: 1600983942792, cpuUsage: 39 },\n    { timestamp: 1600983950792, cpuUsage: 39 },\n    { timestamp: 1600983955792, cpuUsage: 65 },\n    { timestamp: 1600983960792, cpuUsage: 100 },\n    { timestamp: 1600983965792, cpuUsage: 99 },\n    { timestamp: 1600983972792, cpuUsage: 39 },\n    { timestamp: 1600983974792, cpuUsage: 83 },\n    { timestamp: 1600983979792, cpuUsage: 42 },\n    { timestamp: 1600983982792, cpuUsage: 68 },\n    { timestamp: 1600983985792, cpuUsage: 81 },\n    { timestamp: 1600983992792, cpuUsage: 99 },\n    { timestamp: 1600983999792, cpuUsage: 81 },\n    { timestamp: 1600984004792, cpuUsage: 81 },\n    { timestamp: 1600984006792, cpuUsage: 57 },\n    { timestamp: 1600984009792, cpuUsage: 67 },\n    { timestamp: 1600984014792, cpuUsage: 49 },\n    { timestamp: 1600984017792, cpuUsage: 81 },\n    { timestamp: 1600984025792, cpuUsage: 42 },\n    { timestamp: 1600984029792, cpuUsage: 77 },\n    { timestamp: 1600984031792, cpuUsage: 58 },\n    { timestamp: 1600984036792, cpuUsage: 30 },\n    { timestamp: 1600984039792, cpuUsage: 52 },\n    { timestamp: 1600984043792, cpuUsage: 61 },\n    { timestamp: 1600984044792, cpuUsage: 45 },\n    { timestamp: 1600984048792, cpuUsage: 47 },\n    { timestamp: 1600984049792, cpuUsage: 66 },\n    { timestamp: 1600984050792, cpuUsage: 46 },\n    { timestamp: 1600984053792, cpuUsage: 36 },\n    { timestamp: 1600984061792, cpuUsage: 77 },\n    { timestamp: 1600984062792, cpuUsage: 39 },\n    { timestamp: 1600984068792, cpuUsage: 39 },\n    { timestamp: 1600984076792, cpuUsage: 49 },\n    { timestamp: 1600984084792, cpuUsage: 96 },\n    { timestamp: 1600984086792, cpuUsage: 31 },\n    { timestamp: 1600984092792, cpuUsage: 67 },\n    { timestamp: 1600984098792, cpuUsage: 32 },\n    { timestamp: 1600984104792, cpuUsage: 92 },\n    { timestamp: 1600984110792, cpuUsage: 81 },\n    { timestamp: 1600984115792, cpuUsage: 90 },\n    { timestamp: 1600984117792, cpuUsage: 47 },\n    { timestamp: 1600984123792, cpuUsage: 97 },\n    { timestamp: 1600984128792, cpuUsage: 72 },\n    { timestamp: 1600984131792, cpuUsage: 98 },\n    { timestamp: 1600984137792, cpuUsage: 74 },\n    { timestamp: 1600984145792, cpuUsage: 34 },\n    { timestamp: 1600984151792, cpuUsage: 78 },\n    { timestamp: 1600984152792, cpuUsage: 50 },\n    { timestamp: 1600984160792, cpuUsage: 77 },\n    { timestamp: 1600984165792, cpuUsage: 99 },\n    { timestamp: 1600984171792, cpuUsage: 89 },\n    { timestamp: 1600984175792, cpuUsage: 61 },\n    { timestamp: 1600984182792, cpuUsage: 53 },\n    { timestamp: 1600984187792, cpuUsage: 56 },\n    { timestamp: 1600984193792, cpuUsage: 73 },\n    { timestamp: 1600984198792, cpuUsage: 69 },\n    { timestamp: 1600984205792, cpuUsage: 33 },\n    { timestamp: 1600984213792, cpuUsage: 65 },\n    { timestamp: 1600984219792, cpuUsage: 60 },\n    { timestamp: 1600984226792, cpuUsage: 95 },\n    { timestamp: 1600984232792, cpuUsage: 86 },\n    { timestamp: 1600984236792, cpuUsage: 38 },\n    { timestamp: 1600984238792, cpuUsage: 67 },\n    { timestamp: 1600984243792, cpuUsage: 83 },\n    { timestamp: 1600984250792, cpuUsage: 99 },\n    { timestamp: 1600984253792, cpuUsage: 41 },\n    { timestamp: 1600984260792, cpuUsage: 32 },\n    { timestamp: 1600984263792, cpuUsage: 61 },\n    { timestamp: 1600984267792, cpuUsage: 34 },\n    { timestamp: 1600984271792, cpuUsage: 80 },\n    { timestamp: 1600984276792, cpuUsage: 94 },\n    { timestamp: 1600984277792, cpuUsage: 34 },\n    { timestamp: 1600984278792, cpuUsage: 80 },\n    { timestamp: 1600984282792, cpuUsage: 84 },\n    { timestamp: 1600984287792, cpuUsage: 31 },\n    { timestamp: 1600984291792, cpuUsage: 71 },\n    { timestamp: 1600984297792, cpuUsage: 74 },\n    { timestamp: 1600984299792, cpuUsage: 99 },\n    { timestamp: 1600984302792, cpuUsage: 82 },\n    { timestamp: 1600984303792, cpuUsage: 36 },\n    { timestamp: 1600984311792, cpuUsage: 97 },\n    { timestamp: 1600984319792, cpuUsage: 97 },\n    { timestamp: 1600984327792, cpuUsage: 62 },\n    { timestamp: 1600984330792, cpuUsage: 97 },\n    { timestamp: 1600984333792, cpuUsage: 34 },\n    { timestamp: 1600984338792, cpuUsage: 67 },\n    { timestamp: 1600984342792, cpuUsage: 99 },\n    { timestamp: 1600984343792, cpuUsage: 77 },\n    { timestamp: 1600984349792, cpuUsage: 51 },\n    { timestamp: 1600984353792, cpuUsage: 75 },\n    { timestamp: 1600984356792, cpuUsage: 41 },\n    { timestamp: 1600984360792, cpuUsage: 81 },\n    { timestamp: 1600984380792, cpuUsage: 61 },\n    { timestamp: 1600984400792, cpuUsage: 71 },\n    { timestamp: 1600984410792, cpuUsage: 77 },\n    { timestamp: 1600984420792, cpuUsage: 62 },\n    { timestamp: 1600984429792, cpuUsage: 55 },\n    { timestamp: 1600984430792, cpuUsage: 45 },\n    { timestamp: 1600984432792, cpuUsage: 50 },\n    { timestamp: 1600984436792, cpuUsage: 60 },\n    { timestamp: 1600984439792, cpuUsage: 69 },\n];\n","index.jsx":"\"use client\";\n\nimport React, {\n  useCallback,\n  useMemo,\n  useRef,\n  useState,\n  useEffect,\n  StrictMode,\n} from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"./style.css\";\nimport { getData } from \"./data.jsx\";\nimport { AgChartsEnterpriseModule } from \"ag-charts-enterprise\";\nimport {\n  ClientSideRowModelModule,\n  ModuleRegistry,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\nimport {\n  ColumnMenuModule,\n  ContextMenuModule,\n  IntegratedChartsModule,\n  RowGroupingModule,\n} from \"ag-grid-enterprise\";\nModuleRegistry.registerModules([\n  ClientSideRowModelModule,\n  IntegratedChartsModule.with(AgChartsEnterpriseModule),\n  ColumnMenuModule,\n  ContextMenuModule,\n  RowGroupingModule,\n  ValidationModule /* Development Only */,\n]);\n\nconst formatTime = (date) => {\n  return Intl.DateTimeFormat(\"en-GB\", {\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n  }).format(new Date(date));\n};\n\nconst GridExample = () => {\n  const gridRef = useRef();\n  const containerStyle = useMemo(() => ({ width: \"100%\", height: \"100%\" }), []);\n  const gridStyle = useMemo(() => ({ height: \"100%\", width: \"100%\" }), []);\n\n  const [columnDefs, setColumnDefs] = useState([\n    { field: \"timestamp\", chartDataType: \"time\" },\n    { field: \"cpuUsage\" },\n  ]);\n  const defaultColDef = useMemo(() => {\n    return { flex: 1 };\n  }, []);\n  const popupParent = useMemo(() => {\n    return document.body;\n  }, []);\n  const chartThemeOverrides = useMemo(() => {\n    return {\n      area: {\n        title: {\n          enabled: true,\n          text: \"CPU Usage\",\n        },\n        navigator: {\n          enabled: true,\n          height: 20,\n          spacing: 25,\n        },\n        axes: {\n          time: {\n            label: {\n              rotation: 315,\n              format: \"%H:%M\",\n            },\n          },\n          number: {\n            label: {\n              formatter: (params) => {\n                // charts typings\n                return params.value + \"%\";\n              },\n            },\n          },\n        },\n        series: {\n          tooltip: {\n            renderer: ({ datum, xKey, yKey }) => {\n              return {\n                content: `${formatTime(datum[xKey])}: ${datum[yKey]}%`,\n              };\n            },\n          },\n        },\n      },\n    };\n  }, []);\n  const chartToolPanelsDef = useMemo(() => {\n    return {\n      panels: [\"data\", \"format\"],\n    };\n  }, []);\n\n  const onGridReady = useCallback((params) => {\n    getData().then((rowData) => params.api.setGridOption(\"rowData\", rowData));\n  }, []);\n  /** DARK INTEGRATED START **/ const [tick, setTick] = useState(0);\n  useEffect(() => {\n    setTick(1);\n    const isInitialModeDark =\n      document.documentElement.dataset.agThemeMode?.includes(\"dark\");\n\n    const updateChartThemes = (isDark) => {\n      const themes = [\n        \"ag-default\",\n        \"ag-material\",\n        \"ag-sheets\",\n        \"ag-polychroma\",\n        \"ag-vivid\",\n      ];\n      const currentThemes = gridRef.current?.api.getGridOption(\"chartThemes\");\n      const customTheme =\n        currentThemes &&\n        currentThemes.some((theme) => theme.startsWith(\"my-custom-theme\"));\n\n      let modifiedThemes = customTheme\n        ? isDark\n          ? [\"my-custom-theme-dark\", \"my-custom-theme-light\"]\n          : [\"my-custom-theme-light\", \"my-custom-theme-dark\"]\n        : Array.from(\n            new Set(themes.map((theme) => theme + (isDark ? \"-dark\" : \"\"))),\n          );\n\n      // updating the 'chartThemes' grid option will cause the chart to reactively update!\n      gridRef.current?.api.setGridOption(\"chartThemes\", modifiedThemes);\n    };\n\n    // update chart themes when example first loads\n    let initialSet = false;\n    const maxTries = 5;\n    let tries = 0;\n    const trySetInitial = (delay) => {\n      if (gridRef.current?.api) {\n        initialSet = true;\n        updateChartThemes(isInitialModeDark);\n      } else {\n        if (tries < maxTries) {\n          setTimeout(() => trySetInitial(), 250);\n          tries++;\n        }\n      }\n    };\n    trySetInitial(0);\n\n    const handleColorSchemeChange = (event) => {\n      const { darkMode } = event.detail;\n      updateChartThemes(darkMode);\n    };\n\n    // listen for user-triggered dark mode changes (not removing listener is fine here!)\n    document.addEventListener(\"color-scheme-change\", handleColorSchemeChange);\n  }, [gridRef.current]); /** DARK INTEGRATED END **/\n\n  const onFirstDataRendered = useCallback((params) => {\n    params.api.createRangeChart({\n      chartContainer: document.querySelector(\"#myChart\"),\n      cellRange: {\n        columns: [\"timestamp\", \"cpuUsage\"],\n      },\n      suppressChartRanges: true,\n      chartType: \"area\",\n    });\n  }, []);\n\n  return (\n    <div style={containerStyle}>\n      <div className=\"wrapper\">\n        <div style={gridStyle} className=\"my-grid\">\n          <AgGridReact\n            ref={gridRef}\n            columnDefs={columnDefs}\n            defaultColDef={defaultColDef}\n            cellSelection={true}\n            popupParent={popupParent}\n            enableCharts={true}\n            chartThemeOverrides={chartThemeOverrides}\n            chartToolPanelsDef={chartToolPanelsDef}\n            onGridReady={onGridReady}\n            onFirstDataRendered={onFirstDataRendered}\n          />\n        </div>\n        <div id=\"myChart\" className=\"my-chart\"></div>\n      </div>\n    </div>\n  );\n};\n\nconst root = createRoot(document.getElementById(\"root\"));\nroot.render(\n  <StrictMode>\n    <GridExample />\n  </StrictMode>,\n);\nwindow.tearDownExample = () => root.unmount();\n","index.html":"<div class=\"wrapper\">\n    <div id=\"myGrid\" class=\"my-grid\"></div>\n    <div id=\"myChart\" class=\"my-chart\"></div>\n</div>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            jsx: 'react',\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            // react\n            react: 'npm:react@18.2.0',\n            'react-dom': 'npm:react-dom@18.2.0',\n            'react-dom/client': 'npm:react-dom@18.2.0',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            css: {},\n            react: {\n                main: './umd/react.production.min.js',\n            },\n            'react-dom': {\n                main: './umd/react-dom.production.min.js',\n            },\n            'react-dom/server': {\n                main: '../umd/react-dom-server.browser.production.min.js',\n            },\n            app: {\n                main: './index.jsx',\n                defaultExtension: 'jsx',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"react":"18","react-dom":"18","@types/react":"18","@types/react-dom":"18","ag-grid-react":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0","ag-charts-community":"latest","ag-charts-enterprise":"latest"}}}