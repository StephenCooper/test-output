{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":true,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["data.js","main.js"],"styleFiles":["style.css"],"files":{"style.css":".wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    height: 300px;\n    flex: none;\n}\n\n.my-chart {\n    height: 400px;\n    flex: none;\n}\n","data.js":"async function getData(delay = 100) {\n    return new Promise((resolve) => setTimeout(() => resolve(data), delay));\n}\n\nconst data = [\n    { timestamp: 1600983900792, cpuUsage: 99 },\n    { timestamp: 1600983905792, cpuUsage: 83 },\n    { timestamp: 1600983912792, cpuUsage: 59 },\n    { timestamp: 1600983915792, cpuUsage: 70 },\n    { timestamp: 1600983921792, cpuUsage: 99 },\n    { timestamp: 1600983929792, cpuUsage: 74 },\n    { timestamp: 1600983930792, cpuUsage: 90 },\n    { timestamp: 1600983936792, cpuUsage: 96 },\n    { timestamp: 1600983942792, cpuUsage: 39 },\n    { timestamp: 1600983950792, cpuUsage: 39 },\n    { timestamp: 1600983955792, cpuUsage: 65 },\n    { timestamp: 1600983960792, cpuUsage: 100 },\n    { timestamp: 1600983965792, cpuUsage: 99 },\n    { timestamp: 1600983972792, cpuUsage: 39 },\n    { timestamp: 1600983974792, cpuUsage: 83 },\n    { timestamp: 1600983979792, cpuUsage: 42 },\n    { timestamp: 1600983982792, cpuUsage: 68 },\n    { timestamp: 1600983985792, cpuUsage: 81 },\n    { timestamp: 1600983992792, cpuUsage: 99 },\n    { timestamp: 1600983999792, cpuUsage: 81 },\n    { timestamp: 1600984004792, cpuUsage: 81 },\n    { timestamp: 1600984006792, cpuUsage: 57 },\n    { timestamp: 1600984009792, cpuUsage: 67 },\n    { timestamp: 1600984014792, cpuUsage: 49 },\n    { timestamp: 1600984017792, cpuUsage: 81 },\n    { timestamp: 1600984025792, cpuUsage: 42 },\n    { timestamp: 1600984029792, cpuUsage: 77 },\n    { timestamp: 1600984031792, cpuUsage: 58 },\n    { timestamp: 1600984036792, cpuUsage: 30 },\n    { timestamp: 1600984039792, cpuUsage: 52 },\n    { timestamp: 1600984043792, cpuUsage: 61 },\n    { timestamp: 1600984044792, cpuUsage: 45 },\n    { timestamp: 1600984048792, cpuUsage: 47 },\n    { timestamp: 1600984049792, cpuUsage: 66 },\n    { timestamp: 1600984050792, cpuUsage: 46 },\n    { timestamp: 1600984053792, cpuUsage: 36 },\n    { timestamp: 1600984061792, cpuUsage: 77 },\n    { timestamp: 1600984062792, cpuUsage: 39 },\n    { timestamp: 1600984068792, cpuUsage: 39 },\n    { timestamp: 1600984076792, cpuUsage: 49 },\n    { timestamp: 1600984084792, cpuUsage: 96 },\n    { timestamp: 1600984086792, cpuUsage: 31 },\n    { timestamp: 1600984092792, cpuUsage: 67 },\n    { timestamp: 1600984098792, cpuUsage: 32 },\n    { timestamp: 1600984104792, cpuUsage: 92 },\n    { timestamp: 1600984110792, cpuUsage: 81 },\n    { timestamp: 1600984115792, cpuUsage: 90 },\n    { timestamp: 1600984117792, cpuUsage: 47 },\n    { timestamp: 1600984123792, cpuUsage: 97 },\n    { timestamp: 1600984128792, cpuUsage: 72 },\n    { timestamp: 1600984131792, cpuUsage: 98 },\n    { timestamp: 1600984137792, cpuUsage: 74 },\n    { timestamp: 1600984145792, cpuUsage: 34 },\n    { timestamp: 1600984151792, cpuUsage: 78 },\n    { timestamp: 1600984152792, cpuUsage: 50 },\n    { timestamp: 1600984160792, cpuUsage: 77 },\n    { timestamp: 1600984165792, cpuUsage: 99 },\n    { timestamp: 1600984171792, cpuUsage: 89 },\n    { timestamp: 1600984175792, cpuUsage: 61 },\n    { timestamp: 1600984182792, cpuUsage: 53 },\n    { timestamp: 1600984187792, cpuUsage: 56 },\n    { timestamp: 1600984193792, cpuUsage: 73 },\n    { timestamp: 1600984198792, cpuUsage: 69 },\n    { timestamp: 1600984205792, cpuUsage: 33 },\n    { timestamp: 1600984213792, cpuUsage: 65 },\n    { timestamp: 1600984219792, cpuUsage: 60 },\n    { timestamp: 1600984226792, cpuUsage: 95 },\n    { timestamp: 1600984232792, cpuUsage: 86 },\n    { timestamp: 1600984236792, cpuUsage: 38 },\n    { timestamp: 1600984238792, cpuUsage: 67 },\n    { timestamp: 1600984243792, cpuUsage: 83 },\n    { timestamp: 1600984250792, cpuUsage: 99 },\n    { timestamp: 1600984253792, cpuUsage: 41 },\n    { timestamp: 1600984260792, cpuUsage: 32 },\n    { timestamp: 1600984263792, cpuUsage: 61 },\n    { timestamp: 1600984267792, cpuUsage: 34 },\n    { timestamp: 1600984271792, cpuUsage: 80 },\n    { timestamp: 1600984276792, cpuUsage: 94 },\n    { timestamp: 1600984277792, cpuUsage: 34 },\n    { timestamp: 1600984278792, cpuUsage: 80 },\n    { timestamp: 1600984282792, cpuUsage: 84 },\n    { timestamp: 1600984287792, cpuUsage: 31 },\n    { timestamp: 1600984291792, cpuUsage: 71 },\n    { timestamp: 1600984297792, cpuUsage: 74 },\n    { timestamp: 1600984299792, cpuUsage: 99 },\n    { timestamp: 1600984302792, cpuUsage: 82 },\n    { timestamp: 1600984303792, cpuUsage: 36 },\n    { timestamp: 1600984311792, cpuUsage: 97 },\n    { timestamp: 1600984319792, cpuUsage: 97 },\n    { timestamp: 1600984327792, cpuUsage: 62 },\n    { timestamp: 1600984330792, cpuUsage: 97 },\n    { timestamp: 1600984333792, cpuUsage: 34 },\n    { timestamp: 1600984338792, cpuUsage: 67 },\n    { timestamp: 1600984342792, cpuUsage: 99 },\n    { timestamp: 1600984343792, cpuUsage: 77 },\n    { timestamp: 1600984349792, cpuUsage: 51 },\n    { timestamp: 1600984353792, cpuUsage: 75 },\n    { timestamp: 1600984356792, cpuUsage: 41 },\n    { timestamp: 1600984360792, cpuUsage: 81 },\n    { timestamp: 1600984380792, cpuUsage: 61 },\n    { timestamp: 1600984400792, cpuUsage: 71 },\n    { timestamp: 1600984410792, cpuUsage: 77 },\n    { timestamp: 1600984420792, cpuUsage: 62 },\n    { timestamp: 1600984429792, cpuUsage: 55 },\n    { timestamp: 1600984430792, cpuUsage: 45 },\n    { timestamp: 1600984432792, cpuUsage: 50 },\n    { timestamp: 1600984436792, cpuUsage: 60 },\n    { timestamp: 1600984439792, cpuUsage: 69 },\n];\n","main.js":"let gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    { field: \"timestamp\", chartDataType: \"time\" },\n    { field: \"cpuUsage\" },\n  ],\n  defaultColDef: { flex: 1 },\n  cellSelection: true,\n  popupParent: document.body,\n  enableCharts: true,\n  chartThemeOverrides: {\n    area: {\n      title: {\n        enabled: true,\n        text: \"CPU Usage\",\n      },\n      navigator: {\n        enabled: true,\n        height: 20,\n        spacing: 25,\n      },\n      axes: {\n        time: {\n          label: {\n            rotation: 315,\n            format: \"%H:%M\",\n          },\n        },\n        number: {\n          label: {\n            formatter: (params) => {\n              // charts typings\n              return params.value + \"%\";\n            },\n          },\n        },\n      },\n      series: {\n        tooltip: {\n          renderer: ({ datum, xKey, yKey }) => {\n            return {\n              content: `${formatTime(datum[xKey])}: ${datum[yKey]}%`,\n            };\n          },\n        },\n      },\n    },\n  },\n  chartToolPanelsDef: {\n    panels: [\"data\", \"format\"],\n  },\n  onGridReady: (params) => {\n    getData().then((rowData) => params.api.setGridOption(\"rowData\", rowData));\n  },\n  onFirstDataRendered,\n};\n\nfunction onFirstDataRendered(params) {\n  params.api.createRangeChart({\n    chartContainer: document.querySelector(\"#myChart\"),\n    cellRange: {\n      columns: [\"timestamp\", \"cpuUsage\"],\n    },\n    suppressChartRanges: true,\n    chartType: \"area\",\n  });\n}\n\nfunction formatTime(date) {\n  return Intl.DateTimeFormat(\"en-GB\", {\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n  }).format(new Date(date));\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  gridApi = agGrid.createGrid(\n    document.querySelector(\"#myGrid\"),\n    gridOptions,\n  ); /** DARK INTEGRATED START **/\n  const isInitialModeDark =\n    document.documentElement.dataset.agThemeMode?.includes(\"dark\");\n\n  const updateChartThemes = (isDark) => {\n    const themes = [\n      \"ag-default\",\n      \"ag-material\",\n      \"ag-sheets\",\n      \"ag-polychroma\",\n      \"ag-vivid\",\n    ];\n    const currentThemes = gridApi.getGridOption(\"chartThemes\");\n    const customTheme =\n      currentThemes &&\n      currentThemes.some((theme) => theme.startsWith(\"my-custom-theme\"));\n\n    let modifiedThemes = customTheme\n      ? isDark\n        ? [\"my-custom-theme-dark\", \"my-custom-theme-light\"]\n        : [\"my-custom-theme-light\", \"my-custom-theme-dark\"]\n      : Array.from(\n          new Set(themes.map((theme) => theme + (isDark ? \"-dark\" : \"\"))),\n        );\n\n    // updating the 'chartThemes' grid option will cause the chart to reactively update!\n    gridApi.setGridOption(\"chartThemes\", modifiedThemes);\n  };\n\n  // update chart themes when example first loads\n  let initialSet = false;\n  const maxTries = 5;\n  let tries = 0;\n  const trySetInitial = (delay) => {\n    if (gridApi) {\n      initialSet = true;\n      updateChartThemes(isInitialModeDark);\n    } else {\n      if (tries < maxTries) {\n        setTimeout(() => trySetInitial(), 250);\n        tries++;\n      }\n    }\n  };\n  trySetInitial(0);\n\n  const handleColorSchemeChange = (event) => {\n    const { darkMode } = event.detail;\n    updateChartThemes(darkMode);\n  };\n\n  // listen for user-triggered dark mode changes (not removing listener is fine here!)\n  document.addEventListener(\"color-scheme-change\", handleColorSchemeChange);\n  /** DARK INTEGRATED END **/\n});\n","index.html":"<div class=\"wrapper\">\n    <div id=\"myGrid\" class=\"my-grid\"></div>\n    <div id=\"myChart\" class=\"my-chart\"></div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0","ag-charts-community":"latest","ag-charts-enterprise":"latest"}}}