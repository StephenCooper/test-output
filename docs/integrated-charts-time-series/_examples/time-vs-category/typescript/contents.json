{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":true,"entryFileName":"main.ts","mainFileName":"main.ts","styleFiles":["style.css"],"files":{"style.css":".wrapper {\n    display: flex;\n    flex-direction: column;\n    height: calc(100% - 50px);\n    margin-top: 5px;\n}\n\n#axisBtn {\n    text-transform: capitalize;\n}\n\n#myGrid {\n    height: 300px;\n    flex: none;\n}\n\n.my-chart {\n    height: 400px;\n    flex: none;\n}\n","data.ts":"export async function getData(delay: number = 100): Promise<any[]> {\n    return new Promise((resolve) => setTimeout(() => resolve(data), delay));\n}\n\nconst data = [\n    { date: new Date(2019, 0, 1), avgTemp: 8.27 },\n    { date: new Date(2019, 0, 5), avgTemp: 7.22 },\n    { date: new Date(2019, 0, 8), avgTemp: 11.54 },\n    { date: new Date(2019, 0, 11), avgTemp: 8.44 },\n    { date: new Date(2019, 0, 22), avgTemp: 12.03 },\n    { date: new Date(2019, 0, 23), avgTemp: 9.68 },\n    { date: new Date(2019, 0, 24), avgTemp: 9.9 },\n    { date: new Date(2019, 0, 25), avgTemp: 8.74 },\n];\n","main.ts":"import { AgChartsEnterpriseModule } from \"ag-charts-enterprise\";\nimport {\n  AgChartThemeOverrides,\n  CellSelectionOptions,\n  ChartToolPanelsDef,\n  ClientSideRowModelModule,\n  ColDef,\n  ColGroupDef,\n  ColumnApiModule,\n  FirstDataRenderedEvent,\n  GridApi,\n  GridOptions,\n  GridReadyEvent,\n  ModuleRegistry,\n  ValidationModule,\n  ValueFormatterParams,\n  createGrid,\n} from \"ag-grid-community\";\nimport {\n  ColumnMenuModule,\n  ContextMenuModule,\n  IntegratedChartsModule,\n  RowGroupingModule,\n} from \"ag-grid-enterprise\";\nimport { getData } from \"./data\";\n\nModuleRegistry.registerModules([\n  ColumnApiModule,\n  ClientSideRowModelModule,\n  IntegratedChartsModule.with(AgChartsEnterpriseModule),\n  ColumnMenuModule,\n  ContextMenuModule,\n  RowGroupingModule,\n  ValidationModule /* Development Only */,\n]);\n\nlet gridApi: GridApi;\nlet currentChartRef: any;\n\nfunction getColumnDefs() {\n  return [\n    { field: \"date\", valueFormatter: dateFormatter },\n    { field: \"avgTemp\" },\n  ];\n}\n\nconst gridOptions: GridOptions = {\n  columnDefs: getColumnDefs(),\n  defaultColDef: { flex: 1 },\n  cellSelection: true,\n  enableCharts: true,\n  chartThemeOverrides: {\n    line: {\n      title: {\n        enabled: true,\n        text: \"Average Daily Temperatures\",\n      },\n      navigator: {\n        enabled: true,\n        height: 20,\n        spacing: 25,\n      },\n      axes: {\n        time: {\n          label: {\n            rotation: 0,\n            format: \"%d %b\",\n          },\n        },\n        category: {\n          label: {\n            rotation: 0,\n            formatter: (params: any) => {\n              // charts typings\n              return formatDate(params.value);\n            },\n          },\n        },\n        number: {\n          label: {\n            formatter: (params: any) => {\n              // charts typings\n              return params.value + \"°C\";\n            },\n          },\n        },\n      },\n      series: {\n        tooltip: {\n          renderer: ({ datum, xKey, yKey }) => {\n            return {\n              content: `${formatDate(datum[xKey])}: ${Math.round(datum[yKey])}°C`,\n            };\n          },\n        },\n      },\n    },\n  },\n  chartToolPanelsDef: {\n    panels: [\"data\", \"format\"],\n  },\n  onGridReady: (params: GridReadyEvent) => {\n    getData().then((rowData) => params.api.setGridOption(\"rowData\", rowData));\n  },\n  onFirstDataRendered,\n};\n\nfunction onFirstDataRendered(params: FirstDataRenderedEvent) {\n  if (currentChartRef) {\n    currentChartRef.destroyChart();\n  }\n\n  currentChartRef = params.api.createRangeChart({\n    chartContainer: document.querySelector(\"#myChart\") as HTMLElement,\n    cellRange: {\n      columns: [\"date\", \"avgTemp\"],\n    },\n    suppressChartRanges: true,\n    chartType: \"line\",\n  });\n}\n\nfunction dateFormatter(params: ValueFormatterParams) {\n  return params.value\n    ? params.value.toISOString().substring(0, 10)\n    : params.value;\n}\n\nfunction toggleAxis() {\n  const axisBtn = document.querySelector(\"#axisBtn\") as any;\n  axisBtn.textContent = axisBtn.value;\n  axisBtn.value = axisBtn.value === \"time\" ? \"category\" : \"time\";\n\n  const columnDefs: ColDef[] = getColumnDefs();\n  columnDefs.forEach((colDef) => {\n    if (colDef.field === \"date\") {\n      colDef.chartDataType = axisBtn.value;\n    }\n  });\n\n  gridApi!.setGridOption(\"columnDefs\", columnDefs);\n}\n\nfunction formatDate(date: Date | number) {\n  return Intl.DateTimeFormat(\"en-GB\", {\n    day: \"2-digit\",\n    month: \"short\",\n    year: undefined,\n  }).format(new Date(date));\n}\n\n// setup the grid after the page has finished loading\nconst gridDiv = document.querySelector<HTMLElement>(\"#myGrid\")!;\ngridApi = createGrid(gridDiv, gridOptions);\n\nif (typeof window !== \"undefined\") {\n  // Attach external event handlers to window so they can be called from index.html\n  (<any>window).toggleAxis = toggleAxis;\n} /** DARK INTEGRATED START **/\nconst isInitialModeDark =\n  document.documentElement.dataset.agThemeMode?.includes(\"dark\");\n\n// update chart themes based on dark mode status\nconst updateChartThemes = (isDark: boolean): void => {\n  const themes: string[] = [\n    \"ag-default\",\n    \"ag-material\",\n    \"ag-sheets\",\n    \"ag-polychroma\",\n    \"ag-vivid\",\n  ];\n  const currentThemes = gridApi.getGridOption(\"chartThemes\");\n  const customTheme =\n    currentThemes &&\n    currentThemes.some((theme) => theme.startsWith(\"my-custom-theme\"));\n\n  let modifiedThemes: string[] = customTheme\n    ? isDark\n      ? [\"my-custom-theme-dark\", \"my-custom-theme-light\"]\n      : [\"my-custom-theme-light\", \"my-custom-theme-dark\"]\n    : Array.from(\n        new Set(themes.map((theme) => theme + (isDark ? \"-dark\" : \"\"))),\n      );\n\n  // updating the 'chartThemes' grid option will cause the chart to reactively update!\n  gridApi.setGridOption(\"chartThemes\", modifiedThemes);\n};\n\n// update chart themes when example first loads\nlet initialSet = false;\nconst maxTries = 5;\nlet tries = 0;\nconst trySetInitial = (delay) => {\n  if (gridApi) {\n    initialSet = true;\n    updateChartThemes(isInitialModeDark);\n  } else {\n    if (tries < maxTries) {\n      setTimeout(() => trySetInitial(), 250);\n      tries++;\n    }\n  }\n};\ntrySetInitial(0);\n\ninterface ColorSchemeChangeEventDetail {\n  darkMode: boolean;\n}\n\n// event handler for color scheme changes\nconst handleColorSchemeChange = (\n  event: CustomEvent<ColorSchemeChangeEventDetail>,\n): void => {\n  const { darkMode } = event.detail;\n  updateChartThemes(darkMode);\n};\n\n// listen for user-triggered dark mode changes (not removing listener is fine here!)\ndocument.addEventListener(\n  \"color-scheme-change\",\n  handleColorSchemeChange as EventListener,\n);\n/** DARK INTEGRATED END **/\n","index.html":"<label>Switch Axis to: </label>\n<button id=\"axisBtn\" onclick=\"toggleAxis()\" value=\"time\">Category</button>\n<div class=\"wrapper\">\n    <div id=\"myGrid\" class=\"my-grid\"></div>\n    <div id=\"myChart\" class=\"my-chart\"></div>\n</div>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {},\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        // map tells the System loader where to look for things\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            // appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap,\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {},\n            app: {\n                main: './main.ts',\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0","ag-charts-community":"latest","ag-charts-enterprise":"latest"}}}