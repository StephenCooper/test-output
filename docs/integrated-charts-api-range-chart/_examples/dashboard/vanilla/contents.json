{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":true,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["data.js","main.js"],"styleFiles":[],"files":{"data.js":"async function getData(delay = 100) {\n    // Simulate a server delay using setTimeout wrapped in a Promise\n    return await new Promise((resolve) => setTimeout(() => resolve(generateData()), delay));\n}\n\nfunction generateData() {\n    const countries = [\n        'Ireland',\n        'Spain',\n        'United Kingdom',\n        'France',\n        'Germany',\n        'Luxembourg',\n        'Sweden',\n        'Norway',\n        'Italy',\n        'Greece',\n        'Iceland',\n        'Portugal',\n        'Malta',\n        'Brazil',\n        'Argentina',\n        'Colombia',\n        'Peru',\n        'Venezuela',\n        'Uruguay',\n        'Belgium',\n    ];\n\n    return countries.map((country, index) => ({\n        country,\n        group: index % 2 === 0 ? 'Group A' : 'Group B',\n        gold: Math.floor(((index + 1 / 7) * 333) % 100),\n        silver: Math.floor(((index + 1 / 3) * 555) % 100),\n        bronze: Math.floor(((index + 1 / 7.3) * 777) % 100),\n    }));\n}\n","main.js":"let gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    { field: \"country\", width: 150, chartDataType: \"category\" },\n    { field: \"group\", chartDataType: \"category\" },\n    { field: \"gold\", chartDataType: \"series\" },\n    { field: \"silver\", chartDataType: \"series\" },\n    { field: \"bronze\", chartDataType: \"series\" },\n  ],\n  defaultColDef: {\n    editable: true,\n    flex: 1,\n    minWidth: 100,\n    filter: true,\n  },\n  cellSelection: true,\n  enableCharts: true,\n  chartToolPanelsDef: { panels: [] },\n  popupParent: document.body,\n  onGridReady: (params) => {\n    getData().then((rowData) => params.api.setGridOption(\"rowData\", rowData));\n  },\n  onFirstDataRendered,\n  getChartToolbarItems: () => [],\n};\n\nfunction onFirstDataRendered(event) {\n  createGroupedBarChart(event, \"#chart1\", [\"country\", \"gold\", \"silver\"]);\n  createPieChart(event, \"#chart2\", [\"group\", \"gold\"]);\n  createPieChart(event, \"#chart3\", [\"group\", \"silver\"]);\n}\n\nfunction createGroupedBarChart(params, selector, columns) {\n  params.api.createRangeChart({\n    chartContainer: document.querySelector(selector),\n    cellRange: {\n      rowStartIndex: 0,\n      rowEndIndex: 4,\n      columns,\n    },\n    suppressChartRanges: true,\n    chartType: \"groupedBar\",\n  });\n}\n\nfunction createPieChart(params, selector, columns) {\n  params.api.createRangeChart({\n    chartContainer: document.querySelector(selector),\n    cellRange: { columns },\n    suppressChartRanges: true,\n    chartType: \"pie\",\n    aggFunc: \"sum\",\n    chartThemeOverrides: {\n      common: {\n        padding: {\n          top: 20,\n          left: 10,\n          bottom: 30,\n          right: 10,\n        },\n        legend: {\n          position: \"right\",\n        },\n      },\n    },\n  });\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(\n    gridDiv,\n    gridOptions,\n  ); /** DARK INTEGRATED START **/\n  const isInitialModeDark =\n    document.documentElement.dataset.agThemeMode?.includes(\"dark\");\n\n  const updateChartThemes = (isDark) => {\n    const themes = [\n      \"ag-default\",\n      \"ag-material\",\n      \"ag-sheets\",\n      \"ag-polychroma\",\n      \"ag-vivid\",\n    ];\n    const currentThemes = gridApi.getGridOption(\"chartThemes\");\n    const customTheme =\n      currentThemes &&\n      currentThemes.some((theme) => theme.startsWith(\"my-custom-theme\"));\n\n    let modifiedThemes = customTheme\n      ? isDark\n        ? [\"my-custom-theme-dark\", \"my-custom-theme-light\"]\n        : [\"my-custom-theme-light\", \"my-custom-theme-dark\"]\n      : Array.from(\n          new Set(themes.map((theme) => theme + (isDark ? \"-dark\" : \"\"))),\n        );\n\n    // updating the 'chartThemes' grid option will cause the chart to reactively update!\n    gridApi.setGridOption(\"chartThemes\", modifiedThemes);\n  };\n\n  // update chart themes when example first loads\n  let initialSet = false;\n  const maxTries = 5;\n  let tries = 0;\n  const trySetInitial = (delay) => {\n    if (gridApi) {\n      initialSet = true;\n      updateChartThemes(isInitialModeDark);\n    } else {\n      if (tries < maxTries) {\n        setTimeout(() => trySetInitial(), 250);\n        tries++;\n      }\n    }\n  };\n  trySetInitial(0);\n\n  const handleColorSchemeChange = (event) => {\n    const { darkMode } = event.detail;\n    updateChartThemes(darkMode);\n  };\n\n  // listen for user-triggered dark mode changes (not removing listener is fine here!)\n  document.addEventListener(\"color-scheme-change\", handleColorSchemeChange);\n  /** DARK INTEGRATED END **/\n});\n","index.html":"<div style=\"display: flex; flex-direction: column; height: 100%; width: 100%; overflow: hidden\">\n    <div id=\"myGrid\" style=\"flex: 1 1 auto; height: 30%\"></div>\n    <div id=\"chart1\" class=\"my-chart\" style=\"flex: 1 1 auto; height: 30%\"></div>\n    <div style=\"display: flex; flex: 1 1 auto; height: 30%; gap: 8px\">\n        <div id=\"chart2\" class=\"my-chart\" style=\"flex: 1 1 auto; width: 50%\"></div>\n        <div id=\"chart3\" class=\"my-chart\" style=\"flex: 1 1 auto; width: 50%\"></div>\n    </div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0","ag-charts-community":"latest","ag-charts-enterprise":"latest"}}}