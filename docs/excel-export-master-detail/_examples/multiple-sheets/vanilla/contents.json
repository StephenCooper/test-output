{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".grid-wrapper {\n    display: flex;\n    flex: 1 1 0px;\n    flex-grow: 1;\n}\n.grid-wrapper > div {\n    width: 100%;\n    height: 100%;\n}\n.container {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n.columns {\n    display: flex;\n    flex-direction: row;\n    gap: 16px;\n}\n","main.js":"let gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    // group cell renderer needed for expand / collapse icons\n    { field: \"name\", cellRenderer: \"agGroupCellRenderer\" },\n    { field: \"account\" },\n    { field: \"calls\" },\n    { field: \"minutes\", valueFormatter: \"x.toLocaleString() + 'm'\" },\n  ],\n  defaultColDef: {\n    flex: 1,\n  },\n  getRowId: (params) => {\n    return params.data.name;\n  },\n  groupDefaultExpanded: 1,\n  rowBuffer: 100,\n  masterDetail: true,\n  detailCellRendererParams: {\n    detailGridOptions: {\n      columnDefs: [\n        { field: \"callId\" },\n        { field: \"direction\" },\n        { field: \"number\", minWidth: 150 },\n        { field: \"duration\", valueFormatter: \"x.toLocaleString() + 's'\" },\n        { field: \"switchCode\", minWidth: 150 },\n      ],\n      defaultColDef: {\n        flex: 1,\n      },\n    },\n    getDetailRowData: (params) => {\n      params.successCallback(params.data.callRecords);\n    },\n  },\n};\n\nfunction onFirstDataRendered(params) {\n  params.api.forEachNode(function (node) {\n    node.setExpanded(true);\n  });\n}\n\nfunction onBtExport() {\n  const spreadsheets = [];\n\n  const mainSheet = gridApi.getSheetDataForExcel();\n  if (mainSheet) {\n    spreadsheets.push(mainSheet);\n  }\n\n  gridApi.forEachDetailGridInfo(function (node) {\n    const sheet = node.api.getSheetDataForExcel({\n      sheetName: node.id.replace(\"detail_\", \"\"),\n    });\n    if (sheet) {\n      spreadsheets.push(sheet);\n    }\n  });\n\n  gridApi.exportMultipleSheetsAsExcel({\n    data: spreadsheets,\n    fileName: \"ag-grid.xlsx\",\n  });\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/master-detail-data.json\")\n    .then((response) => response.json())\n    .then((data) => {\n      gridApi.setGridOption(\"rowData\", data);\n    });\n});\n","index.html":"<div class=\"container\">\n    <div>\n        <button onclick=\"onBtExport()\" style=\"margin-bottom: 5px; font-weight: bold\">Export to Excel</button>\n    </div>\n    <div class=\"grid-wrapper\">\n        <div id=\"myGrid\"></div>\n    </div>\n</div>\n","interfaces.ts":"\nexport interface ICallRecord {\n    name: string;\n    callId: number;\n    duration: number;\n    switchCode: string;\n    direction: string;\n    number: string;\n}\n\nexport interface IAccount {\n    name: string;\n    account: number;\n    calls: number;\n    minutes: number;\n    callRecords: ICallRecord[];\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}