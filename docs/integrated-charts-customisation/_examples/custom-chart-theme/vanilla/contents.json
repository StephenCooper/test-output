{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":true,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["data.js","main.js"],"styleFiles":[],"files":{"data.js":"async function getData(delay = 100) {\n    return new Promise((resolve) => setTimeout(() => resolve(generateData()), delay));\n}\n\nfunction deepMerge(obj1, obj2) {\n    const output = { ...obj1 };\n\n    for (const key in obj2) {\n        if (obj2.hasOwnProperty(key)) {\n            if (typeof obj2[key] === 'object' && obj2[key] !== null && !Array.isArray(obj2[key])) {\n                output[key] = deepMerge(obj1[key] || {}, obj2[key]);\n            } else {\n                output[key] = obj2[key];\n            }\n        }\n    }\n\n    return output;\n}\n\nfunction generateData() {\n    const countries = [\n        'Ireland',\n        'Spain',\n        'United Kingdom',\n        'France',\n        'Germany',\n        'Luxembourg',\n        'Sweden',\n        'Norway',\n        'Italy',\n        'Greece',\n        'Iceland',\n        'Portugal',\n        'Malta',\n        'Brazil',\n        'Argentina',\n        'Colombia',\n        'Peru',\n        'Venezuela',\n        'Uruguay',\n        'Belgium',\n    ];\n\n    return countries.map((country, index) => ({\n        country,\n        gold: Math.floor(((index + 1 / 7) * 333) % 100),\n        silver: Math.floor(((index + 1 / 3) * 555) % 100),\n        bronze: Math.floor(((index + 1 / 7.3) * 777) % 100),\n    }));\n}\n","main.js":"let gridApi;\n\nconst commonThemeProperties = {\n  overrides: {\n    common: {\n      legend: {\n        position: \"top\",\n        spacing: 25,\n        item: {\n          label: {\n            fontStyle: \"italic\",\n            fontWeight: \"bold\",\n            fontSize: 18,\n            fontFamily: \"Palatino, serif\",\n          },\n          marker: {\n            shape: \"circle\",\n            size: 14,\n            padding: 8,\n            strokeWidth: 2,\n          },\n        },\n      },\n    },\n    bar: {\n      axes: {\n        number: {\n          line: {\n            width: 4,\n          },\n        },\n        category: {\n          line: {\n            width: 2,\n          },\n          rotation: 0,\n        },\n      },\n    },\n  },\n};\n\nconst myCustomThemeLight = deepMerge(commonThemeProperties, {\n  palette: {\n    fills: [\"#42a5f5\", \"#ffa726\", \"#81c784\"],\n    strokes: [\"#000000\", \"#424242\"],\n  },\n  overrides: {\n    common: {\n      background: {\n        fill: \"#f4f4f4\",\n      },\n      legend: {\n        item: {\n          label: {\n            color: \"#333333\",\n          },\n        },\n      },\n    },\n    bar: {\n      axes: {\n        number: {\n          bottom: {\n            line: {\n              stroke: \"#424242\",\n            },\n            label: {\n              color: \"#555555\",\n              fontStyle: \"italic\",\n              fontWeight: \"bold\",\n              fontSize: 12,\n              spacing: 5,\n            },\n          },\n        },\n        category: {\n          left: {\n            line: {\n              stroke: \"#424242\",\n            },\n            label: {\n              color: \"#555555\",\n              fontStyle: \"italic\",\n              fontWeight: \"bold\",\n              fontSize: 14,\n              spacing: 8,\n            },\n          },\n        },\n      },\n    },\n  },\n});\n\nconst myCustomThemeDark = deepMerge(commonThemeProperties, {\n  palette: {\n    fills: [\"#42a5f5\", \"#ffa726\", \"#81c784\"],\n    strokes: [\"#ffffff\", \"#B0BEC5\"],\n  },\n  overrides: {\n    common: {\n      background: {\n        fill: \"#15181c\",\n      },\n      legend: {\n        item: {\n          label: {\n            color: \"#ECEFF1\",\n          },\n        },\n      },\n    },\n    bar: {\n      axes: {\n        number: {\n          bottom: {\n            line: {\n              stroke: \"#757575\",\n            },\n            label: {\n              color: \"#B0BEC5\",\n              fontStyle: \"italic\",\n              fontWeight: \"bold\",\n              fontSize: 12,\n              spacing: 5,\n            },\n          },\n        },\n        category: {\n          left: {\n            line: {\n              stroke: \"#757575\",\n            },\n            label: {\n              color: \"#B0BEC5\",\n              fontStyle: \"italic\",\n              fontWeight: \"bold\",\n              fontSize: 14,\n              spacing: 8,\n            },\n          },\n        },\n      },\n    },\n  },\n});\n\nconst gridOptions = {\n  columnDefs: [\n    { field: \"country\", width: 150, chartDataType: \"category\" },\n    { field: \"gold\", chartDataType: \"series\" },\n    { field: \"silver\", chartDataType: \"series\" },\n    { field: \"bronze\", chartDataType: \"series\" },\n  ],\n  defaultColDef: {\n    flex: 1,\n    minWidth: 100,\n  },\n  popupParent: document.body,\n  cellSelection: true,\n  enableCharts: true,\n  chartThemes: [\"my-custom-theme-light\", \"my-custom-theme-dark\"],\n  customChartThemes: {\n    \"my-custom-theme-light\": myCustomThemeLight,\n    \"my-custom-theme-dark\": myCustomThemeDark,\n  },\n  onGridReady: (params) => {\n    getData().then((rowData) => params.api.setGridOption(\"rowData\", rowData));\n  },\n  onFirstDataRendered,\n};\n\nfunction onFirstDataRendered(params) {\n  params.api.createRangeChart({\n    cellRange: {\n      rowStartIndex: 0,\n      rowEndIndex: 4,\n      columns: [\"country\", \"gold\", \"silver\", \"bronze\"],\n    },\n    chartType: \"groupedBar\",\n  });\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(\n    gridDiv,\n    gridOptions,\n  ); /** DARK INTEGRATED START **/\n  const isInitialModeDark =\n    document.documentElement.dataset.agThemeMode?.includes(\"dark\");\n\n  const updateChartThemes = (isDark) => {\n    const themes = [\n      \"ag-default\",\n      \"ag-material\",\n      \"ag-sheets\",\n      \"ag-polychroma\",\n      \"ag-vivid\",\n    ];\n    const currentThemes = gridApi.getGridOption(\"chartThemes\");\n    const customTheme =\n      currentThemes &&\n      currentThemes.some((theme) => theme.startsWith(\"my-custom-theme\"));\n\n    let modifiedThemes = customTheme\n      ? isDark\n        ? [\"my-custom-theme-dark\", \"my-custom-theme-light\"]\n        : [\"my-custom-theme-light\", \"my-custom-theme-dark\"]\n      : Array.from(\n          new Set(themes.map((theme) => theme + (isDark ? \"-dark\" : \"\"))),\n        );\n\n    // updating the 'chartThemes' grid option will cause the chart to reactively update!\n    gridApi.setGridOption(\"chartThemes\", modifiedThemes);\n  };\n\n  // update chart themes when example first loads\n  let initialSet = false;\n  const maxTries = 5;\n  let tries = 0;\n  const trySetInitial = (delay) => {\n    if (gridApi) {\n      initialSet = true;\n      updateChartThemes(isInitialModeDark);\n    } else {\n      if (tries < maxTries) {\n        setTimeout(() => trySetInitial(), 250);\n        tries++;\n      }\n    }\n  };\n  trySetInitial(0);\n\n  const handleColorSchemeChange = (event) => {\n    const { darkMode } = event.detail;\n    updateChartThemes(darkMode);\n  };\n\n  // listen for user-triggered dark mode changes (not removing listener is fine here!)\n  document.addEventListener(\"color-scheme-change\", handleColorSchemeChange);\n  /** DARK INTEGRATED END **/\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0","ag-charts-community":"latest","ag-charts-enterprise":"latest"}}}