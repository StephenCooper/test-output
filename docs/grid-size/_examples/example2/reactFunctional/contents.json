{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"index.jsx","mainFileName":"index.jsx","styleFiles":[],"files":{"data.jsx":"export function getData() {\n    return [\n        {\n            athlete: 'Michael Phelps',\n            age: 27,\n            country: 'United States',\n            year: 2012,\n            date: '12/08/2012',\n            sport: 'Swimming',\n            gold: 4,\n            silver: 2,\n            bronze: 0,\n            total: 6,\n        },\n        {\n            athlete: 'Natalie Coughlin',\n            age: 25,\n            country: 'United States',\n            year: 2008,\n            date: '24/08/2008',\n            sport: 'Swimming',\n            gold: 1,\n            silver: 2,\n            bronze: 3,\n            total: 6,\n        },\n        {\n            athlete: 'Aleksey Nemov',\n            age: 24,\n            country: 'Russia',\n            year: 2000,\n            date: '01/10/2000',\n            sport: 'Gymnastics',\n            gold: 2,\n            silver: 1,\n            bronze: 3,\n            total: 6,\n        },\n        {\n            athlete: 'Alicia Coutts',\n            age: 24,\n            country: 'Australia',\n            year: 2012,\n            date: '12/08/2012',\n            sport: 'Swimming',\n            gold: 1,\n            silver: 3,\n            bronze: 1,\n            total: 5,\n        },\n        {\n            athlete: 'Missy Franklin',\n            age: 17,\n            country: 'United States',\n            year: 2012,\n            date: '12/08/2012',\n            sport: 'Swimming',\n            gold: 4,\n            silver: 0,\n            bronze: 1,\n            total: 5,\n        },\n    ];\n}\n","index.jsx":"\"use client\";\n\nimport React, {\n  useCallback,\n  useMemo,\n  useRef,\n  useState,\n  StrictMode,\n} from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport { getData } from \"./data.jsx\";\nimport {\n  ClientSideRowModelApiModule,\n  ClientSideRowModelModule,\n  ColumnAutoSizeModule,\n  ModuleRegistry,\n  RenderApiModule,\n  RowApiModule,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\nModuleRegistry.registerModules([\n  ClientSideRowModelApiModule,\n  RenderApiModule,\n  RowApiModule,\n  ColumnAutoSizeModule,\n  ClientSideRowModelModule,\n  ValidationModule /* Development Only */,\n]);\n\nlet minRowHeight = 25;\n\nlet currentRowHeight;\n\nconst updateRowHeight = (params) => {\n  // get the height of the grid body - this excludes the height of the headers\n  const bodyViewport = document.querySelector(\".ag-body-viewport\");\n  if (!bodyViewport) {\n    return;\n  }\n  const gridHeight = bodyViewport.clientHeight;\n  // get the rendered rows\n  const renderedRowCount = params.api.getDisplayedRowCount();\n  // if the rendered rows * min height is greater than available height, just just set the height\n  // to the min and let the scrollbar do its thing\n  if (renderedRowCount * minRowHeight >= gridHeight) {\n    if (currentRowHeight !== minRowHeight) {\n      currentRowHeight = minRowHeight;\n      params.api.resetRowHeights();\n    }\n  } else {\n    // set the height of the row to the grid height / number of rows available\n    currentRowHeight = Math.floor(gridHeight / renderedRowCount);\n    params.api.resetRowHeights();\n  }\n};\n\nconst GridExample = () => {\n  const containerStyle = useMemo(() => ({ width: \"100%\", height: \"100%\" }), []);\n  const gridStyle = useMemo(() => ({ height: \"100%\", width: \"100%\" }), []);\n  const [rowData, setRowData] = useState(getData());\n  const [columnDefs, setColumnDefs] = useState([\n    { field: \"athlete\", minWidth: 150 },\n    { field: \"age\", minWidth: 70, maxWidth: 90 },\n    { field: \"country\", minWidth: 130 },\n    { field: \"year\", minWidth: 70, maxWidth: 90 },\n    { field: \"date\", minWidth: 120 },\n    { field: \"sport\", minWidth: 120 },\n    { field: \"gold\", minWidth: 80 },\n    { field: \"silver\", minWidth: 80 },\n    { field: \"bronze\", minWidth: 80 },\n    { field: \"total\", minWidth: 80 },\n  ]);\n  const autoSizeStrategy = useMemo(() => {\n    return {\n      type: \"fitGridWidth\",\n    };\n  }, []);\n  const getRowHeight = useCallback((params) => {\n    return currentRowHeight;\n  }, []);\n\n  const onGridReady = useCallback((params) => {\n    minRowHeight = params.api.getSizesForCurrentTheme().rowHeight;\n    currentRowHeight = minRowHeight;\n  }, []);\n\n  const onFirstDataRendered = useCallback(\n    (params) => {\n      updateRowHeight(params);\n    },\n    [updateRowHeight],\n  );\n\n  const onGridSizeChanged = useCallback(\n    (params) => {\n      updateRowHeight(params);\n    },\n    [updateRowHeight],\n  );\n\n  return (\n    <div style={containerStyle}>\n      <div style={gridStyle}>\n        <AgGridReact\n          rowData={rowData}\n          columnDefs={columnDefs}\n          autoSizeStrategy={autoSizeStrategy}\n          getRowHeight={getRowHeight}\n          onGridReady={onGridReady}\n          onFirstDataRendered={onFirstDataRendered}\n          onGridSizeChanged={onGridSizeChanged}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst root = createRoot(document.getElementById(\"root\"));\nroot.render(\n  <StrictMode>\n    <GridExample />\n  </StrictMode>,\n);\nwindow.tearDownExample = () => root.unmount();\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            jsx: 'react',\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            // react\n            react: 'npm:react@18.2.0',\n            'react-dom': 'npm:react-dom@18.2.0',\n            'react-dom/client': 'npm:react-dom@18.2.0',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            css: {},\n            react: {\n                main: './umd/react.production.min.js',\n            },\n            'react-dom': {\n                main: './umd/react-dom.production.min.js',\n            },\n            'react-dom/server': {\n                main: '../umd/react-dom-server.browser.production.min.js',\n            },\n            app: {\n                main: './index.jsx',\n                defaultExtension: 'jsx',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"react":"18","react-dom":"18","@types/react":"18","@types/react-dom":"18","ag-grid-react":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}