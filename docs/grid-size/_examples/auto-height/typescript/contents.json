{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"main.ts","styleFiles":["style.css"],"files":{"style.css":".test-header {\n    display: flex;\n    justify-content: space-between;\n    padding: 5px;\n    font-size: 13px;\n\n    margin-bottom: 1rem;\n}\n\n.test-header > div {\n    vertical-align: middle;\n    align-content: center;\n}\n\n.test-header button {\n    margin-right: 5px;\n    margin-bottom: 0;\n    margin-top: 0;\n}\n\n.test-header input {\n    margin-top: 0;\n    margin-bottom: 0;\n}\n\n.test-header #floating-rows {\n    vertical-align: bottom;\n}\n.ag-floating-top .ag-row-pinned.ag-row {\n    background-color: #2244cc44;\n}\n\n.ag-floating-bottom .ag-row-pinned.ag-row {\n    background-color: #2244cc44;\n}\n","main.ts":"import {\n  ClientSideRowModelModule,\n  ColDef,\n  ColGroupDef,\n  DomLayoutType,\n  GridApi,\n  GridOptions,\n  ModuleRegistry,\n  NumberFilterModule,\n  PinnedRowModule,\n  TextFilterModule,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\nimport {\n  ColumnMenuModule,\n  ColumnsToolPanelModule,\n  ContextMenuModule,\n  RowGroupingModule,\n} from \"ag-grid-enterprise\";\n\nModuleRegistry.registerModules([\n  TextFilterModule,\n  PinnedRowModule,\n  ClientSideRowModelModule,\n  ColumnsToolPanelModule,\n  ColumnMenuModule,\n  ContextMenuModule,\n  RowGroupingModule,\n  NumberFilterModule,\n  ValidationModule /* Development Only */,\n]);\n\nconst columnDefs: ColGroupDef[] = [\n  {\n    headerName: \"Core\",\n    children: [\n      { headerName: \"ID\", field: \"id\" },\n      { field: \"make\" },\n      { field: \"price\", filter: \"agNumberColumnFilter\" },\n    ],\n  },\n  {\n    headerName: \"Extra\",\n    children: [\n      { field: \"val1\", filter: \"agNumberColumnFilter\" },\n      { field: \"val2\", filter: \"agNumberColumnFilter\" },\n      { field: \"val3\", filter: \"agNumberColumnFilter\" },\n      { field: \"val4\", filter: \"agNumberColumnFilter\" },\n      { field: \"val5\", filter: \"agNumberColumnFilter\" },\n      { field: \"val6\", filter: \"agNumberColumnFilter\" },\n      { field: \"val7\", filter: \"agNumberColumnFilter\" },\n      { field: \"val8\", filter: \"agNumberColumnFilter\" },\n      { field: \"val9\", filter: \"agNumberColumnFilter\" },\n      { field: \"val10\", filter: \"agNumberColumnFilter\" },\n    ],\n  },\n];\n\nlet gridApi: GridApi;\n\nconst gridOptions: GridOptions = {\n  columnDefs: columnDefs,\n  defaultColDef: {\n    enableRowGroup: true,\n    enableValue: true,\n    filter: true,\n  },\n  rowData: getData(5),\n  domLayout: \"autoHeight\",\n  onGridReady: (params) => {\n    document.querySelector(\"#currentRowCount\")!.textContent = \"5\";\n  },\n  popupParent: document.body,\n};\n\nfunction createRow(index: number) {\n  const makes = [\"Toyota\", \"Ford\", \"BMW\", \"Phantom\", \"Porsche\"];\n\n  return {\n    id: \"D\" + (1000 + index),\n    make: makes[Math.floor(Math.random() * makes.length)],\n    price: Math.floor(Math.random() * 100000),\n    val1: Math.floor(Math.random() * 1000),\n    val2: Math.floor(Math.random() * 1000),\n    val3: Math.floor(Math.random() * 1000),\n    val4: Math.floor(Math.random() * 1000),\n    val5: Math.floor(Math.random() * 1000),\n    val6: Math.floor(Math.random() * 1000),\n    val7: Math.floor(Math.random() * 1000),\n    val8: Math.floor(Math.random() * 1000),\n    val9: Math.floor(Math.random() * 1000),\n    val10: Math.floor(Math.random() * 1000),\n  };\n}\n\nfunction getData(count: number) {\n  const rowData = [];\n  for (let i = 0; i < count; i++) {\n    rowData.push(createRow(i));\n  }\n  return rowData;\n}\n\nfunction updateRowData(rowCount: number) {\n  gridApi!.setGridOption(\"rowData\", getData(rowCount));\n\n  document.querySelector(\"#currentRowCount\")!.textContent = `${rowCount}`;\n}\n\nfunction cbFloatingRows() {\n  const show = (document.getElementById(\"floating-rows\") as HTMLInputElement)\n    .checked;\n  if (show) {\n    gridApi!.setGridOption(\"pinnedTopRowData\", [\n      createRow(999),\n      createRow(998),\n    ]);\n    gridApi!.setGridOption(\"pinnedBottomRowData\", [\n      createRow(997),\n      createRow(996),\n    ]);\n  } else {\n    gridApi!.setGridOption(\"pinnedTopRowData\", undefined);\n    gridApi!.setGridOption(\"pinnedBottomRowData\", undefined);\n  }\n}\n\nfunction setAutoHeight() {\n  gridApi!.setGridOption(\"domLayout\", \"autoHeight\");\n  // auto height will get the grid to fill the height of the contents,\n  // so the grid div should have no height set, the height is dynamic.\n  (document.querySelector<HTMLElement>(\"#myGrid\")! as any).style.height = \"\";\n}\n\nfunction setFixedHeight() {\n  // we could also call setDomLayout() here as normal is the default\n  gridApi!.setGridOption(\"domLayout\", \"normal\");\n  // when auto height is off, the grid ahs a fixed height, and then the grid\n  // will provide scrollbars if the data does not fit into it.\n  (document.querySelector<HTMLElement>(\"#myGrid\")! as any)!.style.height =\n    \"400px\";\n}\n\n// setup the grid after the page has finished loading\nconst gridDiv = document.querySelector<HTMLElement>(\"#myGrid\")!;\ngridApi = createGrid(gridDiv, gridOptions);\n\nif (typeof window !== \"undefined\") {\n  // Attach external event handlers to window so they can be called from index.html\n  (<any>window).updateRowData = updateRowData;\n  (<any>window).cbFloatingRows = cbFloatingRows;\n  (<any>window).setAutoHeight = setAutoHeight;\n  (<any>window).setFixedHeight = setFixedHeight;\n}\n","index.html":"<div class=\"test-header\">\n    <div>\n        <button onclick=\"updateRowData(0)\">0 Rows</button>\n        <button onclick=\"updateRowData(5)\">5 Rows</button>\n        <button onclick=\"updateRowData(50)\">50 Rows</button>\n    </div>\n    <div>\n        <button onclick=\"setAutoHeight()\">Auto Height</button>\n        <button onclick=\"setFixedHeight()\">Fixed Height</button>\n    </div>\n    <div>\n        <input name=\"pinned-rows\" type=\"checkbox\" id=\"floating-rows\" onclick=\"cbFloatingRows()\" />\n        <label for=\"pinned-rows\"> Pinned Rows </label>\n    </div>\n    <div>Row Count = <span id=\"currentRowCount\"></span></div>\n</div>\n\n<div id=\"myGrid\"></div>\n\n<div style=\"border: 10px solid #eee; padding: 10px; margin-top: 20px\">\n    <p style=\"text-align: center\">\n        This text is under the grid and should move up and down as the height of the grid changes.\n    </p>\n\n    <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n        consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n        pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est\n        laborum.\n    </p>\n\n    <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n        consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n        pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est\n        laborum.\n    </p>\n\n    <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n        consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n        pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est\n        laborum.\n    </p>\n</div>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {},\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        // map tells the System loader where to look for things\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            // appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap,\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {},\n            app: {\n                main: './main.ts',\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}},"myGridReference":true,"noStyle":true}