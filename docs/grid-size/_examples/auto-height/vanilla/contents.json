{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":["style.css"],"files":{"style.css":".test-header {\n    display: flex;\n    justify-content: space-between;\n    padding: 5px;\n    font-size: 13px;\n\n    margin-bottom: 1rem;\n}\n\n.test-header > div {\n    vertical-align: middle;\n    align-content: center;\n}\n\n.test-header button {\n    margin-right: 5px;\n    margin-bottom: 0;\n    margin-top: 0;\n}\n\n.test-header input {\n    margin-top: 0;\n    margin-bottom: 0;\n}\n\n.test-header #floating-rows {\n    vertical-align: bottom;\n}\n.ag-floating-top .ag-row-pinned.ag-row {\n    background-color: #2244cc44;\n}\n\n.ag-floating-bottom .ag-row-pinned.ag-row {\n    background-color: #2244cc44;\n}\n","main.js":"const columnDefs = [\n  {\n    headerName: \"Core\",\n    children: [\n      { headerName: \"ID\", field: \"id\" },\n      { field: \"make\" },\n      { field: \"price\", filter: \"agNumberColumnFilter\" },\n    ],\n  },\n  {\n    headerName: \"Extra\",\n    children: [\n      { field: \"val1\", filter: \"agNumberColumnFilter\" },\n      { field: \"val2\", filter: \"agNumberColumnFilter\" },\n      { field: \"val3\", filter: \"agNumberColumnFilter\" },\n      { field: \"val4\", filter: \"agNumberColumnFilter\" },\n      { field: \"val5\", filter: \"agNumberColumnFilter\" },\n      { field: \"val6\", filter: \"agNumberColumnFilter\" },\n      { field: \"val7\", filter: \"agNumberColumnFilter\" },\n      { field: \"val8\", filter: \"agNumberColumnFilter\" },\n      { field: \"val9\", filter: \"agNumberColumnFilter\" },\n      { field: \"val10\", filter: \"agNumberColumnFilter\" },\n    ],\n  },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n  columnDefs: columnDefs,\n  defaultColDef: {\n    enableRowGroup: true,\n    enableValue: true,\n    filter: true,\n  },\n  rowData: getData(5),\n  domLayout: \"autoHeight\",\n  onGridReady: (params) => {\n    document.querySelector(\"#currentRowCount\").textContent = \"5\";\n  },\n  popupParent: document.body,\n};\n\nfunction createRow(index) {\n  const makes = [\"Toyota\", \"Ford\", \"BMW\", \"Phantom\", \"Porsche\"];\n\n  return {\n    id: \"D\" + (1000 + index),\n    make: makes[Math.floor(Math.random() * makes.length)],\n    price: Math.floor(Math.random() * 100000),\n    val1: Math.floor(Math.random() * 1000),\n    val2: Math.floor(Math.random() * 1000),\n    val3: Math.floor(Math.random() * 1000),\n    val4: Math.floor(Math.random() * 1000),\n    val5: Math.floor(Math.random() * 1000),\n    val6: Math.floor(Math.random() * 1000),\n    val7: Math.floor(Math.random() * 1000),\n    val8: Math.floor(Math.random() * 1000),\n    val9: Math.floor(Math.random() * 1000),\n    val10: Math.floor(Math.random() * 1000),\n  };\n}\n\nfunction getData(count) {\n  const rowData = [];\n  for (let i = 0; i < count; i++) {\n    rowData.push(createRow(i));\n  }\n  return rowData;\n}\n\nfunction updateRowData(rowCount) {\n  gridApi.setGridOption(\"rowData\", getData(rowCount));\n\n  document.querySelector(\"#currentRowCount\").textContent = `${rowCount}`;\n}\n\nfunction cbFloatingRows() {\n  const show = document.getElementById(\"floating-rows\").checked;\n  if (show) {\n    gridApi.setGridOption(\"pinnedTopRowData\", [createRow(999), createRow(998)]);\n    gridApi.setGridOption(\"pinnedBottomRowData\", [\n      createRow(997),\n      createRow(996),\n    ]);\n  } else {\n    gridApi.setGridOption(\"pinnedTopRowData\", undefined);\n    gridApi.setGridOption(\"pinnedBottomRowData\", undefined);\n  }\n}\n\nfunction setAutoHeight() {\n  gridApi.setGridOption(\"domLayout\", \"autoHeight\");\n  // auto height will get the grid to fill the height of the contents,\n  // so the grid div should have no height set, the height is dynamic.\n  document.querySelector(\"#myGrid\").style.height = \"\";\n}\n\nfunction setFixedHeight() {\n  // we could also call setDomLayout() here as normal is the default\n  gridApi.setGridOption(\"domLayout\", \"normal\");\n  // when auto height is off, the grid ahs a fixed height, and then the grid\n  // will provide scrollbars if the data does not fit into it.\n  document.querySelector(\"#myGrid\").style.height = \"400px\";\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n});\n","index.html":"<div class=\"test-header\">\n    <div>\n        <button onclick=\"updateRowData(0)\">0 Rows</button>\n        <button onclick=\"updateRowData(5)\">5 Rows</button>\n        <button onclick=\"updateRowData(50)\">50 Rows</button>\n    </div>\n    <div>\n        <button onclick=\"setAutoHeight()\">Auto Height</button>\n        <button onclick=\"setFixedHeight()\">Fixed Height</button>\n    </div>\n    <div>\n        <input name=\"pinned-rows\" type=\"checkbox\" id=\"floating-rows\" onclick=\"cbFloatingRows()\" />\n        <label for=\"pinned-rows\"> Pinned Rows </label>\n    </div>\n    <div>Row Count = <span id=\"currentRowCount\"></span></div>\n</div>\n\n<div id=\"myGrid\"></div>\n\n<div style=\"border: 10px solid #eee; padding: 10px; margin-top: 20px\">\n    <p style=\"text-align: center\">\n        This text is under the grid and should move up and down as the height of the grid changes.\n    </p>\n\n    <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n        consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n        pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est\n        laborum.\n    </p>\n\n    <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n        consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n        pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est\n        laborum.\n    </p>\n\n    <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n        consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n        pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est\n        laborum.\n    </p>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}},"myGridReference":true,"noStyle":true}