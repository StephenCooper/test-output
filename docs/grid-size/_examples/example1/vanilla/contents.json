{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":[],"files":{"main.js":"let gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    { field: \"athlete\", minWidth: 150 },\n    { field: \"age\", minWidth: 70, maxWidth: 90 },\n    { field: \"country\", minWidth: 130 },\n    { field: \"year\", minWidth: 70, maxWidth: 90 },\n    { field: \"date\", minWidth: 120 },\n    { field: \"sport\", minWidth: 120 },\n    { field: \"gold\", minWidth: 80 },\n    { field: \"silver\", minWidth: 80 },\n    { field: \"bronze\", minWidth: 80 },\n    { field: \"total\", minWidth: 80 },\n  ],\n  onGridSizeChanged: onGridSizeChanged,\n  onFirstDataRendered: onFirstDataRendered,\n};\n\nfunction onGridSizeChanged(params) {\n  // get the current grids width\n  const gridWidth = document.querySelector(\".ag-body-viewport\").clientWidth;\n\n  // keep track of which columns to hide/show\n  const columnsToShow = [];\n  const columnsToHide = [];\n\n  // iterate over all columns (visible or not) and work out\n  // now many columns can fit (based on their minWidth)\n  let totalColsWidth = 0;\n  const allColumns = params.api.getColumns();\n  if (allColumns && allColumns.length > 0) {\n    for (let i = 0; i < allColumns.length; i++) {\n      const column = allColumns[i];\n      totalColsWidth += column.getMinWidth();\n      if (totalColsWidth > gridWidth) {\n        columnsToHide.push(column.getColId());\n      } else {\n        columnsToShow.push(column.getColId());\n      }\n    }\n  }\n\n  // show/hide columns based on current grid width\n  params.api.setColumnsVisible(columnsToShow, true);\n  params.api.setColumnsVisible(columnsToHide, false);\n\n  // wait until columns stopped moving and fill out\n  // any available space to ensure there are no gaps\n  window.setTimeout(() => {\n    params.api.sizeColumnsToFit();\n  }, 10);\n}\n\nfunction onFirstDataRendered(params) {\n  params.api.sizeColumnsToFit();\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then((data) => gridApi.setGridOption(\"rowData\", data));\n});\n","index.html":"<div id=\"grid-wrapper\" style=\"width: 100%; height: 100%\">\n    <div id=\"myGrid\" style=\"height: 100%\"></div>\n</div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}