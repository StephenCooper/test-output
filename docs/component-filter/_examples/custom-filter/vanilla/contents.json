{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["personFilter.js","yearFilter.js","main.js"],"styleFiles":["style.css"],"files":{"style.css":".person-filter {\n    padding: 12px;\n    width: 200px;\n}\n\n.person-filter > div:first-child {\n    font-weight: bold;\n}\n\n.person-filter > div:not(:last-child) {\n    margin-bottom: 8px;\n}\n\n.year-filter {\n    width: 200px;\n}\n\n.year-filter > * {\n    margin: 8px 12px;\n}\n\n.year-filter > div:first-child {\n    font-weight: bold;\n}\n\n.year-filter > label {\n    display: inline-block;\n}\n","personFilter.js":"\nclass PersonFilter  {\n    filterParams;\n    filterText;\n    gui;\n    eFilterText;\n\n    init(params) {\n        this.filterParams = params;\n        this.filterText = null;\n        this.setupGui(params);\n    }\n\n    // not called by AG Grid, just for us to help setup\n    setupGui(params) {\n        this.gui = document.createElement('div');\n        this.gui.innerHTML = `<div class=\"person-filter\">\n                <div>Custom Athlete Filter</div>\n                <div>\n                    <input type=\"text\" id=\"filterText\" placeholder=\"Full name search...\"/>\n                </div>\n                <div>This filter does partial word search on multiple words, eg \"mich phel\" still brings back Michael Phelps.</div>\n            </div>\n        `;\n\n        const listener = (event) => {\n            this.filterText = event.target.value;\n            params.filterChangedCallback();\n        };\n\n        this.eFilterText = this.gui.querySelector('#filterText');\n        this.eFilterText.addEventListener('changed', listener);\n        this.eFilterText.addEventListener('paste', listener);\n        this.eFilterText.addEventListener('input', listener);\n    }\n\n    getGui() {\n        return this.gui;\n    }\n\n    doesFilterPass(params) {\n        const { node } = params;\n\n        // make sure each word passes separately, ie search for firstname, lastname\n        let passed = true;\n        this.filterText\n            ?.toLowerCase()\n            .split(' ')\n            .forEach((filterWord) => {\n                const value = this.filterParams.getValue(node);\n\n                if (value.toString().toLowerCase().indexOf(filterWord) < 0) {\n                    passed = false;\n                }\n            });\n\n        return passed;\n    }\n\n    isFilterActive() {\n        return this.filterText != null && this.filterText !== '';\n    }\n\n    getModel() {\n        if (!this.isFilterActive()) {\n            return null;\n        }\n\n        return { value: this.filterText };\n    }\n\n    setModel(model) {\n        const newValue = model == null ? null : model.value;\n        this.eFilterText.value = newValue;\n        this.filterText = newValue;\n    }\n\n    afterGuiAttached(params) {\n        if (!params?.suppressFocus) {\n            // focus the input element for keyboard navigation\n            this.eFilterText.focus();\n        }\n    }\n}\n","yearFilter.js":"\nclass YearFilter  {\n    eGui;\n    rbAllYears;\n    rbSince2010;\n    filterActive;\n    filterChangedCallback;\n\n    init(params) {\n        this.eGui = document.createElement('div');\n        this.eGui.innerHTML = `<div class=\"year-filter\">\n                <div>Select Year Range</div>\n                <label>  \n                    <input type=\"radio\" name=\"yearFilter\" checked=\"true\" id=\"rbAllYears\" filter-checkbox=\"true\"/> All\n                </label>\n                <label>  \n                    <input type=\"radio\" name=\"yearFilter\" id=\"rbSince2010\" filter-checkbox=\"true\"/> Since 2010\n                </label>\n            </div>`;\n        this.rbAllYears = this.eGui.querySelector('#rbAllYears');\n        this.rbSince2010 = this.eGui.querySelector('#rbSince2010');\n        this.rbAllYears.addEventListener('change', this.onRbChanged.bind(this));\n        this.rbSince2010.addEventListener('change', this.onRbChanged.bind(this));\n        this.filterActive = false;\n        this.filterChangedCallback = params.filterChangedCallback;\n    }\n\n    onRbChanged() {\n        this.filterActive = this.rbSince2010.checked;\n        this.filterChangedCallback();\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n\n    doesFilterPass(params) {\n        return params.data.year >= 2010;\n    }\n\n    isFilterActive() {\n        return this.filterActive;\n    }\n\n    // this example isn't using getModel() and setModel(),\n    // so safe to just leave these empty. don't do this in your code!!!\n    getModel() {}\n\n    setModel() {}\n}\n","main.js":"const columnDefs = [\n  { field: \"athlete\", minWidth: 150, filter: PersonFilter },\n  { field: \"year\", minWidth: 130, filter: YearFilter },\n  { field: \"country\", minWidth: 150 },\n  { field: \"sport\" },\n  { field: \"gold\" },\n  { field: \"silver\" },\n  { field: \"bronze\" },\n  { field: \"total\" },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n  defaultColDef: {\n    flex: 1,\n    minWidth: 100,\n  },\n  columnDefs: columnDefs,\n};\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then((data) => {\n      gridApi.setGridOption(\"rowData\", data);\n    });\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}