{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":[],"files":{"main.js":"let gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    { field: \"country\", rowGroup: true, hide: true },\n    { field: \"total\", aggFunc: \"range\" },\n    {\n      headerName: \"Gold to Silver\",\n      colId: \"goldSilverRatio\",\n      aggFunc: \"ratio\",\n      valueGetter: ratioValueGetter,\n      valueFormatter: ratioFormatter,\n    },\n  ],\n  aggFuncs: {\n    range: (params) => {\n      const values = params.values;\n      return values.length > 0\n        ? Math.max(...values) - Math.min(...values)\n        : null;\n    },\n    ratio: ratioAggFunc,\n  },\n  defaultColDef: {\n    flex: 1,\n    minWidth: 150,\n  },\n  autoGroupColumnDef: {\n    minWidth: 220,\n  },\n};\n\nfunction ratioValueGetter(params) {\n  if (!(params.node && params.node.group)) {\n    // no need to handle group levels - calculated in the 'ratioAggFunc'\n    return createValueObject(params.data.gold, params.data.silver);\n  }\n}\n\nfunction ratioAggFunc(params) {\n  let goldSum = 0;\n  let silverSum = 0;\n  params.values.forEach((value) => {\n    if (value && value.gold) {\n      goldSum += value.gold;\n    }\n    if (value && value.silver) {\n      silverSum += value.silver;\n    }\n  });\n  return createValueObject(goldSum, silverSum);\n}\n\nfunction createValueObject(gold, silver) {\n  return {\n    gold: gold,\n    silver: silver,\n    toString: () => `${gold && silver ? gold / silver : 0}`,\n  };\n}\n\nfunction ratioFormatter(params) {\n  if (!params.value || params.value === 0) return \"\";\n  return \"\" + Math.round(params.value * 100) / 100;\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then((data) => gridApi.setGridOption(\"rowData\", data));\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}