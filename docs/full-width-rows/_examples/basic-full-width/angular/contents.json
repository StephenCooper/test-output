{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"app.component.ts","styleFiles":[],"files":{"style.css":".example-full-width-pinned-row {\n    background-color: #2244cc44;\n    border: 2px solid rgb(32, 32, 171);\n    /* we want the border to be kept within the row height */\n    box-sizing: border-box;\n    /* get the row to fill the available height */\n    height: 100%;\n    /* grid sets white-space to one line, need to reset for wrapping the text */\n    white-space: normal;\n}\n\n.example-full-width-row {\n    background-color: #33cc3344;\n    border: 2px solid #35af35;\n    /* we want the border to be kept within the row height */\n    box-sizing: border-box;\n    /* get the row to fill the available height */\n    height: 100%;\n    /* grid sets white-space to one line, need to reset for wrapping the text */\n    white-space: normal;\n}\n","full-width-cell-renderer.component.ts":"import { ChangeDetectionStrategy, Component, signal } from '@angular/core';\n\nimport type { ICellRendererAngularComp } from 'ag-grid-angular';\nimport type { ICellRendererParams } from 'ag-grid-community';\n\n@Component({\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    template: ` <div [class]=\"cssClass\">\n        <button (click)=\"clicked()\">Click</button>\n        {{ message }}\n    </div>`,\n})\nexport class FullWidthCellRenderer implements ICellRendererAngularComp {\n    cssClass = signal('');\n    message = signal('');\n\n    agInit(params: ICellRendererParams): void {\n        this.cssClass.set(params.node.rowPinned ? 'example-full-width-pinned-row' : 'example-full-width-row');\n        this.message.set(\n            params.node.rowPinned\n                ? `Pinned full width row at index ${params.node.rowIndex}`\n                : `Normal full width row at index ${params.node.rowIndex}`\n        );\n    }\n\n    clicked() {\n        alert('button clicked');\n    }\n\n    refresh() {\n        return false;\n    }\n}\n","main.ts":"import '@angular/compiler';\nimport { provideHttpClient } from '@angular/common/http';\nimport { enableProdMode } from '@angular/core';\nimport { bootstrapApplication } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\nif ((window as any).ENABLE_PROD_MODE) {\n    enableProdMode();\n}\n\nbootstrapApplication(AppComponent, {\n    providers: [provideHttpClient()],\n});\n","app.component.ts":"import { Component } from \"@angular/core\";\nimport { AgGridAngular } from \"ag-grid-angular\";\nimport \"./style.css\";\nimport {\n  ClientSideRowModelModule,\n  ColDef,\n  ColGroupDef,\n  ColumnApiModule,\n  GridApi,\n  GridOptions,\n  GridReadyEvent,\n  IsFullWidthRowParams,\n  ModuleRegistry,\n  PinnedRowModule,\n  RowHeightParams,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\nModuleRegistry.registerModules([\n  ColumnApiModule,\n  PinnedRowModule,\n  ClientSideRowModelModule,\n  ValidationModule /* Development Only */,\n]);\nimport { FullWidthCellRenderer } from \"./full-width-cell-renderer.component\";\n\n@Component({\n  selector: \"my-app\",\n  standalone: true,\n  imports: [AgGridAngular, FullWidthCellRenderer],\n  template: `<ag-grid-angular\n    style=\"width: 100%; height: 100%;\"\n    [rowData]=\"rowData\"\n    [pinnedTopRowData]=\"pinnedTopRowData\"\n    [pinnedBottomRowData]=\"pinnedBottomRowData\"\n    [columnDefs]=\"columnDefs\"\n    [isFullWidthRow]=\"isFullWidthRow\"\n    [fullWidthCellRenderer]=\"fullWidthCellRenderer\"\n    [getRowHeight]=\"getRowHeight\"\n  /> `,\n})\nexport class AppComponent {\n  rowData: any[] | null = createData(100, \"body\");\n  pinnedTopRowData: any[] = createData(3, \"pinned\");\n  pinnedBottomRowData: any[] = createData(3, \"pinned\");\n  columnDefs: ColDef[] = getColumnDefs();\n  isFullWidthRow: (params: IsFullWidthRowParams) => boolean = (\n    params: IsFullWidthRowParams,\n  ) => {\n    // in this example, we check the fullWidth attribute that we set\n    // while creating the data. what check you do to decide if you\n    // want a row full width is up to you, as long as you return a boolean\n    // for this method.\n    return params.rowNode.data.fullWidth;\n  };\n  fullWidthCellRenderer: any = FullWidthCellRenderer;\n  getRowHeight: (params: RowHeightParams) => number | undefined | null = (\n    params: RowHeightParams,\n  ) => {\n    // you can have normal rows and full width rows any height that you want\n    const isBodyRow = params.node.rowPinned === undefined;\n    const isFullWidth = params.node.data.fullWidth;\n    if (isBodyRow && isFullWidth) {\n      return 75;\n    }\n  };\n}\n\nfunction getColumnDefs() {\n  const columnDefs: ColDef[] = [];\n  alphabet().forEach((letter) => {\n    const colDef: ColDef = {\n      headerName: letter,\n      field: letter,\n      width: 150,\n    };\n    if (letter === \"A\") {\n      colDef.pinned = \"left\";\n    }\n    if (letter === \"Z\") {\n      colDef.pinned = \"right\";\n    }\n    columnDefs.push(colDef);\n  });\n  return columnDefs;\n}\nfunction alphabet() {\n  return \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\n}\nfunction createData(count: number, prefix: string) {\n  const rowData = [];\n  for (let i = 0; i < count; i++) {\n    const item: any = {};\n    // mark every third row as full width. how you mark the row is up to you,\n    // in this example the example code (not the grid code) looks at the\n    // fullWidth attribute in the isFullWidthRow() callback. how you determine\n    // if a row is full width or not is totally up to you.\n    item.fullWidth = i % 3 === 2;\n    // put in a column for each letter of the alphabet\n    alphabet().forEach((letter) => {\n      item[letter] = prefix + \" (\" + letter + \",\" + i + \")\";\n    });\n    rowData.push(item);\n  }\n  return rowData;\n}\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","main.ts":"import '@angular/compiler';\nimport { provideHttpClient } from '@angular/common/http';\nimport { enableProdMode } from '@angular/core';\nimport { bootstrapApplication } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\nif ((window as any).ENABLE_PROD_MODE) {\n    enableProdMode();\n}\n\nbootstrapApplication(AppComponent, {\n    providers: [provideHttpClient()],\n});\n","systemjs.config.js":"(function (global) {\n    var ANGULAR_VERSION = '^19';\n    window.ENABLE_PROD_MODE = true;\n\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true,\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        // map tells the System loader where to look for things\n        map: {\n            '@angular/compiler': 'npm:@angular/compiler@' + ANGULAR_VERSION + '/fesm2022/compiler.mjs',\n            '@angular/platform-browser-dynamic':\n                'npm:@angular/platform-browser-dynamic@' + ANGULAR_VERSION + '/fesm2022/platform-browser-dynamic.mjs',\n\n            '@angular/core': 'npm:@angular/core@' + ANGULAR_VERSION + '/fesm2022/core.mjs',\n            '@angular/core/primitives/signals':\n                'npm:@angular/core@' + ANGULAR_VERSION + '/fesm2022/primitives/signals.mjs',\n            '@angular/core/primitives/event-dispatch':\n                'npm:@angular/core@' + ANGULAR_VERSION + '/fesm2022/primitives/event-dispatch.mjs',\n            '@angular/common': 'npm:@angular/common@' + ANGULAR_VERSION + '/fesm2022/common.mjs',\n            '@angular/common/http': 'npm:@angular/common@' + ANGULAR_VERSION + '/fesm2022/http.mjs',\n\n            '@angular/platform-browser':\n                'npm:@angular/platform-browser@' + ANGULAR_VERSION + '/fesm2022/platform-browser.mjs',\n            '@angular/platform-browser/animations':\n                'npm:@angular/platform-browser@' + ANGULAR_VERSION + '/fesm2022/animations.mjs',\n\n            '@angular/forms': 'npm:@angular/forms@' + ANGULAR_VERSION + '/fesm2022/forms.mjs',\n            '@angular/animations': 'npm:@angular/animations@' + ANGULAR_VERSION + '/fesm2022/animations.mjs',\n            '@angular/animations/browser': 'npm:@angular/animations@' + ANGULAR_VERSION + '/fesm2022/browser.mjs',\n\n            rxjs: 'npm:rxjs@7.8.1/dist/bundles/rxjs.umd.min.js',\n            'rxjs/operators': 'npm:rxjs@7.8.1/dist/bundles/rxjs.umd.min.js',\n\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@4.4/lib/typescript.min.js',\n\n            // our app is within the app folder, appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap,\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {}, // Stop css.js from defaulting to apps .ts extension\n            app: {\n                main: './main.ts',\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-angular': {\n                main: './fesm2022/ag-grid-angular.mjs',\n                defaultExtension: 'mjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"@angular/core":"^19","@angular/common":"^19","@angular/forms":"^19","@angular/platform-browser":"^19","ag-grid-angular":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}