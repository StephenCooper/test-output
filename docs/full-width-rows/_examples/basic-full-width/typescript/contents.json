{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"main.ts","styleFiles":["style.css"],"files":{"style.css":".example-full-width-pinned-row {\n    background-color: #2244cc44;\n    border: 2px solid rgb(32, 32, 171);\n    /* we want the border to be kept within the row height */\n    box-sizing: border-box;\n    /* get the row to fill the available height */\n    height: 100%;\n    /* grid sets white-space to one line, need to reset for wrapping the text */\n    white-space: normal;\n}\n\n.example-full-width-row {\n    background-color: #33cc3344;\n    border: 2px solid #35af35;\n    /* we want the border to be kept within the row height */\n    box-sizing: border-box;\n    /* get the row to fill the available height */\n    height: 100%;\n    /* grid sets white-space to one line, need to reset for wrapping the text */\n    white-space: normal;\n}\n","fullWidthCellRenderer.ts":"import type { ICellRendererComp, ICellRendererParams } from 'ag-grid-community';\n\nexport class FullWidthCellRenderer implements ICellRendererComp {\n    eGui!: HTMLDivElement;\n    private cssClass!: string;\n    private message!: string;\n\n    init(params: ICellRendererParams) {\n        // pinned rows will have node.rowPinned set to either 'top' or 'bottom' - see docs for row pinning\n        if (params.node.rowPinned) {\n            this.cssClass = 'example-full-width-pinned-row';\n            this.message = `Pinned full width row at index ${params.node.rowIndex}`;\n        } else {\n            this.cssClass = 'example-full-width-row';\n            this.message = `Normal full width row at index ${params.node.rowIndex}`;\n        }\n\n        this.eGui = document.createElement('div');\n\n        this.eGui.innerHTML = `<div class=\"${this.cssClass}\"><button>Click</button> ${this.message}</div>`;\n\n        const eButton = this.eGui.querySelector('button')!;\n        eButton.addEventListener('click', function () {\n            alert('button clicked');\n        });\n    }\n\n    getGui() {\n        return this.eGui.firstChild as any;\n    }\n\n    refresh() {\n        return false;\n    }\n}\n","main.ts":"import {\n  ClientSideRowModelModule,\n  ColDef,\n  ColGroupDef,\n  ColumnApiModule,\n  GridApi,\n  GridOptions,\n  IsFullWidthRowParams,\n  ModuleRegistry,\n  PinnedRowModule,\n  RowHeightParams,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\nimport { FullWidthCellRenderer } from \"./fullWidthCellRenderer\";\n\nModuleRegistry.registerModules([\n  ColumnApiModule,\n  PinnedRowModule,\n  ClientSideRowModelModule,\n  ValidationModule /* Development Only */,\n]);\n\nconst rowData = createData(100, \"body\");\nconst pinnedTopRowData = createData(3, \"pinned\");\nconst pinnedBottomRowData = createData(3, \"pinned\");\n\nfunction getColumnDefs() {\n  const columnDefs: ColDef[] = [];\n  alphabet().forEach((letter) => {\n    const colDef: ColDef = {\n      headerName: letter,\n      field: letter,\n      width: 150,\n    };\n    if (letter === \"A\") {\n      colDef.pinned = \"left\";\n    }\n    if (letter === \"Z\") {\n      colDef.pinned = \"right\";\n    }\n    columnDefs.push(colDef);\n  });\n  return columnDefs;\n}\n\nlet gridApi: GridApi;\n\nconst gridOptions: GridOptions = {\n  columnDefs: getColumnDefs(),\n  rowData: rowData,\n  pinnedTopRowData: pinnedTopRowData,\n  pinnedBottomRowData: pinnedBottomRowData,\n  isFullWidthRow: (params: IsFullWidthRowParams) => {\n    // in this example, we check the fullWidth attribute that we set\n    // while creating the data. what check you do to decide if you\n    // want a row full width is up to you, as long as you return a boolean\n    // for this method.\n    return params.rowNode.data.fullWidth;\n  },\n  // see AG Grid docs cellRenderer for details on how to build cellRenderers\n  // this is a simple function cellRenderer, returns plain HTML, not a component\n  fullWidthCellRenderer: FullWidthCellRenderer,\n  getRowHeight: (params: RowHeightParams) => {\n    // you can have normal rows and full width rows any height that you want\n    const isBodyRow = params.node.rowPinned === undefined;\n    const isFullWidth = params.node.data.fullWidth;\n    if (isBodyRow && isFullWidth) {\n      return 75;\n    }\n  },\n};\n\nfunction alphabet() {\n  return \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\n}\n\nfunction createData(count: number, prefix: string) {\n  const rowData = [];\n  for (let i = 0; i < count; i++) {\n    const item: any = {};\n    // mark every third row as full width. how you mark the row is up to you,\n    // in this example the example code (not the grid code) looks at the\n    // fullWidth attribute in the isFullWidthRow() callback. how you determine\n    // if a row is full width or not is totally up to you.\n    item.fullWidth = i % 3 === 2;\n    // put in a column for each letter of the alphabet\n    alphabet().forEach((letter) => {\n      item[letter] = prefix + \" (\" + letter + \",\" + i + \")\";\n    });\n    rowData.push(item);\n  }\n  return rowData;\n}\n\n// setup the grid after the page has finished loading\nconst gridDiv = document.querySelector<HTMLElement>(\"#myGrid\")!;\ngridApi = createGrid(gridDiv, gridOptions);\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {},\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        // map tells the System loader where to look for things\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            // appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap,\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {},\n            app: {\n                main: './main.ts',\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}