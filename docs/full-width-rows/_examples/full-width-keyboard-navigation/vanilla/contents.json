{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["data.js","fullWidthCellRenderer.js","main.js"],"styleFiles":["style.css"],"files":{"style.css":".full-width-panel {\n    white-space: normal;\n    height: 100%;\n    width: 100%;\n    border: 2px solid grey;\n    border-style: ridge;\n    box-sizing: border-box;\n    background-color: #ccaa22a9;\n    display: flex;\n    align-items: center;\n    gap: 5px;\n    padding-left: var(--ag-cell-horizontal-padding);\n}\n\n.full-width-panel input {\n    width: 80px;\n}\n\n.ag-row:focus .full-width-panel {\n    background-color: #ccaa22cc;\n}\n","data.js":"function getData() {\n    const rowData = [\n        {\n            // these attributes appear in the top level rows of the grid\n            name: 'Ireland',\n            continent: 'Europe',\n            language: 'English',\n            code: 'ie',\n            // these are used in the panel\n            population: 4000000,\n        },\n        // and then repeat for all the other countries\n        {\n            name: 'Spain',\n            continent: 'Europe',\n            language: 'Spanish',\n            code: 'es',\n            population: 4000000,\n        },\n        {\n            name: 'United Kingdom',\n            continent: 'Europe',\n            language: 'English',\n            code: 'gb',\n            population: 4000000,\n        },\n        {\n            name: 'France',\n            continent: 'Europe',\n            language: 'French',\n            code: 'fr',\n            population: 4000000,\n        },\n        {\n            name: 'Germany',\n            continent: 'Europe',\n            language: 'German',\n            code: 'de',\n            population: 4000000,\n        },\n        {\n            name: 'Sweden',\n            continent: 'Europe',\n            language: 'Swedish',\n            code: 'se',\n            population: 4000000,\n        },\n        {\n            name: 'Norway',\n            continent: 'Europe',\n            language: 'Norwegian',\n            code: 'no',\n            population: 4000000,\n        },\n        {\n            name: 'Italy',\n            continent: 'Europe',\n            language: 'Italian',\n            code: 'it',\n            population: 4000000,\n        },\n        {\n            name: 'Greece',\n            continent: 'Europe',\n            language: 'Greek',\n            code: 'gr',\n            population: 4000000,\n        },\n        {\n            name: 'Iceland',\n            continent: 'Europe',\n            language: 'Icelandic',\n            code: 'is',\n            population: 4000000,\n        },\n        {\n            name: 'Portugal',\n            continent: 'Europe',\n            language: 'Portuguese',\n            code: 'pt',\n            population: 4000000,\n        },\n        {\n            name: 'Malta',\n            continent: 'Europe',\n            language: 'Maltese',\n            code: 'mt',\n            population: 4000000,\n        },\n        {\n            name: 'Brazil',\n            continent: 'South America',\n            language: 'Portuguese',\n            code: 'br',\n            population: 4000000,\n        },\n        {\n            name: 'Argentina',\n            continent: 'South America',\n            language: 'Spanish',\n            code: 'ar',\n            population: 4000000,\n        },\n        {\n            name: 'Colombia',\n            continent: 'South America',\n            language: 'Spanish',\n            code: 'co',\n            population: 4000000,\n        },\n        {\n            name: 'Peru',\n            continent: 'South America',\n            language: 'Spanish',\n            code: 'pe',\n            population: 4000000,\n        },\n        {\n            name: 'Venezuela',\n            continent: 'South America',\n            language: 'Spanish',\n            code: 've',\n            population: 4000000,\n        },\n        {\n            name: 'Uruguay',\n            continent: 'South America',\n            language: 'Spanish',\n            code: 'uy',\n            population: 4000000,\n        },\n    ];\n    return rowData;\n}\n","fullWidthCellRenderer.js":"\nclass FullWidthCellRenderer  {\n     eGui;\n\n    init(params) {\n        this.eGui = document.createElement('div');\n        this.eGui.classList.add('full-width-panel');\n        this.eGui.innerHTML = `\n            <button><img width=\"15\" height=\"10\" src=\"https://www.ag-grid.com/example-assets/flags/${params.data.code}.png\"></button>\n            <input value=\"${params.data.name}\"/>\n            <a href=\"https://www.google.com/search?q=${params.data.language}\" target=\"_blank\">${params.data.language}</a>\n        `;\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n\n    refresh(params) {\n        return false;\n    }\n}\n","main.js":"const GRID_CELL_CLASSNAME = \"ag-full-width-row\";\n\nfunction getAllFocusableElementsOf(el) {\n  return Array.from(\n    el.querySelectorAll(\n      'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])',\n    ),\n  ).filter((focusableEl) => {\n    return focusableEl.tabIndex !== -1;\n  });\n}\n\nfunction getEventPath(event) {\n  const path = [];\n  let currentTarget = event.target;\n\n  while (currentTarget) {\n    path.push(currentTarget);\n    currentTarget = currentTarget.parentElement;\n  }\n\n  return path;\n}\n\n/**\n * Capture whether the user is tabbing forwards or backwards and suppress keyboard event if tabbing\n * outside of the children\n */\nfunction suppressKeyboardEvent({ event }) {\n  const { key, shiftKey } = event;\n  const path = getEventPath(event);\n  const isTabForward = key === \"Tab\" && shiftKey === false;\n  const isTabBackward = key === \"Tab\" && shiftKey === true;\n\n  let suppressEvent = false;\n\n  // Handle cell children tabbing\n  if (isTabForward || isTabBackward) {\n    const eGridCell = path.find((el) => {\n      if (el.classList === undefined) return false;\n      return el.classList.contains(GRID_CELL_CLASSNAME);\n    });\n\n    if (!eGridCell) {\n      return suppressEvent;\n    }\n\n    const focusableChildrenElements = getAllFocusableElementsOf(eGridCell);\n    const lastCellChildEl =\n      focusableChildrenElements[focusableChildrenElements.length - 1];\n    const firstCellChildEl = focusableChildrenElements[0];\n\n    // Suppress keyboard event if tabbing forward within the cell and the current focused element is not the last child\n    if (isTabForward && focusableChildrenElements.length > 0) {\n      const isLastChildFocused =\n        lastCellChildEl && document.activeElement === lastCellChildEl;\n      if (!isLastChildFocused) {\n        suppressEvent = true;\n      }\n    }\n    // Suppress keyboard event if tabbing backwards within the cell, and the current focused element is not the first child\n    else if (isTabBackward && focusableChildrenElements.length > 0) {\n      const cellHasFocusedChildren =\n        eGridCell.contains(document.activeElement) &&\n        eGridCell !== document.activeElement;\n\n      // Manually set focus to the last child element if cell doesn't have focused children\n      if (!cellHasFocusedChildren) {\n        lastCellChildEl.focus();\n        // Cancel keyboard press, so that it doesn't focus on the last child and then pass through the keyboard press to\n        // move to the 2nd last child element\n        event.preventDefault();\n      }\n\n      const isFirstChildFocused =\n        firstCellChildEl && document.activeElement === firstCellChildEl;\n      if (!isFirstChildFocused) {\n        suppressEvent = true;\n      }\n    }\n  }\n\n  return suppressEvent;\n}\n\nlet gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    { field: \"name\" },\n    { field: \"continent\" },\n    { field: \"language\" },\n  ],\n  defaultColDef: {\n    flex: 1,\n    filter: true,\n    suppressKeyboardEvent,\n  },\n  rowData: getData(),\n  isFullWidthRow: (params) => {\n    return isFullWidth(params.rowNode.data);\n  },\n  // see AG Grid docs cellRenderer for details on how to build cellRenderers\n  fullWidthCellRenderer: FullWidthCellRenderer,\n};\n\nfunction isFullWidth(data) {\n  // return true when country is Peru, France or Italy\n  return [\"Peru\", \"France\", \"Italy\"].includes(data.name);\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}