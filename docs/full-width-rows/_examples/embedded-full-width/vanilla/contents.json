{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["fullWidthCellRenderer.js","main.js"],"styleFiles":["style.css"],"files":{"style.css":".example-full-width-pinned {\n    background-color: #2244cc44;\n    border: 2px solid rgb(32, 32, 171);\n    /* we want the border to be kept within the row height */\n    box-sizing: border-box;\n    /* get the row to fill the available height */\n    height: 100%;\n    /* grid sets white-space to one line, need to reset for wrapping the text */\n    white-space: normal;\n}\n\n.example-full-width-row {\n    background-color: #33cc3344;\n    border: 2px solid #35af35;\n    /* we want the border to be kept within the row height */\n    box-sizing: border-box;\n    /* get the row to fill the available height */\n    height: 100%;\n    /* grid sets white-space to one line, need to reset for wrapping the text */\n    white-space: normal;\n}\n","fullWidthCellRenderer.js":"\nclass FullWidthCellRenderer  {\n    eGui;\n     cssClass;\n     message;\n\n    init(params) {\n        // pinned rows will have node.rowPinned set to either 'top' or 'bottom' - see docs for row pinning\n        if (params.pinned) {\n            this.cssClass = 'example-full-width-pinned';\n            this.message = `Pinned full width on ${params.pinned} - index ${params.node.rowIndex}`;\n        } else {\n            this.cssClass = 'example-full-width-row';\n            this.message = `Non pinned full width row at index ${params.node.rowIndex}`;\n        }\n\n        this.eGui = document.createElement('div');\n\n        this.eGui.innerHTML = `<div class=\"${this.cssClass}\"><button>Click</button> ${this.message}</div>`;\n\n        const eButton = this.eGui.querySelector('button');\n        eButton.addEventListener('click', function () {\n            alert('button clicked');\n        });\n    }\n\n    getGui() {\n        return this.eGui.firstChild ;\n    }\n\n    refresh() {\n        return false;\n    }\n}\n","main.js":"const rowData = createData(100, \"body\");\n\nfunction getColumnDefs() {\n  const columnDefs = [];\n  alphabet().forEach((letter) => {\n    const colDef = {\n      headerName: letter,\n      field: letter,\n      width: 100,\n    };\n    if (letter === \"A\" || letter === \"B\") {\n      colDef.pinned = \"left\";\n    }\n    if (letter === \"Z\" || letter === \"Y\") {\n      colDef.pinned = \"right\";\n    }\n    columnDefs.push(colDef);\n  });\n  return columnDefs;\n}\n\nlet gridApi;\n\nconst gridOptions = {\n  columnDefs: getColumnDefs(),\n  rowData: rowData,\n  embedFullWidthRows: true,\n  isFullWidthRow: (params) => {\n    // in this example, we check the fullWidth attribute that we set\n    // while creating the data. what check you do to decide if you\n    // want a row full width is up to you, as long as you return a boolean\n    // for this method.\n    return params.rowNode.data.fullWidth;\n  },\n  // see AG Grid docs cellRenderer for details on how to build cellRenderers\n  // this is a simple function cellRenderer, returns plain HTML, not a component\n  fullWidthCellRenderer: FullWidthCellRenderer,\n  getRowHeight: (params) => {\n    // you can have normal rows and full width rows any height that you want\n    const isBodyRow = params.node.rowPinned === undefined;\n    const isFullWidth = params.node.data.fullWidth;\n    if (isBodyRow && isFullWidth) {\n      return 75;\n    }\n  },\n};\n\nfunction alphabet() {\n  return \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\n}\n\nfunction createData(count, prefix) {\n  const rowData = [];\n  for (let i = 0; i < count; i++) {\n    const item = {};\n    // mark every third row as full width. how you mark the row is up to you,\n    // in this example the example code (not the grid code) looks at the\n    // fullWidth attribute in the isFullWidthRow() callback. how you determine\n    // if a row is full width or not is totally up to you.\n    item.fullWidth = i % 3 === 2;\n    // put in a column for each letter of the alphabet\n    alphabet().forEach((letter) => {\n      item[letter] = prefix + \" (\" + letter + \",\" + i + \")\";\n    });\n    rowData.push(item);\n  }\n  return rowData;\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}