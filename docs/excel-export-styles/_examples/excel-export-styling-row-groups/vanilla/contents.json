{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":["style.css"],"files":{"style.css":".page-wrapper {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n.grid-wrapper {\n    flex: 1 1 0px;\n}\n","main.js":"let gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    { field: \"country\", minWidth: 120, rowGroup: true },\n    { field: \"year\", rowGroup: true },\n    { headerName: \"Name\", field: \"athlete\", minWidth: 150 },\n    {\n      headerName: \"Name Length\",\n      valueGetter: 'data ? data.athlete.length : \"\"',\n    },\n    { field: \"sport\", minWidth: 120, rowGroup: true },\n    { field: \"silver\" },\n    { field: \"bronze\" },\n    { field: \"total\" },\n  ],\n\n  defaultColDef: {\n    filter: true,\n    minWidth: 100,\n    flex: 1,\n  },\n\n  groupDefaultExpanded: -1,\n\n  autoGroupColumnDef: {\n    cellClass: getIndentClass,\n    minWidth: 250,\n    flex: 1,\n  },\n\n  excelStyles: [\n    {\n      id: \"indent-1\",\n      alignment: {\n        indent: 1,\n      },\n      // note, dataType: 'string' required to ensure that numeric values aren't right-aligned\n      dataType: \"String\",\n    },\n    {\n      id: \"indent-2\",\n      alignment: {\n        indent: 2,\n      },\n      dataType: \"String\",\n    },\n    {\n      id: \"indent-3\",\n      alignment: {\n        indent: 3,\n      },\n      dataType: \"String\",\n    },\n  ],\n};\n\nfunction rowGroupCallback(params) {\n  return params.node.key;\n}\n\nfunction getIndentClass(params) {\n  let indent = 0;\n  let node = params.node;\n\n  while (node && node.parent) {\n    indent++;\n    node = node.parent;\n  }\n  return \"indent-\" + indent;\n}\n\nfunction onBtnExportDataAsExcel() {\n  gridApi.exportDataAsExcel({\n    processRowGroupCallback: rowGroupCallback,\n  });\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then(function (data) {\n      gridApi.setGridOption(\"rowData\", data);\n    });\n});\n","index.html":"<div class=\"page-wrapper\">\n    <div>\n        <button onclick=\"onBtnExportDataAsExcel()\" style=\"margin-bottom: 5px; font-weight: bold\">\n            Export to Excel\n        </button>\n    </div>\n\n    <div class=\"grid-wrapper\">\n        <div id=\"myGrid\" style=\"height: 100%\"></div>\n    </div>\n</div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}