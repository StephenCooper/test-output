{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"main.ts","styleFiles":[],"files":{"countries.ts":"export function countries() {\n    return [\n        'United States',\n        'Russia',\n        'Australia',\n        'Canada',\n        'Norway',\n        'China',\n        'Zimbabwe',\n        'Netherlands',\n        'South Korea',\n        'Croatia',\n        'France',\n        'Japan',\n        'Hungary',\n        'Germany',\n        'Poland',\n        'South Africa',\n        'Sweden',\n        'Ukraine',\n        'Italy',\n        'Czech Republic',\n        'Austria',\n        'Finland',\n        'Romania',\n        'Great Britain',\n        'Jamaica',\n        'Singapore',\n        'Belarus',\n        'Chile',\n        'Spain',\n        'Tunisia',\n        'Brazil',\n        'Slovakia',\n        'Costa Rica',\n        'Bulgaria',\n        'Switzerland',\n        'New Zealand',\n        'Estonia',\n        'Kenya',\n        'Ethiopia',\n        'Trinidad and Tobago',\n        'Turkey',\n        'Morocco',\n        'Bahamas',\n        'Slovenia',\n        'Armenia',\n        'Azerbaijan',\n        'India',\n        'Puerto Rico',\n        'Egypt',\n        'Kazakhstan',\n        'Iran',\n        'Georgia',\n        'Lithuania',\n        'Cuba',\n        'Colombia',\n        'Mongolia',\n        'Uzbekistan',\n        'North Korea',\n        'Tajikistan',\n        'Kyrgyzstan',\n        'Greece',\n        'Macedonia',\n        'Moldova',\n        'Chinese Taipei',\n        'Indonesia',\n        'Thailand',\n        'Vietnam',\n        'Latvia',\n        'Venezuela',\n        'Mexico',\n        'Nigeria',\n        'Qatar',\n        'Serbia',\n        'Serbia and Montenegro',\n        'Hong Kong',\n        'Denmark',\n        'Portugal',\n        'Argentina',\n        'Afghanistan',\n        'Gabon',\n        'Dominican Republic',\n        'Belgium',\n        'Kuwait',\n        'United Arab Emirates',\n        'Cyprus',\n        'Israel',\n        'Algeria',\n        'Montenegro',\n        'Iceland',\n        'Paraguay',\n        'Cameroon',\n        'Saudi Arabia',\n        'Ireland',\n        'Malaysia',\n        'Uruguay',\n        'Togo',\n        'Mauritius',\n        'Syria',\n        'Botswana',\n        'Guatemala',\n        'Bahrain',\n        'Grenada',\n        'Uganda',\n        'Sudan',\n        'Ecuador',\n        'Panama',\n        'Eritrea',\n        'Sri Lanka',\n        'Mozambique',\n        'Barbados',\n    ];\n}\n","main.ts":"import {\n  ColDef,\n  ColGroupDef,\n  GetRowIdFunc,\n  GetRowIdParams,\n  GridApi,\n  GridOptions,\n  ICellRendererParams,\n  IDatasource,\n  IGetRowsParams,\n  InfiniteRowModelModule,\n  ModuleRegistry,\n  NumberFilterModule,\n  PaginationModule,\n  RowModelType,\n  SortModelItem,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\nimport {\n  ColumnMenuModule,\n  ColumnsToolPanelModule,\n  ContextMenuModule,\n  SetFilterModule,\n} from \"ag-grid-enterprise\";\nimport { countries } from \"./countries\";\nimport { IOlympicData } from \"./interfaces\";\n\nModuleRegistry.registerModules([\n  PaginationModule,\n  ColumnsToolPanelModule,\n  InfiniteRowModelModule,\n  ColumnMenuModule,\n  ContextMenuModule,\n  SetFilterModule,\n  NumberFilterModule,\n  ValidationModule /* Development Only */,\n]);\n\nconst filterParams = { values: countries() };\nconst columnDefs: ColDef[] = [\n  // this row just shows the row index, doesn't use any data from the row\n  {\n    headerName: \"ID\",\n    maxWidth: 100,\n    valueGetter: \"node.id\",\n    cellRenderer: (params: ICellRendererParams) => {\n      if (params.value !== undefined) {\n        return params.value;\n      } else {\n        return '<img src=\"https://www.ag-grid.com/example-assets/loading.gif\">';\n      }\n    },\n    // we don't want to sort by the row index, this doesn't make sense as the point\n    // of the row index is to know the row index in what came back from the server\n    sortable: false,\n    suppressHeaderMenuButton: true,\n  },\n  { headerName: \"Athlete\", field: \"athlete\", suppressHeaderMenuButton: true },\n  {\n    field: \"age\",\n    filter: \"agNumberColumnFilter\",\n    filterParams: {\n      filterOptions: [\"equals\", \"lessThan\", \"greaterThan\"],\n    },\n  },\n  {\n    field: \"country\",\n    filter: \"agSetColumnFilter\",\n    filterParams: filterParams,\n  },\n  {\n    field: \"year\",\n    filter: \"agSetColumnFilter\",\n    filterParams: { values: [\"2000\", \"2004\", \"2008\", \"2012\"] },\n  },\n  { field: \"date\" },\n  { field: \"sport\", suppressHeaderMenuButton: true },\n  { field: \"gold\", suppressHeaderMenuButton: true },\n  { field: \"silver\", suppressHeaderMenuButton: true },\n  { field: \"bronze\", suppressHeaderMenuButton: true },\n  { field: \"total\", suppressHeaderMenuButton: true },\n];\n\nlet gridApi: GridApi<IOlympicData>;\n\nconst gridOptions: GridOptions<IOlympicData> = {\n  columnDefs: columnDefs,\n  defaultColDef: {\n    flex: 1,\n    minWidth: 150,\n    floatingFilter: true,\n  },\n  rowModelType: \"infinite\",\n  cacheBlockSize: 100,\n  cacheOverflowSize: 2,\n  maxConcurrentDatasourceRequests: 2,\n  infiniteInitialRowCount: 1,\n  maxBlocksInCache: 2,\n  pagination: true,\n  paginationAutoPageSize: true,\n  getRowId: (params: GetRowIdParams) => {\n    return params.data.id;\n  },\n};\n\nfunction sortAndFilter(\n  allOfTheData: any[],\n  sortModel: SortModelItem[],\n  filterModel: any,\n) {\n  return sortData(sortModel, filterData(filterModel, allOfTheData));\n}\n\nfunction sortData(sortModel: SortModelItem[], data: any[]) {\n  const sortPresent = sortModel && sortModel.length > 0;\n  if (!sortPresent) {\n    return data;\n  }\n  // do an in memory sort of the data, across all the fields\n  const resultOfSort = data.slice();\n  resultOfSort.sort(function (a, b) {\n    for (let k = 0; k < sortModel.length; k++) {\n      const sortColModel = sortModel[k];\n      const valueA = a[sortColModel.colId];\n      const valueB = b[sortColModel.colId];\n      // this filter didn't find a difference, move onto the next one\n      if (valueA == valueB) {\n        continue;\n      }\n      const sortDirection = sortColModel.sort === \"asc\" ? 1 : -1;\n      if (valueA > valueB) {\n        return sortDirection;\n      } else {\n        return sortDirection * -1;\n      }\n    }\n    // no filters found a difference\n    return 0;\n  });\n  return resultOfSort;\n}\n\nfunction filterData(filterModel: any, data: any[]) {\n  const filterPresent = filterModel && Object.keys(filterModel).length > 0;\n  if (!filterPresent) {\n    return data;\n  }\n\n  const resultOfFilter = [];\n  for (let i = 0; i < data.length; i++) {\n    const item = data[i];\n\n    if (filterModel.age) {\n      const age = item.age;\n      const allowedAge = parseInt(filterModel.age.filter);\n      // EQUALS = 1;\n      // LESS_THAN = 2;\n      // GREATER_THAN = 3;\n      if (filterModel.age.type == \"equals\") {\n        if (age !== allowedAge) {\n          continue;\n        }\n      } else if (filterModel.age.type == \"lessThan\") {\n        if (age >= allowedAge) {\n          continue;\n        }\n      } else {\n        if (age <= allowedAge) {\n          continue;\n        }\n      }\n    }\n\n    if (filterModel.year) {\n      if (filterModel.year.values.indexOf(item.year.toString()) < 0) {\n        // year didn't match, so skip this record\n        continue;\n      }\n    }\n\n    if (filterModel.country) {\n      if (filterModel.country.values.indexOf(item.country) < 0) {\n        continue;\n      }\n    }\n\n    resultOfFilter.push(item);\n  }\n\n  return resultOfFilter;\n}\n\n// setup the grid after the page has finished loading\nconst gridDiv = document.querySelector<HTMLElement>(\"#myGrid\")!;\ngridApi = createGrid(gridDiv, gridOptions);\n\nfetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n  .then((response) => response.json())\n  .then(function (data) {\n    data.forEach(function (d: any, index: number) {\n      d.id = \"R\" + (index + 1);\n    });\n\n    const dataSource: IDatasource = {\n      rowCount: undefined, // behave as infinite scroll\n      getRows: (params: IGetRowsParams) => {\n        console.log(\"asking for \" + params.startRow + \" to \" + params.endRow);\n        // At this point in your code, you would call the server.\n        // To make the demo look real, wait for 500ms before returning\n        setTimeout(() => {\n          // take a slice of the total rows\n          const dataAfterSortingAndFiltering = sortAndFilter(\n            data,\n            params.sortModel,\n            params.filterModel,\n          );\n          const rowsThisPage = dataAfterSortingAndFiltering.slice(\n            params.startRow,\n            params.endRow,\n          );\n          // if on or after the last page, work out the last row.\n          let lastRow = -1;\n          if (dataAfterSortingAndFiltering.length <= params.endRow) {\n            lastRow = dataAfterSortingAndFiltering.length;\n          }\n          // call the success callback\n          params.successCallback(rowsThisPage, lastRow);\n        }, 500);\n      },\n    };\n\n    gridApi!.setGridOption(\"datasource\", dataSource);\n  });\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {},\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        // map tells the System loader where to look for things\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            // appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap,\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {},\n            app: {\n                main: './main.ts',\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}