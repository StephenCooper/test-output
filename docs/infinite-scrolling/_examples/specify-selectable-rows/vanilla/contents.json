{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":[],"files":{"main.js":"let gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    // this row shows the row index, doesn't use any data from the row\n    {\n      headerName: \"ID\",\n      maxWidth: 100,\n      // it is important to have node.id here, so that when the id changes (which happens\n      // when the row is loaded) then the cell is refreshed.\n      valueGetter: \"node.id\",\n      cellRenderer: (params) => {\n        if (params.value !== undefined) {\n          return params.value;\n        } else {\n          return '<img src=\"https://www.ag-grid.com/example-assets/loading.gif\">';\n        }\n      },\n    },\n    { field: \"athlete\", minWidth: 200 },\n    { field: \"age\" },\n    { field: \"country\", minWidth: 200 },\n    { field: \"year\" },\n    { field: \"date\", minWidth: 150 },\n    { field: \"sport\", minWidth: 150 },\n    { field: \"gold\" },\n    { field: \"silver\" },\n    { field: \"bronze\" },\n    { field: \"total\" },\n  ],\n  defaultColDef: {\n    flex: 1,\n    minWidth: 100,\n    sortable: false,\n  },\n  rowBuffer: 0,\n  rowSelection: {\n    mode: \"multiRow\",\n    hideDisabledCheckboxes: true,\n    headerCheckbox: false,\n    isRowSelectable: (rowNode) => {\n      return rowNode.data ? rowNode.data.country === \"United States\" : false;\n    },\n  },\n  // tell grid we want virtual row model type\n  rowModelType: \"infinite\",\n  // how big each page in our page cache will be, default is 100\n  cacheBlockSize: 100,\n  // how many extra blank rows to display to the user at the end of the dataset,\n  // which sets the vertical scroll and then allows the grid to request viewing more rows of data.\n  // default is 1, ie show 1 row.\n  cacheOverflowSize: 2,\n  // how many server side requests to send at a time. if user is scrolling lots, then the requests\n  // are throttled down\n  maxConcurrentDatasourceRequests: 2,\n  // how many rows to initially show in the grid. having 1 shows a blank row, so it looks like\n  // the grid is loading from the users perspective (as we have a spinner in the first col)\n  infiniteInitialRowCount: 1,\n  // how many pages to store in cache. default is undefined, which allows an infinite sized cache,\n  // pages are never purged. this should be set for large data to stop your browser from getting\n  // full of data\n  maxBlocksInCache: 2,\n};\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then(function (data) {\n      const dataSource = {\n        rowCount: undefined, // behave as infinite scroll\n        getRows: (params) => {\n          // console.log('asking for ' + params.startRow + ' to ' + params.endRow);\n          // At this point in your code, you would call the server.\n          // To make the demo look real, wait for 500ms before returning\n          setTimeout(() => {\n            // take a slice of the total rows\n            const rowsThisPage = data.slice(params.startRow, params.endRow);\n            // if on or after the last page, work out the last row.\n            let lastRow = -1;\n            if (data.length <= params.endRow) {\n              lastRow = data.length;\n            }\n            // call the success callback\n            params.successCallback(rowsThisPage, lastRow);\n          }, 500);\n        },\n      };\n\n      gridApi.setGridOption(\"datasource\", dataSource);\n    });\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}