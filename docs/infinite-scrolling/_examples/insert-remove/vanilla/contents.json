{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":[],"files":{"main.js":"const valueFormatter = function (params) {\n  if (typeof params.value === \"number\") {\n    return \"Â£\" + params.value.toLocaleString();\n  } else {\n    return params.value;\n  }\n};\nconst columnDefs = [\n  {\n    headerName: \"Item ID\",\n    field: \"id\",\n    valueGetter: \"node.id\",\n    cellRenderer: (params) => {\n      if (params.value !== undefined) {\n        return params.value;\n      } else {\n        return '<img src=\"https://www.ag-grid.com/example-assets/loading.gif\">';\n      }\n    },\n  },\n  { field: \"make\" },\n  { field: \"model\" },\n  {\n    field: \"price\",\n    valueFormatter: valueFormatter,\n  },\n];\n\nconst datasource = {\n  rowCount: undefined, // behave as infinite scroll\n  getRows: (params) => {\n    console.log(\"asking for \" + params.startRow + \" to \" + params.endRow);\n    // At this point in your code, you would call the server.\n    // To make the demo look real, wait for 500ms before returning\n    setTimeout(() => {\n      // take a slice of the total rows\n      const rowsThisPage = allOfTheData.slice(params.startRow, params.endRow);\n      // make a copy of each row - this is what would happen if taking data from server\n      for (let i = 0; i < rowsThisPage.length; i++) {\n        const item = rowsThisPage[i];\n        // this is a trick to copy an object\n        const itemCopy = JSON.parse(JSON.stringify(item));\n        rowsThisPage[i] = itemCopy;\n      }\n      // if on or after the last page, work out the last row.\n      let lastRow = -1;\n      if (allOfTheData.length <= params.endRow) {\n        lastRow = allOfTheData.length;\n      }\n      // call the success callback\n      params.successCallback(rowsThisPage, lastRow);\n    }, 500);\n  },\n};\n\nlet gridApi;\n\nconst gridOptions = {\n  defaultColDef: {\n    flex: 1,\n    sortable: false,\n  },\n  columnDefs: columnDefs,\n  rowModelType: \"infinite\",\n  datasource: datasource,\n\n  maxBlocksInCache: 2,\n  infiniteInitialRowCount: 500,\n  maxConcurrentDatasourceRequests: 2,\n\n  getRowId: (params) => {\n    return params.data.id.toString();\n  },\n\n  onGridReady: (params) => {\n    sequenceId = 1;\n    allOfTheData = [];\n    for (let i = 0; i < 1000; i++) {\n      allOfTheData.push(createRowData(sequenceId++));\n    }\n  },\n\n  getRowStyle: (params) => {\n    if (params.data && params.data.make === \"Honda\") {\n      return {\n        fontWeight: \"bold\",\n      };\n    }\n    return {\n      fontWeight: \"normal\",\n    };\n  },\n};\n\n// this counter is used to give id's to the rows\nvar sequenceId = 0;\nvar allOfTheData = [];\n\nfunction createRowData(id) {\n  const makes = [\"Toyota\", \"Ford\", \"Porsche\", \"Chevy\", \"Honda\", \"Nissan\"];\n  const models = [\n    \"Cruze\",\n    \"Celica\",\n    \"Mondeo\",\n    \"Boxster\",\n    \"Genesis\",\n    \"Accord\",\n    \"Taurus\",\n  ];\n  return {\n    id: id,\n    make: makes[id % makes.length],\n    model: models[id % models.length],\n    price: 72000,\n  };\n}\n\nfunction insertItemsAt2AndRefresh(count) {\n  insertItemsAt2(count);\n\n  // if the data has stopped looking for the last row, then we need to adjust the\n  // row count to allow for the extra data, otherwise the grid will not allow scrolling\n  // to the last row. eg if we have 1000 rows, scroll all the way to the bottom (so\n  // maxRowFound=true), and then add 5 rows, the rowCount needs to be adjusted\n  // to 1005, so grid can scroll to the end. the grid does NOT do this for you in the\n  // refreshInfiniteCache() method, as this would be assuming you want to do it which\n  // is not true, maybe the row count is constant and you just want to refresh the details.\n  const maxRowFound = gridApi.isLastRowIndexKnown();\n  if (maxRowFound) {\n    const rowCount = gridApi.getDisplayedRowCount() || 0;\n    gridApi.setRowCount(rowCount + count);\n  }\n\n  // get grid to refresh the data\n  gridApi.refreshInfiniteCache();\n}\n\nfunction insertItemsAt2(count) {\n  const newDataItems = [];\n  for (let i = 0; i < count; i++) {\n    const newItem = createRowData(sequenceId++);\n    allOfTheData.splice(2, 0, newItem);\n    newDataItems.push(newItem);\n  }\n  return newDataItems;\n}\n\nfunction removeItem(start, limit) {\n  allOfTheData.splice(start, limit);\n  gridApi.refreshInfiniteCache();\n}\n\nfunction refreshCache() {\n  gridApi.refreshInfiniteCache();\n}\n\nfunction purgeCache() {\n  gridApi.purgeInfiniteCache();\n}\n\nfunction setRowCountTo200() {\n  gridApi.setRowCount(200, false);\n}\n\nfunction rowsAndMaxFound() {\n  console.log(\"getDisplayedRowCount() => \" + gridApi.getDisplayedRowCount());\n  console.log(\"isLastRowIndexKnown() => \" + gridApi.isLastRowIndexKnown());\n}\n\n// function just gives new prices to the row data, it does not update the grid\nfunction setPricesHigh() {\n  allOfTheData.forEach((dataItem) => {\n    dataItem.price = Math.round(55500 + 400 * (0.5 + Math.random()));\n  });\n}\n\nfunction setPricesLow() {\n  allOfTheData.forEach((dataItem) => {\n    dataItem.price = Math.round(1000 + 100 * (0.5 + Math.random()));\n  });\n}\n\nfunction jumpTo500() {\n  // first up, need to make sure the grid is actually showing 500 or more rows\n  if ((gridApi.getDisplayedRowCount() || 0) < 501) {\n    gridApi.setRowCount(501, false);\n  }\n  // next, we can jump to the row\n  gridApi.ensureIndexVisible(500);\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n});\n","index.html":"<div style=\"display: flex; flex-direction: column; height: 100%\">\n    <div style=\"margin-bottom: 10px\">\n        <button onclick=\"insertItemsAt2AndRefresh(5)\">Insert Rows</button>\n        <button onclick=\"removeItem(3, 10)\">Delete Rows</button>\n        <button onclick=\"setRowCountTo200()\">Set Row Count</button>\n        <button onclick=\"rowsAndMaxFound()\">Print Info</button>\n        <button onclick=\"jumpTo500()\">Jump to 500</button>\n    </div>\n    <div style=\"margin-bottom: 10px\">\n        <button onclick=\"setPricesHigh()\">Set Prices High</button>\n        <button onclick=\"setPricesLow()\">Set Prices Low</button>\n        <button onclick=\"refreshCache()\">Refresh Cache</button>\n        <button onclick=\"purgeCache()\">Purge Cache</button>\n    </div>\n    <div style=\"flex-grow: 1\">\n        <div id=\"myGrid\" style=\"height: 100%\"></div>\n    </div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}