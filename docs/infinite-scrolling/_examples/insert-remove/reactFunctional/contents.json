{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"index.jsx","mainFileName":"index.jsx","scriptFiles":[],"styleFiles":[],"files":{"index.jsx":"'use client';\nimport React, { StrictMode, useCallback, useMemo, useRef, useState, } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { InfiniteRowModelModule, ModuleRegistry, RowApiModule, RowStyleModule, ScrollApiModule, ValidationModule, } from \"ag-grid-community\";\nimport { AgGridReact } from \"ag-grid-react\";\nModuleRegistry.registerModules([\n    RowApiModule,\n    ScrollApiModule,\n    RowStyleModule,\n    InfiniteRowModelModule,\n    ValidationModule /* Development Only */,\n]);\nconst valueFormatter = function (params) {\n    if (typeof params.value === \"number\") {\n        return \"Â£\" + params.value.toLocaleString();\n    }\n    else {\n        return params.value;\n    }\n};\n// this counter is used to give id's to the rows\nlet sequenceId = 0;\nlet allOfTheData = [];\nconst createRowData = (id) => {\n    const makes = [\"Toyota\", \"Ford\", \"Porsche\", \"Chevy\", \"Honda\", \"Nissan\"];\n    const models = [\n        \"Cruze\",\n        \"Celica\",\n        \"Mondeo\",\n        \"Boxster\",\n        \"Genesis\",\n        \"Accord\",\n        \"Taurus\",\n    ];\n    return {\n        id: id,\n        make: makes[id % makes.length],\n        model: models[id % models.length],\n        price: 72000,\n    };\n};\nconst insertItemsAt2 = (count) => {\n    const newDataItems = [];\n    for (let i = 0; i < count; i++) {\n        const newItem = createRowData(sequenceId++);\n        allOfTheData.splice(2, 0, newItem);\n        newDataItems.push(newItem);\n    }\n    return newDataItems;\n};\nconst GridExample = () => {\n    const gridRef = useRef(null);\n    const containerStyle = useMemo(() => ({ width: \"100%\", height: \"100%\" }), []);\n    const gridStyle = useMemo(() => ({ height: \"100%\", width: \"100%\" }), []);\n    const [columnDefs, setColumnDefs] = useState([\n        {\n            headerName: \"Item ID\",\n            field: \"id\",\n            valueGetter: \"node.id\",\n            cellRenderer: (props) => {\n                if (props.value !== undefined) {\n                    return props.value;\n                }\n                else {\n                    return (<img src=\"https://www.ag-grid.com/example-assets/loading.gif\"/>);\n                }\n            },\n        },\n        { field: \"make\" },\n        { field: \"model\" },\n        {\n            field: \"price\",\n            valueFormatter: valueFormatter,\n        },\n    ]);\n    const datasource = useMemo(() => {\n        return {\n            rowCount: undefined,\n            getRows: (params) => {\n                console.log(\"asking for \" + params.startRow + \" to \" + params.endRow);\n                // At this point in your code, you would call the server.\n                // To make the demo look real, wait for 500ms before returning\n                setTimeout(function () {\n                    // take a slice of the total rows\n                    const rowsThisPage = allOfTheData.slice(params.startRow, params.endRow);\n                    // make a copy of each row - this is what would happen if taking data from server\n                    for (let i = 0; i < rowsThisPage.length; i++) {\n                        const item = rowsThisPage[i];\n                        // this is a trick to copy an object\n                        const itemCopy = JSON.parse(JSON.stringify(item));\n                        rowsThisPage[i] = itemCopy;\n                    }\n                    // if on or after the last page, work out the last row.\n                    let lastRow = -1;\n                    if (allOfTheData.length <= params.endRow) {\n                        lastRow = allOfTheData.length;\n                    }\n                    // call the success callback\n                    params.successCallback(rowsThisPage, lastRow);\n                }, 500);\n            },\n        };\n    }, []);\n    const defaultColDef = useMemo(() => {\n        return {\n            flex: 1,\n            sortable: false,\n        };\n    }, []);\n    const getRowId = useCallback(function (params) {\n        return params.data.id.toString();\n    }, []);\n    const getRowStyle = useCallback(function (params) {\n        if (params.data && params.data.make === \"Honda\") {\n            return {\n                fontWeight: \"bold\",\n            };\n        }\n        return {\n            fontWeight: \"normal\",\n        };\n    }, []);\n    const onGridReady = useCallback((params) => {\n        sequenceId = 1;\n        allOfTheData = [];\n        for (let i = 0; i < 1000; i++) {\n            allOfTheData.push(createRowData(sequenceId++));\n        }\n    }, []);\n    const insertItemsAt2AndRefresh = useCallback((count) => {\n        insertItemsAt2(count);\n        // if the data has stopped looking for the last row, then we need to adjust the\n        // row count to allow for the extra data, otherwise the grid will not allow scrolling\n        // to the last row. eg if we have 1000 rows, scroll all the way to the bottom (so\n        // maxRowFound=true), and then add 5 rows, the rowCount needs to be adjusted\n        // to 1005, so grid can scroll to the end. the grid does NOT do this for you in the\n        // refreshInfiniteCache() method, as this would be assuming you want to do it which\n        // is not true, maybe the row count is constant and you just want to refresh the details.\n        const maxRowFound = gridRef.current.api.isLastRowIndexKnown();\n        if (maxRowFound) {\n            const rowCount = gridRef.current.api.getDisplayedRowCount() || 0;\n            gridRef.current.api.setRowCount(rowCount + count);\n        }\n        // get grid to refresh the data\n        gridRef.current.api.refreshInfiniteCache();\n    }, []);\n    const removeItem = useCallback((start, limit) => {\n        allOfTheData.splice(start, limit);\n        gridRef.current.api.refreshInfiniteCache();\n    }, [allOfTheData]);\n    const refreshCache = useCallback(() => {\n        gridRef.current.api.refreshInfiniteCache();\n    }, []);\n    const purgeCache = useCallback(() => {\n        gridRef.current.api.purgeInfiniteCache();\n    }, []);\n    const setRowCountTo200 = useCallback(() => {\n        gridRef.current.api.setRowCount(200, false);\n    }, []);\n    const rowsAndMaxFound = useCallback(() => {\n        console.log(\"getDisplayedRowCount() => \" +\n            gridRef.current.api.getDisplayedRowCount());\n        console.log(\"isLastRowIndexKnown() => \" + gridRef.current.api.isLastRowIndexKnown());\n    }, []);\n    // function just gives new prices to the row data, it does not update the grid\n    const setPricesHigh = useCallback(() => {\n        allOfTheData.forEach(function (dataItem) {\n            dataItem.price = Math.round(55500 + 400 * (0.5 + Math.random()));\n        });\n    }, [allOfTheData]);\n    const setPricesLow = useCallback(() => {\n        allOfTheData.forEach(function (dataItem) {\n            dataItem.price = Math.round(1000 + 100 * (0.5 + Math.random()));\n        });\n    }, [allOfTheData]);\n    const jumpTo500 = useCallback(() => {\n        // first up, need to make sure the grid is actually showing 500 or more rows\n        if ((gridRef.current.api.getDisplayedRowCount() || 0) < 501) {\n            gridRef.current.api.setRowCount(501, false);\n        }\n        // next, we can jump to the row\n        gridRef.current.api.ensureIndexVisible(500);\n    }, []);\n    return (<div style={containerStyle}>\n      <div style={{ display: \"flex\", flexDirection: \"column\", height: \"100%\" }}>\n        <div style={{ marginBottom: \"10px\" }}>\n          <button onClick={() => insertItemsAt2AndRefresh(5)}>\n            Insert Rows\n          </button>\n          <button onClick={() => removeItem(3, 10)}>Delete Rows</button>\n          <button onClick={setRowCountTo200}>Set Row Count</button>\n          <button onClick={rowsAndMaxFound}>Print Info</button>\n          <button onClick={jumpTo500}>Jump to 500</button>\n        </div>\n        <div style={{ marginBottom: \"10px\" }}>\n          <button onClick={setPricesHigh}>Set Prices High</button>\n          <button onClick={setPricesLow}>Set Prices Low</button>\n          <button onClick={refreshCache}>Refresh Cache</button>\n          <button onClick={purgeCache}>Purge Cache</button>\n        </div>\n        <div style={{ flexGrow: \"1\" }}>\n          <div style={gridStyle}>\n            <AgGridReact ref={gridRef} columnDefs={columnDefs} datasource={datasource} defaultColDef={defaultColDef} rowModelType={\"infinite\"} maxBlocksInCache={2} infiniteInitialRowCount={500} maxConcurrentDatasourceRequests={2} getRowId={getRowId} getRowStyle={getRowStyle} onGridReady={onGridReady}/>\n          </div>\n        </div>\n      </div>\n    </div>);\n};\nconst root = createRoot(document.getElementById(\"root\"));\nroot.render(<StrictMode>\n    <GridExample />\n  </StrictMode>);\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            jsx: 'react',\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            // react\n            react: 'npm:react@18.2.0',\n            'react-dom': 'npm:react-dom@18.2.0',\n            'react-dom/client': 'npm:react-dom@18.2.0',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            css: {},\n            react: {\n                main: './umd/react.production.min.js',\n            },\n            'react-dom': {\n                main: './umd/react-dom.production.min.js',\n            },\n            'react-dom/server': {\n                main: '../umd/react-dom-server.browser.production.min.js',\n            },\n            app: {\n                main: './index.jsx',\n                defaultExtension: 'jsx',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"react":"18","react-dom":"18","@types/react":"18","@types/react-dom":"18","ag-grid-react":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}