{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"main.ts","styleFiles":[],"files":{"main.ts":"import {\n  createApp,\n  defineComponent,\n  onBeforeMount,\n  ref,\n  shallowRef,\n} from \"vue\";\nimport { AgGridVue } from \"ag-grid-vue3\";\nimport {\n  ColDef,\n  ColGroupDef,\n  GetRowIdFunc,\n  GetRowIdParams,\n  GridApi,\n  GridOptions,\n  GridReadyEvent,\n  ICellRendererParams,\n  IDatasource,\n  IGetRowsParams,\n  InfiniteRowModelModule,\n  ModuleRegistry,\n  RowApiModule,\n  RowClassParams,\n  RowModelType,\n  RowStyle,\n  RowStyleModule,\n  ScrollApiModule,\n  ValidationModule,\n  ValueFormatterParams,\n  createGrid,\n} from \"ag-grid-community\";\nModuleRegistry.registerModules([\n  RowApiModule,\n  ScrollApiModule,\n  RowStyleModule,\n  InfiniteRowModelModule,\n  ValidationModule /* Development Only */,\n]);\n\nconst valueFormatter = function (params: ValueFormatterParams) {\n  if (typeof params.value === \"number\") {\n    return \"Â£\" + params.value.toLocaleString();\n  } else {\n    return params.value;\n  }\n};\n\n// this counter is used to give id's to the rows\nvar sequenceId = 0;\n\nvar allOfTheData: any[] = [];\n\nfunction createRowData(id: number) {\n  const makes = [\"Toyota\", \"Ford\", \"Porsche\", \"Chevy\", \"Honda\", \"Nissan\"];\n  const models = [\n    \"Cruze\",\n    \"Celica\",\n    \"Mondeo\",\n    \"Boxster\",\n    \"Genesis\",\n    \"Accord\",\n    \"Taurus\",\n  ];\n  return {\n    id: id,\n    make: makes[id % makes.length],\n    model: models[id % models.length],\n    price: 72000,\n  };\n}\n\nfunction insertItemsAt2(count: number) {\n  const newDataItems = [];\n  for (let i = 0; i < count; i++) {\n    const newItem = createRowData(sequenceId++);\n    allOfTheData.splice(2, 0, newItem);\n    newDataItems.push(newItem);\n  }\n  return newDataItems;\n}\n\nconst VueExample = defineComponent({\n  template: `\n        <div style=\"height: 100%\">\n                <div style=\"display: flex; flex-direction: column; height: 100%\">\n      <div style=\"margin-bottom: 10px\">\n        <button v-on:click=\"insertItemsAt2AndRefresh(5)\">Insert Rows</button>\n        <button v-on:click=\"removeItem(3, 10)\">Delete Rows</button>\n        <button v-on:click=\"setRowCountTo200()\">Set Row Count</button>\n        <button v-on:click=\"rowsAndMaxFound()\">Print Info</button>\n        <button v-on:click=\"jumpTo500()\">Jump to 500</button>\n      </div>\n      <div style=\"margin-bottom: 10px\">\n        <button v-on:click=\"setPricesHigh()\">Set Prices High</button>\n        <button v-on:click=\"setPricesLow()\">Set Prices Low</button>\n        <button v-on:click=\"refreshCache()\">Refresh Cache</button>\n        <button v-on:click=\"purgeCache()\">Purge Cache</button>\n      </div>\n      <div style=\"flex-grow: 1\">\n        <ag-grid-vue\n          style=\"width: 100%; height: 100%;\"\n          @grid-ready=\"onGridReady\"\n          :columnDefs=\"columnDefs\"\n          :datasource=\"datasource\"\n          :defaultColDef=\"defaultColDef\"\n          :rowModelType=\"rowModelType\"\n          :maxBlocksInCache=\"maxBlocksInCache\"\n          :infiniteInitialRowCount=\"infiniteInitialRowCount\"\n          :maxConcurrentDatasourceRequests=\"maxConcurrentDatasourceRequests\"\n          :getRowId=\"getRowId\"\n          :getRowStyle=\"getRowStyle\"\n          :rowData=\"rowData\"></ag-grid-vue>\n        </div>\n      </div>\n        </div>\n    `,\n  components: {\n    \"ag-grid-vue\": AgGridVue,\n  },\n  setup(props) {\n    const gridApi = shallowRef<GridApi | null>(null);\n    const columnDefs = ref<ColDef[]>([\n      {\n        headerName: \"Item ID\",\n        field: \"id\",\n        valueGetter: \"node.id\",\n        cellRenderer: (params: ICellRendererParams) => {\n          if (params.value !== undefined) {\n            return params.value;\n          } else {\n            return '<img src=\"https://www.ag-grid.com/example-assets/loading.gif\">';\n          }\n        },\n      },\n      { field: \"make\" },\n      { field: \"model\" },\n      {\n        field: \"price\",\n        valueFormatter: valueFormatter,\n      },\n    ]);\n    const datasource = ref<IDatasource>({\n      rowCount: undefined,\n      getRows: (params: IGetRowsParams) => {\n        console.log(\"asking for \" + params.startRow + \" to \" + params.endRow);\n        // At this point in your code, you would call the server.\n        // To make the demo look real, wait for 500ms before returning\n        setTimeout(() => {\n          // take a slice of the total rows\n          const rowsThisPage = allOfTheData.slice(\n            params.startRow,\n            params.endRow,\n          );\n          // make a copy of each row - this is what would happen if taking data from server\n          for (let i = 0; i < rowsThisPage.length; i++) {\n            const item = rowsThisPage[i];\n            // this is a trick to copy an object\n            const itemCopy = JSON.parse(JSON.stringify(item));\n            rowsThisPage[i] = itemCopy;\n          }\n          // if on or after the last page, work out the last row.\n          let lastRow = -1;\n          if (allOfTheData.length <= params.endRow) {\n            lastRow = allOfTheData.length;\n          }\n          // call the success callback\n          params.successCallback(rowsThisPage, lastRow);\n        }, 500);\n      },\n    });\n    const defaultColDef = ref<ColDef>({\n      flex: 1,\n      sortable: false,\n    });\n    const rowModelType = ref<RowModelType>(\"infinite\");\n    const maxBlocksInCache = ref(2);\n    const infiniteInitialRowCount = ref(500);\n    const maxConcurrentDatasourceRequests = ref(2);\n    const getRowId = ref<GetRowIdFunc>((params: GetRowIdParams) => {\n      return params.data.id.toString();\n    });\n    const getRowStyle = ref<(params: RowClassParams) => RowStyle | undefined>(\n      (params: RowClassParams): RowStyle | undefined => {\n        if (params.data && params.data.make === \"Honda\") {\n          return {\n            fontWeight: \"bold\",\n          };\n        }\n        return {\n          fontWeight: \"normal\",\n        };\n      },\n    );\n    const rowData = ref<any[]>(null);\n\n    function insertItemsAt2AndRefresh(count: number) {\n      insertItemsAt2(count);\n      // if the data has stopped looking for the last row, then we need to adjust the\n      // row count to allow for the extra data, otherwise the grid will not allow scrolling\n      // to the last row. eg if we have 1000 rows, scroll all the way to the bottom (so\n      // maxRowFound=true), and then add 5 rows, the rowCount needs to be adjusted\n      // to 1005, so grid can scroll to the end. the grid does NOT do this for you in the\n      // refreshInfiniteCache() method, as this would be assuming you want to do it which\n      // is not true, maybe the row count is constant and you just want to refresh the details.\n      const maxRowFound = gridApi.value!.isLastRowIndexKnown();\n      if (maxRowFound) {\n        const rowCount = gridApi.value!.getDisplayedRowCount() || 0;\n        gridApi.value!.setRowCount(rowCount + count);\n      }\n      // get grid to refresh the data\n      gridApi.value!.refreshInfiniteCache();\n    }\n    function removeItem(start: number, limit: number) {\n      allOfTheData.splice(start, limit);\n      gridApi.value!.refreshInfiniteCache();\n    }\n    function refreshCache() {\n      gridApi.value!.refreshInfiniteCache();\n    }\n    function purgeCache() {\n      gridApi.value!.purgeInfiniteCache();\n    }\n    function setRowCountTo200() {\n      gridApi.value!.setRowCount(200, false);\n    }\n    function rowsAndMaxFound() {\n      console.log(\n        \"getDisplayedRowCount() => \" + gridApi.value!.getDisplayedRowCount(),\n      );\n      console.log(\n        \"isLastRowIndexKnown() => \" + gridApi.value!.isLastRowIndexKnown(),\n      );\n    }\n    // function just gives new prices to the row data, it does not update the grid\n    function setPricesHigh() {\n      allOfTheData.forEach((dataItem) => {\n        dataItem.price = Math.round(55500 + 400 * (0.5 + Math.random()));\n      });\n    }\n    function setPricesLow() {\n      allOfTheData.forEach((dataItem) => {\n        dataItem.price = Math.round(1000 + 100 * (0.5 + Math.random()));\n      });\n    }\n    function jumpTo500() {\n      // first up, need to make sure the grid is actually showing 500 or more rows\n      if ((gridApi.value!.getDisplayedRowCount() || 0) < 501) {\n        gridApi.value!.setRowCount(501, false);\n      }\n      // next, we can jump to the row\n      gridApi.value!.ensureIndexVisible(500);\n    }\n    const onGridReady = (params: GridReadyEvent) => {\n      gridApi.value = params.api;\n\n      sequenceId = 1;\n      allOfTheData = [];\n      for (let i = 0; i < 1000; i++) {\n        allOfTheData.push(createRowData(sequenceId++));\n      }\n    };\n\n    return {\n      gridApi,\n      columnDefs,\n      datasource,\n      defaultColDef,\n      rowModelType,\n      maxBlocksInCache,\n      infiniteInitialRowCount,\n      maxConcurrentDatasourceRequests,\n      getRowId,\n      getRowStyle,\n      rowData,\n      onGridReady,\n      insertItemsAt2AndRefresh,\n      removeItem,\n      refreshCache,\n      purgeCache,\n      setRowCountTo200,\n      rowsAndMaxFound,\n      setPricesHigh,\n      setPricesLow,\n      jumpTo500,\n    };\n  },\n});\n\ncreateApp(VueExample).mount(\"#app\");\n","index.html":"<div style=\"display: flex; flex-direction: column; height: 100%\">\n    <div style=\"margin-bottom: 10px\">\n        <button onclick=\"insertItemsAt2AndRefresh(5)\">Insert Rows</button>\n        <button onclick=\"removeItem(3, 10)\">Delete Rows</button>\n        <button onclick=\"setRowCountTo200()\">Set Row Count</button>\n        <button onclick=\"rowsAndMaxFound()\">Print Info</button>\n        <button onclick=\"jumpTo500()\">Jump to 500</button>\n    </div>\n    <div style=\"margin-bottom: 10px\">\n        <button onclick=\"setPricesHigh()\">Set Prices High</button>\n        <button onclick=\"setPricesLow()\">Set Prices Low</button>\n        <button onclick=\"refreshCache()\">Refresh Cache</button>\n        <button onclick=\"purgeCache()\">Purge Cache</button>\n    </div>\n    <div style=\"flex-grow: 1\">\n        <div id=\"myGrid\" style=\"height: 100%\"></div>\n    </div>\n</div>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        defaultExtension: 'js',\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            vue: 'npm:vue@3.5.0/dist/vue.esm-browser.js',\n            '@vue/reactivity': 'npm:@vue/reactivity@3.0.0/dist/reactivity.esm-browser.prod.js',\n\n            // vue class component\n            'vue-class-component': 'npm:vue-class-component@^8.0.0-beta.3/dist/vue-class-component.cjs.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            'css.js': {\n                defaultExtension: 'js',\n            },\n            vue: {\n                defaultExtension: 'js',\n            },\n            app: {\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-vue3': {\n                main: './dist/main.umd.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"vue":"^3.5.0","ag-grid-vue3":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}