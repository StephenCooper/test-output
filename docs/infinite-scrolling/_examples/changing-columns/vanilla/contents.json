{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":["style.css"],"files":{"style.css":".test-grid {\n    height: 1px;\n    min-height: 1px;\n    flex-grow: 1;\n}\n\n.test-container {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\n.test-header {\n    margin-bottom: 5px;\n}\n","main.js":"let gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    { field: \"athlete\", colId: \"athlete\", minWidth: 180 },\n    { field: \"age\", colId: \"age\" },\n    { field: \"country\", colId: \"country\", minWidth: 180 },\n    { field: \"year\", colId: \"year\" },\n    { field: \"sport\", colId: \"sport\", minWidth: 180 },\n  ],\n  defaultColDef: {\n    flex: 1,\n    filter: true,\n  },\n  rowModelType: \"infinite\",\n};\n\nfunction onBtShowYearColumn() {\n  gridApi.setGridOption(\"columnDefs\", [\n    { field: \"athlete\", colId: \"athlete\" },\n    { field: \"age\", colId: \"age\" },\n    { field: \"country\", colId: \"country\" },\n    { field: \"year\", colId: \"year\" },\n    { field: \"sport\", colId: \"sport\" },\n  ]);\n}\n\nfunction onBtHideYearColumn() {\n  gridApi.setGridOption(\"columnDefs\", [\n    { field: \"athlete\", colId: \"athlete\" },\n    { field: \"age\", colId: \"age\" },\n    { field: \"country\", colId: \"country\" },\n    { field: \"sport\", colId: \"sport\" },\n  ]);\n}\n\nfunction sortAndFilter(allOfTheData, sortModel, filterModel) {\n  return sortData(sortModel, filterData(filterModel, allOfTheData));\n}\n\nfunction sortData(sortModel, data) {\n  const sortPresent = sortModel && sortModel.length > 0;\n  if (!sortPresent) {\n    return data;\n  }\n  // do an in memory sort of the data, across all the fields\n  const resultOfSort = data.slice();\n  resultOfSort.sort(function (a, b) {\n    for (let k = 0; k < sortModel.length; k++) {\n      const sortColModel = sortModel[k];\n      const valueA = a[sortColModel.colId];\n      const valueB = b[sortColModel.colId];\n      // this filter didn't find a difference, move onto the next one\n      if (valueA == valueB) {\n        continue;\n      }\n      const sortDirection = sortColModel.sort === \"asc\" ? 1 : -1;\n      if (valueA > valueB) {\n        return sortDirection;\n      } else {\n        return sortDirection * -1;\n      }\n    }\n    // no filters found a difference\n    return 0;\n  });\n  return resultOfSort;\n}\n\nfunction filterData(filterModel, data) {\n  const filterPresent = filterModel && Object.keys(filterModel).length > 0;\n  if (!filterPresent) {\n    return data;\n  }\n\n  const resultOfFilter = [];\n  for (let i = 0; i < data.length; i++) {\n    var item = data[i];\n\n    var filterFails = false;\n\n    const filterKeys = Object.keys(filterModel);\n    filterKeys.forEach((filterKey) => {\n      const filterValue = filterModel[filterKey].filter;\n\n      const valueForRow = item[filterKey];\n      if (filterValue != valueForRow) {\n        // year didn't match, so skip this record\n        filterFails = true;\n      }\n    });\n\n    // if (filterModel.year) {\n    //     var val1 = filterModel.year.filter;\n    //     var val2 = item.year;\n    //     if (val1 != val2) {\n    //         // year didn't match, so skip this record\n    //         continue;\n    //     }\n    // }\n    //\n\n    if (!filterFails) {\n      resultOfFilter.push(item);\n    }\n  }\n\n  return resultOfFilter;\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then(function (data) {\n      // give each row an id\n      data.forEach(function (d, index) {\n        d.id = \"R\" + (index + 1);\n      });\n\n      const dataSource = {\n        rowCount: undefined, // behave as infinite scroll\n        getRows: (params) => {\n          console.log(\"asking for \" + params.startRow + \" to \" + params.endRow);\n          // At this point in your code, you would call the server.\n          // To make the demo look real, wait for 500ms before returning\n          setTimeout(() => {\n            // take a slice of the total rows\n            const dataAfterSortingAndFiltering = sortAndFilter(\n              data,\n              params.sortModel,\n              params.filterModel,\n            );\n            const rowsThisPage = dataAfterSortingAndFiltering.slice(\n              params.startRow,\n              params.endRow,\n            );\n            // if on or after the last page, work out the last row.\n            let lastRow = -1;\n            if (dataAfterSortingAndFiltering.length <= params.endRow) {\n              lastRow = dataAfterSortingAndFiltering.length;\n            }\n            // call the success callback\n            params.successCallback(rowsThisPage, lastRow);\n          }, 500);\n        },\n      };\n\n      gridApi.setGridOption(\"datasource\", dataSource);\n    });\n});\n","index.html":"<div class=\"test-container\">\n    <div class=\"test-header\">\n        <button onclick=\"onBtShowYearColumn()\">Show Year</button>\n        <button onclick=\"onBtHideYearColumn()\">Hide Year</button>\n    </div>\n\n    <div id=\"myGrid\" class=\"test-grid\"></div>\n</div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}