{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"main.ts","styleFiles":["styles.css"],"files":{"styles.css":".test-grid {\n    flex-grow: 1;\n}\n\n.test-container {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\n.test-header {\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\n    font-size: 13px;\n    margin-bottom: 1rem;\n}\n","customHeader.ts":"import type { IHeaderComp, IHeaderParams } from 'ag-grid-community';\n\nexport class CustomHeader implements IHeaderComp {\n    params!: IHeaderParams;\n    eGui!: HTMLDivElement;\n    eFilterMenu: any;\n    eText: any;\n    filterMenuPresent!: boolean;\n    onMenuClickListener: any;\n\n    init(params: IHeaderParams) {\n        this.params = params;\n        console.log('CustomHeader.init() -> ' + this.params.column.getId());\n        this.eGui = document.createElement('div');\n        this.eGui.innerHTML =\n            '' +\n            '<div style=\"display: flex;\">' +\n            '<span data-ref=\"eFilterMenu\" class=\"ag-icon ag-icon-menu\" style=\"margin-right: 4px;\"></span>' +\n            '<div style=\"flex-grow: 1;\">' +\n            '<span data-ref=\"eText\" style=\"\"></span>' +\n            '</div>' +\n            '</div>';\n\n        this.eFilterMenu = this.eGui.querySelector('[data-ref=\"eFilterMenu\"]');\n        this.eText = this.eGui.querySelector('[data-ref=\"eText\"]');\n\n        this.filterMenuPresent = this.params.enableFilterButton;\n\n        if (this.filterMenuPresent) {\n            this.onMenuClickListener = this.onMenuClick.bind(this);\n            this.eFilterMenu.addEventListener('click', this.onMenuClickListener);\n        } else {\n            this.eFilterMenu.parentNode.removeChild(this.eFilterMenu);\n        }\n\n        this.updateHeaderNameText();\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n\n    refresh(params: IHeaderParams) {\n        this.params = params;\n\n        const res = this.params.enableFilterButton === this.filterMenuPresent;\n\n        console.log('CustomHeader.refresh() -> ' + this.params.column.getId() + ' returning ' + res);\n\n        this.updateHeaderNameText();\n\n        return res;\n    }\n\n    updateHeaderNameText() {\n        this.eText.textContent = this.params.displayName;\n    }\n\n    onMenuClick() {\n        this.params.showColumnMenu(this.eFilterMenu);\n    }\n\n    destroy() {\n        console.log('CustomHeader.destroy() -> ' + this.params.column.getId());\n        if (this.onMenuClickListener) {\n            this.eFilterMenu.removeEventListener('click', this.onMenuClickListener);\n        }\n    }\n}\n","main.ts":"import {\n  ClientSideRowModelModule,\n  ColDef,\n  ColGroupDef,\n  GridApi,\n  GridOptions,\n  ModuleRegistry,\n  NumberFilterModule,\n  TextFilterModule,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\nimport { CustomHeader } from \"./customHeader\";\nimport { IOlympicData } from \"./interfaces\";\n\nModuleRegistry.registerModules([\n  TextFilterModule,\n  NumberFilterModule,\n  ClientSideRowModelModule,\n  ValidationModule /* Development Only */,\n]);\n\nlet gridApi: GridApi<IOlympicData>;\n\nconst gridOptions: GridOptions<IOlympicData> = {\n  columnDefs: [\n    { field: \"athlete\" },\n    { field: \"age\" },\n    { field: \"country\" },\n    { field: \"year\" },\n    { field: \"date\" },\n    { field: \"sport\" },\n    { field: \"gold\" },\n    { field: \"silver\" },\n    { field: \"bronze\" },\n    { field: \"total\" },\n  ],\n  defaultColDef: {\n    headerComponent: CustomHeader,\n  },\n};\n\nfunction onBtUpperNames() {\n  const columnDefs: ColDef[] = [\n    { field: \"athlete\" },\n    { field: \"age\" },\n    { field: \"country\" },\n    { field: \"year\" },\n    { field: \"date\" },\n    { field: \"sport\" },\n    { field: \"gold\" },\n    { field: \"silver\" },\n    { field: \"bronze\" },\n    { field: \"total\" },\n  ];\n  columnDefs.forEach((c) => {\n    c.headerName = c.field!.toUpperCase();\n  });\n  gridApi!.setGridOption(\"columnDefs\", columnDefs);\n}\n\nfunction onBtLowerNames() {\n  const columnDefs: ColDef[] = [\n    { field: \"athlete\" },\n    { field: \"age\" },\n    { field: \"country\" },\n    { field: \"year\" },\n    { field: \"date\" },\n    { field: \"sport\" },\n    { field: \"gold\" },\n    { field: \"silver\" },\n    { field: \"bronze\" },\n    { field: \"total\" },\n  ];\n  columnDefs.forEach((c) => {\n    c.headerName = c.field;\n  });\n  gridApi!.setGridOption(\"columnDefs\", columnDefs);\n}\n\nfunction onBtFilterOn() {\n  const columnDefs: ColDef[] = [\n    { field: \"athlete\" },\n    { field: \"age\" },\n    { field: \"country\" },\n    { field: \"year\" },\n    { field: \"date\" },\n    { field: \"sport\" },\n    { field: \"gold\" },\n    { field: \"silver\" },\n    { field: \"bronze\" },\n    { field: \"total\" },\n  ];\n  columnDefs.forEach((c) => {\n    c.filter = true;\n  });\n  gridApi!.setGridOption(\"columnDefs\", columnDefs);\n}\n\nfunction onBtFilterOff() {\n  const columnDefs: ColDef[] = [\n    { field: \"athlete\" },\n    { field: \"age\" },\n    { field: \"country\" },\n    { field: \"year\" },\n    { field: \"date\" },\n    { field: \"sport\" },\n    { field: \"gold\" },\n    { field: \"silver\" },\n    { field: \"bronze\" },\n    { field: \"total\" },\n  ];\n  columnDefs.forEach((c) => {\n    c.filter = false;\n  });\n  gridApi!.setGridOption(\"columnDefs\", columnDefs);\n}\n\nfunction onBtResizeOn() {\n  const columnDefs: ColDef[] = [\n    { field: \"athlete\" },\n    { field: \"age\" },\n    { field: \"country\" },\n    { field: \"year\" },\n    { field: \"date\" },\n    { field: \"sport\" },\n    { field: \"gold\" },\n    { field: \"silver\" },\n    { field: \"bronze\" },\n    { field: \"total\" },\n  ];\n  columnDefs.forEach((c) => {\n    c.resizable = true;\n  });\n  gridApi!.setGridOption(\"columnDefs\", columnDefs);\n}\n\nfunction onBtResizeOff() {\n  const columnDefs: ColDef[] = [\n    { field: \"athlete\" },\n    { field: \"age\" },\n    { field: \"country\" },\n    { field: \"year\" },\n    { field: \"date\" },\n    { field: \"sport\" },\n    { field: \"gold\" },\n    { field: \"silver\" },\n    { field: \"bronze\" },\n    { field: \"total\" },\n  ];\n  columnDefs.forEach((c) => {\n    c.resizable = false;\n  });\n  gridApi!.setGridOption(\"columnDefs\", columnDefs);\n}\n\n// setup the grid after the page has finished loading\nconst gridDiv = document.querySelector<HTMLElement>(\"#myGrid\")!;\ngridApi = createGrid(gridDiv, gridOptions);\n\nfetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n  .then((response) => response.json())\n  .then(function (data) {\n    gridApi!.setGridOption(\"rowData\", data);\n  });\n\nif (typeof window !== \"undefined\") {\n  // Attach external event handlers to window so they can be called from index.html\n  (<any>window).onBtUpperNames = onBtUpperNames;\n  (<any>window).onBtLowerNames = onBtLowerNames;\n  (<any>window).onBtFilterOn = onBtFilterOn;\n  (<any>window).onBtFilterOff = onBtFilterOff;\n  (<any>window).onBtResizeOn = onBtResizeOn;\n  (<any>window).onBtResizeOff = onBtResizeOff;\n}\n","index.html":"<div class=\"test-container\">\n    <div class=\"test-header\">\n        <button onclick=\"onBtUpperNames()\">Upper Header Names</button>\n        <button onclick=\"onBtLowerNames()\">Lower Header Names</button>\n        &nbsp;&nbsp;&nbsp;\n        <button onclick=\"onBtFilterOn()\">Filter On</button>\n        <button onclick=\"onBtFilterOff()\">Filter Off</button>\n        &nbsp;&nbsp;&nbsp;\n        <button onclick=\"onBtResizeOn()\">Resize On</button>\n        <button onclick=\"onBtResizeOff()\">Resize Off</button>\n    </div>\n    <div id=\"myGrid\" class=\"test-grid\"></div>\n</div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {},\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        // map tells the System loader where to look for things\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            // appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap,\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {},\n            app: {\n                main: './main.ts',\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}