{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["customHeader.js","main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".test-grid {\n    flex-grow: 1;\n}\n\n.test-container {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\n.test-header {\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\n    font-size: 13px;\n    margin-bottom: 1rem;\n}\n","customHeader.js":"\nclass CustomHeader  {\n    params;\n    eGui;\n    eFilterMenu;\n    eText;\n    filterMenuPresent;\n    onMenuClickListener;\n\n    init(params) {\n        this.params = params;\n        console.log('CustomHeader.init() -> ' + this.params.column.getId());\n        this.eGui = document.createElement('div');\n        this.eGui.innerHTML =\n            '' +\n            '<div style=\"display: flex;\">' +\n            '<span data-ref=\"eFilterMenu\" class=\"ag-icon ag-icon-menu\" style=\"margin-right: 4px;\"></span>' +\n            '<div style=\"flex-grow: 1;\">' +\n            '<span data-ref=\"eText\" style=\"\"></span>' +\n            '</div>' +\n            '</div>';\n\n        this.eFilterMenu = this.eGui.querySelector('[data-ref=\"eFilterMenu\"]');\n        this.eText = this.eGui.querySelector('[data-ref=\"eText\"]');\n\n        this.filterMenuPresent = this.params.enableFilterButton;\n\n        if (this.filterMenuPresent) {\n            this.onMenuClickListener = this.onMenuClick.bind(this);\n            this.eFilterMenu.addEventListener('click', this.onMenuClickListener);\n        } else {\n            this.eFilterMenu.parentNode.removeChild(this.eFilterMenu);\n        }\n\n        this.updateHeaderNameText();\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n\n    refresh(params) {\n        this.params = params;\n\n        const res = this.params.enableFilterButton === this.filterMenuPresent;\n\n        console.log('CustomHeader.refresh() -> ' + this.params.column.getId() + ' returning ' + res);\n\n        this.updateHeaderNameText();\n\n        return res;\n    }\n\n    updateHeaderNameText() {\n        this.eText.textContent = this.params.displayName;\n    }\n\n    onMenuClick() {\n        this.params.showColumnMenu(this.eFilterMenu);\n    }\n\n    destroy() {\n        console.log('CustomHeader.destroy() -> ' + this.params.column.getId());\n        if (this.onMenuClickListener) {\n            this.eFilterMenu.removeEventListener('click', this.onMenuClickListener);\n        }\n    }\n}\n","main.js":"let gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    { field: \"athlete\" },\n    { field: \"age\" },\n    { field: \"country\" },\n    { field: \"year\" },\n    { field: \"date\" },\n    { field: \"sport\" },\n    { field: \"gold\" },\n    { field: \"silver\" },\n    { field: \"bronze\" },\n    { field: \"total\" },\n  ],\n  defaultColDef: {\n    headerComponent: CustomHeader,\n  },\n};\n\nfunction onBtUpperNames() {\n  const columnDefs = [\n    { field: \"athlete\" },\n    { field: \"age\" },\n    { field: \"country\" },\n    { field: \"year\" },\n    { field: \"date\" },\n    { field: \"sport\" },\n    { field: \"gold\" },\n    { field: \"silver\" },\n    { field: \"bronze\" },\n    { field: \"total\" },\n  ];\n  columnDefs.forEach((c) => {\n    c.headerName = c.field.toUpperCase();\n  });\n  gridApi.setGridOption(\"columnDefs\", columnDefs);\n}\n\nfunction onBtLowerNames() {\n  const columnDefs = [\n    { field: \"athlete\" },\n    { field: \"age\" },\n    { field: \"country\" },\n    { field: \"year\" },\n    { field: \"date\" },\n    { field: \"sport\" },\n    { field: \"gold\" },\n    { field: \"silver\" },\n    { field: \"bronze\" },\n    { field: \"total\" },\n  ];\n  columnDefs.forEach((c) => {\n    c.headerName = c.field;\n  });\n  gridApi.setGridOption(\"columnDefs\", columnDefs);\n}\n\nfunction onBtFilterOn() {\n  const columnDefs = [\n    { field: \"athlete\" },\n    { field: \"age\" },\n    { field: \"country\" },\n    { field: \"year\" },\n    { field: \"date\" },\n    { field: \"sport\" },\n    { field: \"gold\" },\n    { field: \"silver\" },\n    { field: \"bronze\" },\n    { field: \"total\" },\n  ];\n  columnDefs.forEach((c) => {\n    c.filter = true;\n  });\n  gridApi.setGridOption(\"columnDefs\", columnDefs);\n}\n\nfunction onBtFilterOff() {\n  const columnDefs = [\n    { field: \"athlete\" },\n    { field: \"age\" },\n    { field: \"country\" },\n    { field: \"year\" },\n    { field: \"date\" },\n    { field: \"sport\" },\n    { field: \"gold\" },\n    { field: \"silver\" },\n    { field: \"bronze\" },\n    { field: \"total\" },\n  ];\n  columnDefs.forEach((c) => {\n    c.filter = false;\n  });\n  gridApi.setGridOption(\"columnDefs\", columnDefs);\n}\n\nfunction onBtResizeOn() {\n  const columnDefs = [\n    { field: \"athlete\" },\n    { field: \"age\" },\n    { field: \"country\" },\n    { field: \"year\" },\n    { field: \"date\" },\n    { field: \"sport\" },\n    { field: \"gold\" },\n    { field: \"silver\" },\n    { field: \"bronze\" },\n    { field: \"total\" },\n  ];\n  columnDefs.forEach((c) => {\n    c.resizable = true;\n  });\n  gridApi.setGridOption(\"columnDefs\", columnDefs);\n}\n\nfunction onBtResizeOff() {\n  const columnDefs = [\n    { field: \"athlete\" },\n    { field: \"age\" },\n    { field: \"country\" },\n    { field: \"year\" },\n    { field: \"date\" },\n    { field: \"sport\" },\n    { field: \"gold\" },\n    { field: \"silver\" },\n    { field: \"bronze\" },\n    { field: \"total\" },\n  ];\n  columnDefs.forEach((c) => {\n    c.resizable = false;\n  });\n  gridApi.setGridOption(\"columnDefs\", columnDefs);\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then(function (data) {\n      gridApi.setGridOption(\"rowData\", data);\n    });\n});\n","index.html":"<div class=\"test-container\">\n    <div class=\"test-header\">\n        <button onclick=\"onBtUpperNames()\">Upper Header Names</button>\n        <button onclick=\"onBtLowerNames()\">Lower Header Names</button>\n        &nbsp;&nbsp;&nbsp;\n        <button onclick=\"onBtFilterOn()\">Filter On</button>\n        <button onclick=\"onBtFilterOff()\">Filter Off</button>\n        &nbsp;&nbsp;&nbsp;\n        <button onclick=\"onBtResizeOn()\">Resize On</button>\n        <button onclick=\"onBtResizeOff()\">Resize Off</button>\n    </div>\n    <div id=\"myGrid\" class=\"test-grid\"></div>\n</div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}