{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["customHeader.js","main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".custom-header {\n    display: flex;\n    align-items: center;\n    gap: 5px;\n}\n\n.custom-header input {\n    width: 50px;\n    margin: 0 !important;\n}\n\n.custom-header button {\n    margin: 0 !important;\n}\n\na {\n    color: inherit;\n}\n\nbutton:focus,\na:focus,\ninput:focus {\n    border-color: cornflowerblue;\n}\n\n:focus {\n    background: lightskyblue !important;\n}\n","customHeader.js":"\nclass CustomHeader {\n     eGui;\n\n    init(params) {\n        this.eGui = document.createElement('div');\n        this.eGui.classList.add('custom-header');\n        this.eGui.innerHTML = `\n        <span>${params.displayName}</span>\n        <button>Click me</button>\n        <input value=\"120\"/>\n        <a href=\"https://www.ag-grid.com\" target=\"_blank\">Link</a>`;\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n\n    refresh(params) {\n        return false;\n    }\n}\n","main.js":"const GRID_CELL_CLASSNAME = \"ag-header-cell\";\n\nfunction getAllFocusableElementsOf(el) {\n  return Array.from(\n    el.querySelectorAll(\n      'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])',\n    ),\n  ).filter((focusableEl) => {\n    return focusableEl.tabIndex !== -1;\n  });\n}\n\nfunction getEventPath(event) {\n  const path = [];\n  let currentTarget = event.target;\n\n  while (currentTarget) {\n    path.push(currentTarget);\n    currentTarget = currentTarget.parentElement;\n  }\n\n  return path;\n}\n\n/**\n * Capture whether the user is tabbing forwards or backwards and suppress keyboard event if tabbing\n * outside of the children\n */\nfunction suppressHeaderKeyboardEvent({ event }) {\n  const { key, shiftKey } = event;\n  const path = getEventPath(event);\n  const isTabForward = key === \"Tab\" && shiftKey === false;\n  const isTabBackward = key === \"Tab\" && shiftKey === true;\n\n  let suppressEvent = false;\n\n  // Handle cell children tabbing\n  if (isTabForward || isTabBackward) {\n    const eGridCell = path.find((el) => {\n      if (el.classList === undefined) return false;\n      return el.classList.contains(GRID_CELL_CLASSNAME);\n    });\n\n    if (!eGridCell) {\n      return suppressEvent;\n    }\n\n    const focusableChildrenElements = getAllFocusableElementsOf(eGridCell);\n    const lastCellChildEl =\n      focusableChildrenElements[focusableChildrenElements.length - 1];\n    const firstCellChildEl = focusableChildrenElements[0];\n\n    // Suppress keyboard event if tabbing forward within the cell and the current focused element is not the last child\n    if (isTabForward && focusableChildrenElements.length > 0) {\n      const isLastChildFocused =\n        lastCellChildEl && document.activeElement === lastCellChildEl;\n      if (!isLastChildFocused) {\n        suppressEvent = true;\n      }\n    }\n    // Suppress keyboard event if tabbing backwards within the cell, and the current focused element is not the first child\n    else if (isTabBackward && focusableChildrenElements.length > 0) {\n      const cellHasFocusedChildren =\n        eGridCell.contains(document.activeElement) &&\n        eGridCell !== document.activeElement;\n\n      // Manually set focus to the last child element if cell doesn't have focused children\n      if (!cellHasFocusedChildren) {\n        lastCellChildEl.focus();\n        // Cancel keyboard press, so that it doesn't focus on the last child and then pass through the keyboard press to\n        // move to the 2nd last child element\n        event.preventDefault();\n      }\n\n      const isFirstChildFocused =\n        firstCellChildEl && document.activeElement === firstCellChildEl;\n      if (!isFirstChildFocused) {\n        suppressEvent = true;\n      }\n    }\n  }\n\n  return suppressEvent;\n}\n\nconst columnDefs = [\n  {\n    field: \"athlete\",\n    sortable: false,\n  },\n  {\n    field: \"country\",\n    headerComponent: CustomHeader,\n    minWidth: 270,\n    flex: 1,\n    sortable: false,\n  },\n  {\n    field: \"age\",\n    sortable: false,\n  },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n  columnDefs,\n  defaultColDef: {\n    minWidth: 130,\n    flex: 1,\n    suppressHeaderKeyboardEvent,\n  },\n};\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then((data) => {\n      gridApi.setGridOption(\"rowData\", data);\n    });\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}