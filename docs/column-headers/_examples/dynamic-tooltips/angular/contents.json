{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"app.component.ts","styleFiles":[],"files":{"styles.css":".headerWrapper {\n    display: flex;\n    overflow: hidden;\n    gap: 0.25rem;\n}\n\n.customHeaderLabel {\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n\n.customSortRemoveLabel {\n    font-size: 11px;\n}\n\n.active {\n    color: cornflowerblue;\n}\n","custom-header.component.ts":"import { NgClass } from '@angular/common';\nimport { Component, ElementRef, ViewChild } from '@angular/core';\n\nimport type { IHeaderAngularComp } from 'ag-grid-angular';\nimport type { IHeaderParams } from 'ag-grid-community';\n\nexport interface ICustomHeaderParams {\n    menuIcon: string;\n}\n\n@Component({\n    standalone: true,\n    imports: [NgClass],\n    template: `\n        <div class=\"headerWrapper\">\n            @if (params.enableFilterButton) {\n                <div #menuButton class=\"customHeaderMenuButton\" (click)=\"onMenuClicked($event)\">\n                    <i class=\"fa {{ params.menuIcon }}\"></i>\n                </div>\n            }\n            <div #label class=\"customHeaderLabel\">{{ params.displayName }}</div>\n            @if (params.enableSorting) {\n                <div (click)=\"onSortRequested('asc', $event)\" [ngClass]=\"ascSort\" class=\"customSortDownLabel\">\n                    <i class=\"fa fa-long-arrow-alt-down\"></i>\n                </div>\n                <div (click)=\"onSortRequested('desc', $event)\" [ngClass]=\"descSort\" class=\"customSortUpLabel\">\n                    <i class=\"fa fa-long-arrow-alt-up\"></i>\n                </div>\n                <div (click)=\"onSortRequested('', $event)\" [ngClass]=\"noSort\" class=\"customSortRemoveLabel\">\n                    <i class=\"fa fa-times\"></i>\n                </div>\n            }\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                overflow: hidden;\n            }\n\n            .headerWrapper {\n                display: flex;\n                overflow: hidden;\n                gap: 0.25rem;\n            }\n\n            .customHeaderLabel {\n                overflow: hidden;\n                text-overflow: ellipsis;\n            }\n\n            .customSortRemoveLabel {\n                font-size: 11px;\n            }\n\n            .active {\n                color: cornflowerblue;\n            }\n        `,\n    ],\n})\nexport class CustomHeader implements IHeaderAngularComp {\n    public params!: IHeaderParams & ICustomHeaderParams;\n\n    public ascSort = 'inactive';\n    public descSort = 'inactive';\n    public noSort = 'inactive';\n\n    @ViewChild('menuButton', { read: ElementRef }) public menuButton!: ElementRef;\n    @ViewChild('label', { read: ElementRef }) public label!: ElementRef;\n\n    agInit(params: IHeaderParams & ICustomHeaderParams): void {\n        this.params = params;\n\n        params.column.addEventListener('sortChanged', this.onSortChanged.bind(this));\n        this.onSortChanged();\n        params.setTooltip(\n            params.displayName,\n            () => this.label.nativeElement.scrollWidth > this.label.nativeElement.clientWidth\n        );\n    }\n\n    onMenuClicked() {\n        this.params.showColumnMenu(this.menuButton.nativeElement);\n    }\n\n    onSortChanged() {\n        this.ascSort = this.descSort = this.noSort = 'inactive';\n        const sort = this.params.column.getSort();\n        if (sort === 'asc') {\n            this.ascSort = 'active';\n        } else if (sort === 'desc') {\n            this.descSort = 'active';\n        } else {\n            this.noSort = 'active';\n        }\n    }\n\n    onSortRequested(order: 'asc' | 'desc' | null, event: any) {\n        this.params.setSort(order, event.shiftKey);\n    }\n\n    refresh(params: IHeaderParams) {\n        return false;\n    }\n}\n","main.ts":"import '@angular/compiler';\nimport { provideHttpClient } from '@angular/common/http';\nimport { enableProdMode } from '@angular/core';\nimport { bootstrapApplication } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\nif ((window as any).ENABLE_PROD_MODE) {\n    enableProdMode();\n}\n\nbootstrapApplication(AppComponent, {\n    providers: [provideHttpClient()],\n});\n","app.component.ts":"import { Component } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { AgGridAngular } from \"ag-grid-angular\";\nimport \"./styles.css\";\nimport {\n  ClientSideRowModelModule,\n  ColDef,\n  ColGroupDef,\n  GridApi,\n  GridOptions,\n  GridReadyEvent,\n  ModuleRegistry,\n  NumberEditorModule,\n  NumberFilterModule,\n  TextEditorModule,\n  TextFilterModule,\n  TooltipModule,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\nModuleRegistry.registerModules([\n  NumberEditorModule,\n  TextEditorModule,\n  TextFilterModule,\n  NumberFilterModule,\n  ClientSideRowModelModule,\n  TooltipModule,\n  ValidationModule /* Development Only */,\n]);\nimport { CustomHeader } from \"./custom-header.component\";\nimport { IOlympicData } from \"./interfaces\";\n\n@Component({\n  selector: \"my-app\",\n  standalone: true,\n  imports: [AgGridAngular, CustomHeader],\n  template: `<ag-grid-angular\n    style=\"width: 100%; height: 100%;\"\n    [columnDefs]=\"columnDefs\"\n    [defaultColDef]=\"defaultColDef\"\n    [rowData]=\"rowData\"\n    (gridReady)=\"onGridReady($event)\"\n  /> `,\n})\nexport class AppComponent {\n  columnDefs: ColDef[] = [\n    {\n      field: \"athlete\",\n      headerName: \"Athlete's Full Name\",\n      suppressHeaderFilterButton: true,\n      minWidth: 120,\n    },\n    {\n      field: \"age\",\n      headerName: \"Athlete's Age\",\n      sortable: false,\n      headerComponentParams: { menuIcon: \"fa-external-link-alt\" },\n    },\n    {\n      field: \"country\",\n      headerName: \"Athlete's Country\",\n      suppressHeaderFilterButton: true,\n      minWidth: 120,\n    },\n    { field: \"year\", headerName: \"Event Year\", sortable: false },\n    {\n      field: \"date\",\n      headerName: \"Event Date\",\n      suppressHeaderFilterButton: true,\n    },\n    { field: \"sport\", sortable: false },\n    {\n      field: \"gold\",\n      headerName: \"Gold Medals\",\n      headerComponentParams: { menuIcon: \"fa-cog\" },\n      minWidth: 120,\n    },\n    { field: \"silver\", headerName: \"Silver Medals\", sortable: false },\n    {\n      field: \"bronze\",\n      headerName: \"Bronze Medals\",\n      suppressHeaderFilterButton: true,\n      minWidth: 120,\n    },\n    { field: \"total\", headerName: \"Total Medals\", sortable: false },\n  ];\n  defaultColDef: ColDef = {\n    editable: true,\n    filter: true,\n    width: 120,\n    headerComponent: CustomHeader,\n    headerComponentParams: {\n      menuIcon: \"fa-bars\",\n    },\n  };\n  rowData!: IOlympicData[];\n\n  constructor(private http: HttpClient) {}\n\n  onGridReady(params: GridReadyEvent<IOlympicData>) {\n    this.http\n      .get<\n        IOlympicData[]\n      >(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n      .subscribe((data) => {\n        this.rowData = data;\n      });\n  }\n}\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","main.ts":"import '@angular/compiler';\nimport { provideHttpClient } from '@angular/common/http';\nimport { enableProdMode } from '@angular/core';\nimport { bootstrapApplication } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\nif ((window as any).ENABLE_PROD_MODE) {\n    enableProdMode();\n}\n\nbootstrapApplication(AppComponent, {\n    providers: [provideHttpClient()],\n});\n","systemjs.config.js":"(function (global) {\n    var ANGULAR_VERSION = '^19';\n    window.ENABLE_PROD_MODE = true;\n\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true,\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        // map tells the System loader where to look for things\n        map: {\n            '@angular/compiler': 'npm:@angular/compiler@' + ANGULAR_VERSION + '/fesm2022/compiler.mjs',\n            '@angular/platform-browser-dynamic':\n                'npm:@angular/platform-browser-dynamic@' + ANGULAR_VERSION + '/fesm2022/platform-browser-dynamic.mjs',\n\n            '@angular/core': 'npm:@angular/core@' + ANGULAR_VERSION + '/fesm2022/core.mjs',\n            '@angular/core/primitives/signals':\n                'npm:@angular/core@' + ANGULAR_VERSION + '/fesm2022/primitives/signals.mjs',\n            '@angular/core/primitives/event-dispatch':\n                'npm:@angular/core@' + ANGULAR_VERSION + '/fesm2022/primitives/event-dispatch.mjs',\n            '@angular/common': 'npm:@angular/common@' + ANGULAR_VERSION + '/fesm2022/common.mjs',\n            '@angular/common/http': 'npm:@angular/common@' + ANGULAR_VERSION + '/fesm2022/http.mjs',\n\n            '@angular/platform-browser':\n                'npm:@angular/platform-browser@' + ANGULAR_VERSION + '/fesm2022/platform-browser.mjs',\n            '@angular/platform-browser/animations':\n                'npm:@angular/platform-browser@' + ANGULAR_VERSION + '/fesm2022/animations.mjs',\n\n            '@angular/forms': 'npm:@angular/forms@' + ANGULAR_VERSION + '/fesm2022/forms.mjs',\n            '@angular/animations': 'npm:@angular/animations@' + ANGULAR_VERSION + '/fesm2022/animations.mjs',\n            '@angular/animations/browser': 'npm:@angular/animations@' + ANGULAR_VERSION + '/fesm2022/browser.mjs',\n\n            rxjs: 'npm:rxjs@7.8.1/dist/bundles/rxjs.umd.min.js',\n            'rxjs/operators': 'npm:rxjs@7.8.1/dist/bundles/rxjs.umd.min.js',\n\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@4.4/lib/typescript.min.js',\n\n            // our app is within the app folder, appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap,\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {}, // Stop css.js from defaulting to apps .ts extension\n            app: {\n                main: './main.ts',\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-angular': {\n                main: './fesm2022/ag-grid-angular.mjs',\n                defaultExtension: 'mjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"@angular/core":"^19","@angular/common":"^19","@angular/forms":"^19","@angular/platform-browser":"^19","ag-grid-angular":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}},"extras":["fontawesome"]}