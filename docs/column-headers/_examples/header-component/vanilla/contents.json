{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["customHeader.js","main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".customHeaderMenuButton {\n    float: left;\n    margin: 0 0 0 3px;\n}\n\n.customHeaderLabel {\n    float: left;\n    margin: 0 0 0 3px;\n}\n\n.customSortDownLabel {\n    float: left;\n    margin: 0 0 0 3px;\n}\n\n.customSortUpLabel {\n    float: left;\n    margin: 0;\n}\n\n.customSortRemoveLabel {\n    float: left;\n    margin: 0 0 0 3px;\n    font-size: 11px;\n}\n\n.active {\n    color: cornflowerblue;\n}\n","customHeader.js":"\n\n\n\n\nclass CustomHeader {\n     agParams;\n     eGui;\n    eFilterMenuButton;\n    eSortDownButton;\n    eSortUpButton;\n    eSortRemoveButton;\n    onMenuClickListener;\n    onSortAscRequestedListener;\n    onSortDescRequestedListener;\n    onRemoveSortListener;\n    onSortChangedListener;\n\n    init(agParams) {\n        this.agParams = agParams;\n        this.eGui = document.createElement('div');\n        this.eGui.innerHTML = `\n            <div class=\"customHeaderMenuButton\">\n                <i class=\"fa ${this.agParams.menuIcon}\"></i>\n            </div>\n            <div class=\"customHeaderLabel\">${this.agParams.displayName}</div>\n            <div class=\"customSortDownLabel inactive\">\n                <i class=\"fa fa-long-arrow-alt-down\"></i>\n            </div>\n            <div class=\"customSortUpLabel inactive\">\n                <i class=\"fa fa-long-arrow-alt-up\"></i>\n            </div>\n            <div class=\"customSortRemoveLabel inactive\">\n                <i class=\"fa fa-times\"></i>\n            </div>\n        `;\n\n        this.eFilterMenuButton = this.eGui.querySelector('.customHeaderMenuButton');\n        this.eSortDownButton = this.eGui.querySelector('.customSortDownLabel');\n        this.eSortUpButton = this.eGui.querySelector('.customSortUpLabel');\n        this.eSortRemoveButton = this.eGui.querySelector('.customSortRemoveLabel');\n\n        if (this.agParams.enableFilterButton) {\n            this.onMenuClickListener = this.onMenuClick.bind(this);\n            this.eFilterMenuButton.addEventListener('click', this.onMenuClickListener);\n        } else {\n            this.eGui.removeChild(this.eFilterMenuButton);\n        }\n\n        if (this.agParams.enableSorting) {\n            this.onSortAscRequestedListener = this.onSortRequested.bind(this, 'asc');\n            this.eSortDownButton.addEventListener('click', this.onSortAscRequestedListener);\n            this.onSortDescRequestedListener = this.onSortRequested.bind(this, 'desc');\n            this.eSortUpButton.addEventListener('click', this.onSortDescRequestedListener);\n            this.onRemoveSortListener = this.onSortRequested.bind(this, null);\n            this.eSortRemoveButton.addEventListener('click', this.onRemoveSortListener);\n\n            this.onSortChangedListener = this.onSortChanged.bind(this);\n            this.agParams.column.addEventListener('sortChanged', this.onSortChangedListener);\n            this.onSortChanged();\n        } else {\n            this.eGui.removeChild(this.eSortDownButton);\n            this.eGui.removeChild(this.eSortUpButton);\n            this.eGui.removeChild(this.eSortRemoveButton);\n        }\n    }\n\n    onSortChanged() {\n        const deactivate = (toDeactivateItems) => {\n            toDeactivateItems.forEach((toDeactivate) => {\n                toDeactivate.className = toDeactivate.className.split(' ')[0];\n            });\n        };\n\n        const activate = (toActivate) => {\n            toActivate.className = toActivate.className + ' active';\n        };\n\n        const sort = this.agParams.column.getSort();\n        if (sort === 'asc') {\n            deactivate([this.eSortUpButton, this.eSortRemoveButton]);\n            activate(this.eSortDownButton);\n        } else if (sort === 'desc') {\n            deactivate([this.eSortDownButton, this.eSortRemoveButton]);\n            activate(this.eSortUpButton);\n        } else {\n            deactivate([this.eSortUpButton, this.eSortDownButton]);\n            activate(this.eSortRemoveButton);\n        }\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n\n    onMenuClick() {\n        this.agParams.showColumnMenu(this.eFilterMenuButton);\n    }\n\n    onSortRequested(order, event) {\n        this.agParams.setSort(order, event.shiftKey);\n    }\n\n    destroy() {\n        if (this.onMenuClickListener) {\n            this.eFilterMenuButton.removeEventListener('click', this.onMenuClickListener);\n        }\n        this.eSortDownButton.removeEventListener('click', this.onSortAscRequestedListener);\n        this.eSortUpButton.removeEventListener('click', this.onSortDescRequestedListener);\n        this.eSortRemoveButton.removeEventListener('click', this.onRemoveSortListener);\n        this.agParams.column.removeEventListener('sortChanged', this.onSortChangedListener);\n    }\n}\n","main.js":"const columnDefs = [\n  { field: \"athlete\", suppressHeaderFilterButton: true, minWidth: 120 },\n  {\n    field: \"age\",\n    sortable: false,\n    headerComponentParams: { menuIcon: \"fa-external-link-alt\" },\n  },\n  { field: \"country\", suppressHeaderFilterButton: true, minWidth: 120 },\n  { field: \"year\", sortable: false },\n  { field: \"date\", suppressHeaderFilterButton: true },\n  { field: \"sport\", sortable: false },\n  {\n    field: \"gold\",\n    headerComponentParams: { menuIcon: \"fa-cog\" },\n    minWidth: 120,\n  },\n  { field: \"silver\", sortable: false },\n  { field: \"bronze\", suppressHeaderFilterButton: true, minWidth: 120 },\n  { field: \"total\", sortable: false },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n  columnDefs: columnDefs,\n  defaultColDef: {\n    editable: true,\n    flex: 1,\n    minWidth: 100,\n    filter: true,\n    headerComponent: CustomHeader,\n    headerComponentParams: {\n      menuIcon: \"fa-filter\",\n    },\n  },\n};\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then((data) => {\n      gridApi.setGridOption(\"rowData\", data);\n    });\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}},"extras":["fontawesome"]}