{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["customStatsToolPanel.js","main.js"],"styleFiles":[],"files":{"customStatsToolPanel.js":"\n\n\n\n\nclass CustomStatsToolPanel  {\n    eGui;\n    init(params) {\n        this.eGui = document.createElement('div');\n        this.eGui.style.textAlign = 'center';\n\n        // calculate stats when new rows loaded, i.e. onModelUpdated\n        const renderStats = () => {\n            this.eGui.innerHTML = this.calculateStats(params);\n        };\n        params.api.addEventListener('modelUpdated', renderStats);\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n\n    refresh() {}\n\n    calculateStats(params) {\n        let numGold = 0,\n            numSilver = 0,\n            numBronze = 0;\n        params.api.forEachNode(function (rowNode) {\n            const data = rowNode.data;\n            if (data.gold) numGold += data.gold;\n            if (data.silver) numSilver += data.silver;\n            if (data.bronze) numBronze += data.bronze;\n        });\n\n        return `\n        <span>\n            <h2><i class=\"fa fa-calculator\"></i> ${params.title}</h2>\n            <dl style=\"font-size: large; padding: 30px 40px 10px 30px\">\n                <dt style=\"padding-bottom: 15px\">Total Medals: <b>${numGold + numSilver + numBronze}</b></dt>\n                <dt style=\"padding-bottom: 15px\">Total Gold: <b>${numGold}</b></dt><dt style=\"padding-bottom: 15px\">Total Silver: <b>${numSilver}</b></dt>\n                <dt style=\"padding-bottom: 15px\">Total Bronze: <b>${numBronze}</b></dt>\n            </dl>\n        </span>`;\n    }\n}\n","main.js":"const columnDefs = [\n  { field: \"athlete\", width: 150, filter: \"agTextColumnFilter\" },\n  { field: \"age\", width: 90 },\n  { field: \"country\", width: 120 },\n  { field: \"year\", width: 90 },\n  { field: \"date\", width: 110 },\n  { field: \"gold\", width: 100, filter: false },\n  { field: \"silver\", width: 100, filter: false },\n  { field: \"bronze\", width: 100, filter: false },\n  { field: \"total\", width: 100, filter: false },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n  theme: agGrid.themeQuartz.withPart(\n    agGrid.iconOverrides({\n      type: \"image\",\n      mask: true,\n      icons: {\n        // map of icon names to images\n        \"custom-stats\": {\n          svg: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\"><g stroke=\"#7F8C8D\" fill=\"none\" fill-rule=\"evenodd\"><path d=\"M10.5 6V4.5h-5v.532a1 1 0 0 0 .36.768l1.718 1.432a1 1 0 0 1 0 1.536L5.86 10.2a1 1 0 0 0-.36.768v.532h5V10\"/><rect x=\"1.5\" y=\"1.5\" width=\"13\" height=\"13\" rx=\"2\"/></g></svg>',\n        },\n      },\n    }),\n  ),\n  defaultColDef: {\n    editable: true,\n    flex: 1,\n    minWidth: 100,\n    filter: true,\n  },\n  icons: {\n    \"custom-stats\": '<span class=\"ag-icon ag-icon-custom-stats\"></span>',\n  },\n  columnDefs: columnDefs,\n  sideBar: {\n    toolPanels: [\n      {\n        id: \"columns\",\n        labelDefault: \"Columns\",\n        labelKey: \"columns\",\n        iconKey: \"columns\",\n        toolPanel: \"agColumnsToolPanel\",\n      },\n      {\n        id: \"filters\",\n        labelDefault: \"Filters\",\n        labelKey: \"filters\",\n        iconKey: \"filter\",\n        toolPanel: \"agFiltersToolPanel\",\n      },\n      {\n        id: \"customStats\",\n        labelDefault: \"Custom Stats\",\n        labelKey: \"customStats\",\n        iconKey: \"custom-stats\",\n        toolPanel: CustomStatsToolPanel,\n        toolPanelParams: {\n          title: \"Custom Stats\",\n        },\n      },\n    ],\n    defaultToolPanel: \"customStats\",\n  },\n  onCellValueChanged: (params) => {\n    params.api.refreshClientSideRowModel();\n  },\n};\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then((data) => {\n      gridApi.setGridOption(\"rowData\", data);\n    });\n});\n","index.html":"<div style=\"height: 100%; box-sizing: border-box\">\n    <div id=\"myGrid\" style=\"height: 100%\"></div>\n</div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}},"extras":["fontawesome"]}