{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["data.js","main.js"],"styleFiles":[],"files":{"data.js":"function getData() {\n    return [\n        {\n            path: { key: '1', displayValue: 'Erica Rogers' },\n            jobTitle: 'CEO',\n            employmentType: 'Permanent',\n        },\n        {\n            path: { key: '1.1', displayValue: 'Malcolm Barrett' },\n            jobTitle: 'Exec. Vice President',\n            employmentType: 'Permanent',\n        },\n        {\n            path: { key: '1.1.1', displayValue: 'Esther Baker' },\n            jobTitle: 'Director of Operations',\n            employmentType: 'Permanent',\n        },\n        {\n            path: { key: '1.1.1.1', displayValue: 'Brittany Hanson' },\n            jobTitle: 'Fleet Coordinator',\n            employmentType: 'Permanent',\n        },\n        {\n            path: { key: '1.1.1.1.1', displayValue: 'Leah Flowers' },\n            jobTitle: 'Parts Technician',\n            employmentType: 'Contract',\n        },\n        {\n            path: { key: '1.1.1.1.2', displayValue: 'Tammy Sutton' },\n            jobTitle: 'Service Technician',\n            employmentType: 'Contract',\n        },\n        {\n            path: { key: '1.1.1.2', displayValue: 'Derek Paul' },\n            jobTitle: 'Inventory Control',\n            employmentType: 'Permanent',\n        },\n        {\n            path: { key: '1.1.2', displayValue: 'Francis Strickland' },\n            jobTitle: 'VP Sales',\n            employmentType: 'Permanent',\n        },\n        {\n            path: { key: '1.1.2.1', displayValue: 'Morris Hanson' },\n            jobTitle: 'Sales Manager',\n            employmentType: 'Permanent',\n        },\n        {\n            path: { key: '1.1.2.2', displayValue: 'Todd Tyler' },\n            jobTitle: 'Sales Executive',\n            employmentType: 'Contract',\n        },\n        {\n            path: { key: '1.1.2.3', displayValue: 'Bennie Wise' },\n            jobTitle: 'Sales Executive',\n            employmentType: 'Contract',\n        },\n        {\n            path: { key: '1.2', displayValue: 'Luke McBride' },\n            jobTitle: 'Exec. Vice President',\n            employmentType: 'Permanent',\n        },\n        {\n            path: { key: '1.2.1', displayValue: 'Sarah Baker' },\n            jobTitle: 'Director of Operations',\n            employmentType: 'Permanent',\n        },\n        {\n            path: { key: '1.2.1.1', displayValue: 'Mason Hanson' },\n            jobTitle: 'Fleet Coordinator',\n            employmentType: 'Permanent',\n        },\n        {\n            path: { key: '1.2.1.1.1', displayValue: 'Hannah Flowers' },\n            jobTitle: 'Parts Technician',\n            employmentType: 'Contract',\n        },\n        {\n            path: { key: '1.2.1.1.2', displayValue: 'Rob Sutton' },\n            jobTitle: 'Service Technician',\n            employmentType: 'Contract',\n        },\n        {\n            path: { key: '1.2.2', displayValue: 'Paul Smith' },\n            jobTitle: 'Inventory Control',\n            employmentType: 'Permanent',\n        },\n    ];\n}\n","main.js":"const pathLookup = getData().reduce((pathMap, row) => {\n  pathMap[row.path.key] = row.path.displayValue;\n  return pathMap;\n}, {});\n\nlet gridApi;\n\nconst gridOptions = {\n  columnDefs: [{ field: \"employmentType\" }, { field: \"jobTitle\" }],\n  defaultColDef: {\n    flex: 1,\n    minWidth: 200,\n    filter: true,\n    floatingFilter: true,\n    cellDataType: false,\n  },\n  autoGroupColumnDef: {\n    headerName: \"Employee\",\n    field: \"path\",\n    cellRendererParams: {\n      suppressCount: true,\n    },\n    filter: \"agSetColumnFilter\",\n    filterParams: {\n      treeList: true,\n      keyCreator: (params) => params.value.join(\".\"),\n      treeListFormatter: treeListFormatter,\n      valueFormatter: valueFormatter,\n    },\n    minWidth: 280,\n    valueFormatter: (params) => params.value.displayValue,\n  },\n  treeData: true,\n  groupDefaultExpanded: -1,\n  getDataPath: (data) => data.path.key.split(\".\"),\n  rowData: getData(),\n};\n\nfunction treeListFormatter(pathKey, _level, parentPathKeys) {\n  return pathLookup[[...parentPathKeys, pathKey].join(\".\")];\n}\n\nfunction valueFormatter(params) {\n  return params.value ? pathLookup[params.value.join(\".\")] : \"(Blanks)\";\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}