{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":[],"files":{"main.js":"let gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    { field: \"employmentType\" },\n    {\n      field: \"startDate\",\n      valueFormatter: (params) =>\n        params.value ? params.value.toLocaleDateString() : params.value,\n      filterParams: {\n        treeList: true,\n        comparator: reverseOrderComparator,\n      },\n    },\n  ],\n  defaultColDef: {\n    flex: 1,\n    minWidth: 200,\n    filter: true,\n    floatingFilter: true,\n    cellDataType: false,\n  },\n  autoGroupColumnDef: {\n    headerName: \"Employee\",\n    field: \"employeeName\",\n    cellRendererParams: {\n      suppressCount: true,\n    },\n    filter: \"agSetColumnFilter\",\n    filterParams: {\n      treeList: true,\n      keyCreator: (params) => (params.value ? params.value.join(\"#\") : null),\n      comparator: arrayComparator,\n    },\n    minWidth: 280,\n  },\n  treeData: true,\n  groupDefaultExpanded: -1,\n  getDataPath: (data) => {\n    return data.dataPath;\n  },\n  getRowId: (params) => String(params.data.employeeId),\n};\n\nfunction arrayComparator(a, b) {\n  if (a == null) {\n    return b == null ? 0 : -1;\n  } else if (b == null) {\n    return 1;\n  }\n  for (let i = 0; i < a.length; i++) {\n    if (i >= b.length) {\n      return 1;\n    }\n    const comparisonValue = reverseOrderComparator(a[i], b[i]);\n    if (comparisonValue !== 0) {\n      return comparisonValue;\n    }\n  }\n  return 0;\n}\n\nfunction reverseOrderComparator(a, b) {\n  return a < b ? 1 : a > b ? -1 : 0;\n}\n\nfunction processData(data) {\n  const flattenedData = [];\n  const flattenRowRecursive = (row, parentPath) => {\n    const dateParts = row.startDate.split(\"/\");\n    const startDate = new Date(\n      parseInt(dateParts[2]),\n      dateParts[1] - 1,\n      dateParts[0],\n    );\n    const dataPath = [...parentPath, row.employeeName];\n    flattenedData.push({ ...row, dataPath, startDate });\n    if (row.underlings) {\n      row.underlings.forEach((underling) =>\n        flattenRowRecursive(underling, dataPath),\n      );\n    }\n  };\n  data.forEach((row) => flattenRowRecursive(row, []));\n  return flattenedData;\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/tree-data.json\")\n    .then((response) => response.json())\n    .then((data) => gridApi.setGridOption(\"rowData\", processData(data)));\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}