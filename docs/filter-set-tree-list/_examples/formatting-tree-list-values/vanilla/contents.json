{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":[],"files":{"main.js":"let gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    { field: \"country\", rowGroup: true, hide: true },\n    { field: \"sport\" },\n    {\n      field: \"date\",\n      valueFormatter: dateCellValueFormatter,\n      filter: \"agSetColumnFilter\",\n      filterParams: {\n        treeList: true,\n        treeListFormatter: treeListFormatter,\n        valueFormatter: dateFloatingFilterValueFormatter,\n      },\n    },\n    {\n      field: \"gold\",\n    },\n  ],\n  defaultColDef: {\n    flex: 1,\n    floatingFilter: true,\n    cellDataType: false,\n  },\n  autoGroupColumnDef: {\n    field: \"athlete\",\n    filter: \"agSetColumnFilter\",\n    filterParams: {\n      treeList: true,\n      keyCreator: (params) => (params.value ? params.value.join(\"#\") : null),\n      treeListFormatter: groupTreeListFormatter,\n    },\n    minWidth: 200,\n  },\n};\n\nfunction dateCellValueFormatter(params) {\n  return params.value ? params.value.toLocaleDateString() : \"\";\n}\n\nfunction dateFloatingFilterValueFormatter(params) {\n  return params.value ? params.value.toLocaleDateString() : \"(Blanks)\";\n}\n\nfunction treeListFormatter(pathKey, level, _parentPathKeys) {\n  if (level === 1) {\n    const date = new Date();\n    date.setMonth(Number(pathKey) - 1);\n    return date.toLocaleDateString(undefined, { month: \"long\" });\n  }\n  return pathKey || \"(Blanks)\";\n}\n\nfunction groupTreeListFormatter(pathKey, level, _parentPathKeys) {\n  if (level === 0 && pathKey) {\n    return pathKey + \" (\" + pathKey.substring(0, 2).toUpperCase() + \")\";\n  }\n  return pathKey || \"(Blanks)\";\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then((data) => {\n      const randomDays = [1, 4, 10, 15, 18];\n      gridApi.setGridOption(\"rowData\", [\n        {},\n        ...data.map((row) => {\n          // generate pseudo-random dates\n          const dateParts = row.date.split(\"/\");\n          const randomMonth =\n            parseInt(dateParts[1]) - Math.floor(Math.random() * 3);\n          const newDate = new Date(\n            parseInt(dateParts[2]),\n            randomMonth,\n            randomMonth + randomDays[Math.floor(Math.random() * 5)],\n          );\n          return { ...row, date: newDate };\n        }),\n      ]);\n    });\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}