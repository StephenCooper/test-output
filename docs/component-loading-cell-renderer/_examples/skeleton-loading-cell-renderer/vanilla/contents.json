{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":[],"files":{"main.js":"let gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    { field: \"country\", flex: 4 },\n    { field: \"sport\", flex: 4 },\n    { field: \"year\", flex: 3 },\n    { field: \"gold\", aggFunc: \"sum\", flex: 2 },\n    { field: \"silver\", aggFunc: \"sum\", flex: 2 },\n    { field: \"bronze\", aggFunc: \"sum\", flex: 2 },\n  ],\n  defaultColDef: {\n    minWidth: 75,\n  },\n\n  // use the server-side row model\n  rowModelType: \"serverSide\",\n  // suppress the default full width loading behaviour\n  suppressServerSideFullWidthLoadingRow: true,\n\n  cacheBlockSize: 5,\n  maxBlocksInCache: 0,\n  rowBuffer: 0,\n  maxConcurrentDatasourceRequests: 1,\n  blockLoadDebounceMillis: 200,\n};\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then((data) => {\n      // add id to data\n      let idSequence = 0;\n      data.forEach((item) => {\n        item.id = idSequence++;\n      });\n\n      const server = getFakeServer(data);\n      const datasource = getServerSideDatasource(server);\n      gridApi.setGridOption(\"serverSideDatasource\", datasource);\n    });\n});\n\nfunction getServerSideDatasource(server) {\n  return {\n    getRows: (params) => {\n      // adding delay to simulate real server call\n      setTimeout(() => {\n        const response = server.getResponse(params.request);\n\n        if (response.success) {\n          // call the success callback\n          params.success({\n            rowData: response.rows,\n            rowCount: response.lastRow,\n          });\n        } else {\n          // inform the grid request failed\n          params.fail();\n        }\n      }, 4000);\n    },\n  };\n}\n\nfunction getFakeServer(allData) {\n  return {\n    getResponse: (request) => {\n      console.log(\n        \"asking for rows: \" + request.startRow + \" to \" + request.endRow,\n      );\n\n      // take a slice of the total rows\n      const rowsThisPage = allData.slice(request.startRow, request.endRow);\n      const lastRow = allData.length;\n\n      return {\n        success: true,\n        rows: rowsThisPage,\n        lastRow: lastRow,\n      };\n    },\n  };\n}\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}