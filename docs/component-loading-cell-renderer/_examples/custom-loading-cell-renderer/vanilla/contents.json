{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["customLoadingCellRenderer.js","main.js"],"styleFiles":[],"files":{"customLoadingCellRenderer.js":"\nclass CustomLoadingCellRenderer  {\n    eGui;\n\n    init(params) {\n        this.eGui = document.createElement('div');\n        this.eGui.innerHTML = `\n            <div class=\"ag-custom-loading-cell\" style=\"padding-left: 10px; line-height: 25px;\">  \n                <i class=\"fas fa-spinner fa-pulse\"></i> \n                <span>${params.loadingMessage} </span>\n            </div>\n        `;\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n}\n","main.js":"const columnDefs = [\n  { field: \"id\" },\n  { field: \"athlete\", width: 150 },\n  { field: \"age\" },\n  { field: \"country\" },\n  { field: \"year\" },\n  { field: \"sport\" },\n  { field: \"gold\" },\n  { field: \"silver\" },\n  { field: \"bronze\" },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n  defaultColDef: {\n    editable: true,\n    flex: 1,\n    minWidth: 100,\n    filter: true,\n  },\n  loadingCellRenderer: CustomLoadingCellRenderer,\n  loadingCellRendererParams: {\n    loadingMessage: \"One moment please...\",\n  },\n\n  columnDefs: columnDefs,\n\n  // use the server-side row model\n  rowModelType: \"serverSide\",\n\n  // fetch 20 rows per at a time\n  cacheBlockSize: 20,\n\n  // only keep 10 blocks of rows\n  maxBlocksInCache: 10,\n};\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then((data) => {\n      // add id to data\n      let idSequence = 0;\n      data.forEach((item) => {\n        item.id = idSequence++;\n      });\n\n      const server = getFakeServer(data);\n      const datasource = getServerSideDatasource(server);\n      gridApi.setGridOption(\"serverSideDatasource\", datasource);\n    });\n});\n\nfunction getServerSideDatasource(server) {\n  return {\n    getRows: (params) => {\n      // adding delay to simulate real server call\n      setTimeout(() => {\n        const response = server.getResponse(params.request);\n\n        if (response.success) {\n          // call the success callback\n          params.success({\n            rowData: response.rows,\n            rowCount: response.lastRow,\n          });\n        } else {\n          // inform the grid request failed\n          params.fail();\n        }\n      }, 4000);\n    },\n  };\n}\n\nfunction getFakeServer(allData) {\n  return {\n    getResponse: (request) => {\n      console.log(\n        \"asking for rows: \" + request.startRow + \" to \" + request.endRow,\n      );\n\n      // take a slice of the total rows\n      const rowsThisPage = allData.slice(request.startRow, request.endRow);\n\n      // if on or after the last page, work out the last row.\n      const lastRow =\n        allData.length <= (request.endRow || 0) ? allData.length : -1;\n\n      return {\n        success: true,\n        rows: rowsThisPage,\n        lastRow: lastRow,\n      };\n    },\n  };\n}\n","index.html":"<div style=\"height: 100%; padding-top: 25px; box-sizing: border-box\">\n    <div id=\"myGrid\" style=\"height: 100%\"></div>\n</div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}},"extras":["fontawesome"]}