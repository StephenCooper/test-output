{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"main.ts","styleFiles":["styles.css"],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n\n.logo {\n    display: block;\n    width: 90px;\n    height: auto;\n    margin-right: 12px;\n    filter: brightness(1.1);\n}\n\n.imgSpan {\n    display: flex;\n    height: 100%;\n    width: 100%;\n    align-items: center;\n}\n\n.imgSpanLogo {\n    display: flex;\n    height: 100%;\n    width: 100%;\n    align-items: center;\n    justify-content: center;\n}\n\n.missionSpan {\n    display: flex;\n    justify-content: center;\n    height: 100%;\n    align-items: center;\n}\n\n.missionIcon {\n    width: auto;\n    height: auto;\n}\n\n.priceIcon {\n    display: block;\n    width: 15px;\n    height: auto;\n    max-height: 50%;\n    margin-right: 2px;\n}\n\n.logoCell {\n    background-color: #fff3;\n}\n","companyLogoRenderer.ts":"import type { ICellRendererComp, ICellRendererParams } from 'ag-grid-community';\n\nexport class CompanyLogoRenderer implements ICellRendererComp {\n    eGui!: HTMLSpanElement;\n\n    // Optional: Params for rendering. The same params that are passed to the cellRenderer function.\n    init(params: ICellRendererParams) {\n        const companyLogo: HTMLImageElement = document.createElement('img');\n        companyLogo.src = `https://www.ag-grid.com/example-assets/software-company-logos/${params.value.toLowerCase()}.svg`;\n        companyLogo.setAttribute('class', 'logo');\n\n        this.eGui = document.createElement('span');\n        this.eGui.setAttribute('class', 'imgSpanLogo');\n        this.eGui.appendChild(companyLogo);\n    }\n\n    // Required: Return the DOM element of the component, this is what the grid puts into the cell\n    getGui() {\n        return this.eGui;\n    }\n\n    // Required: Get the cell to refresh.\n    refresh(params: ICellRendererParams): boolean {\n        return false;\n    }\n}\n","companyRenderer.ts":"import type { ICellRendererParams } from 'ag-grid-community';\n\nexport function CompanyRenderer(params: ICellRendererParams) {\n    const link = `<a href=\"${params.value}\" target=\"_blank\">${new URL(params.value).hostname}</a>`;\n    return link;\n}\n","customButtonComponent.ts":"export class CustomButtonComponent {\n    eGui!: HTMLDivElement;\n    eButton: any;\n    eventListener!: () => void;\n\n    init() {\n        this.eGui = document.createElement('div');\n        const eButton = document.createElement('button');\n        eButton.className = 'btn-simple';\n        eButton.textContent = 'Launch!';\n        this.eventListener = () => alert('Software Launched');\n        eButton.addEventListener('click', this.eventListener);\n        this.eGui.appendChild(eButton);\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n\n    refresh() {\n        return true;\n    }\n\n    destroy() {\n        if (this.eButton) {\n            this.eButton.removeEventListener('click', this.eventListener);\n        }\n    }\n}\n","missionResultRenderer.ts":"import type { ICellRendererComp, ICellRendererParams } from 'ag-grid-community';\n\nexport class MissionResultRenderer implements ICellRendererComp {\n    eGui!: HTMLSpanElement;\n\n    // Optional: Params for rendering. The same params that are passed to the cellRenderer function.\n    init(params: ICellRendererParams) {\n        const icon: HTMLImageElement = document.createElement('img');\n        icon.src = `https://www.ag-grid.com/example-assets/icons/${\n            params.value ? 'tick-in-circle' : 'cross-in-circle'\n        }.png`;\n        icon.setAttribute('class', 'missionIcon');\n\n        this.eGui = document.createElement('span');\n        this.eGui.setAttribute('class', 'missionSpan');\n        this.eGui.appendChild(icon);\n    }\n\n    // Required: Return the DOM element of the component, this is what the grid puts into the cell\n    getGui() {\n        return this.eGui;\n    }\n\n    // Required: Get the cell to refresh.\n    refresh(params: ICellRendererParams): boolean {\n        return false;\n    }\n}\n","priceRenderer.ts":"import type { ICellRendererParams } from 'ag-grid-community';\n\nexport function PriceRenderer(params: ICellRendererParams) {\n    let priceMultiplier = 1;\n\n    if (params.value > 300_000_000_000) {\n        priceMultiplier = 5;\n    } else if (params.value > 20_000_000_000) {\n        priceMultiplier = 4;\n    } else if (params.value > 10_000_000_000) {\n        priceMultiplier = 3;\n    } else if (params.value > 5_000_000_000) {\n        priceMultiplier = 2;\n    }\n\n    const priceSpan = document.createElement('span');\n    priceSpan.setAttribute('class', 'imgSpan');\n    for (let i = 0; i < priceMultiplier; i++) {\n        const priceElement = document.createElement('img');\n        priceElement.src = `https://www.ag-grid.com/example-assets/icons/pound-coin-color-icon.svg`;\n        priceElement.setAttribute('class', 'priceIcon');\n        priceSpan.appendChild(priceElement);\n    }\n    return priceSpan;\n}\n","main.ts":"import {\n  CellStyleModule,\n  ClientSideRowModelModule,\n  ColDef,\n  ColGroupDef,\n  GridApi,\n  GridOptions,\n  ModuleRegistry,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\nimport { CompanyLogoRenderer } from \"./companyLogoRenderer\";\nimport { CompanyRenderer } from \"./companyRenderer\";\nimport { CustomButtonComponent } from \"./customButtonComponent\";\nimport { MissionResultRenderer } from \"./missionResultRenderer\";\nimport { PriceRenderer } from \"./priceRenderer\";\n\nModuleRegistry.registerModules([\n  CellStyleModule,\n  ClientSideRowModelModule,\n  ValidationModule /* Development Only */,\n]);\n\n// Grid API: Access to Grid API methods\nlet gridApi: GridApi;\n\n// Row Data Interface\ninterface IRow {\n  company: string;\n  location: string;\n  price: number;\n  successful: boolean;\n}\n\nconst gridOptions: GridOptions = {\n  defaultColDef: {\n    flex: 10,\n  },\n  // Data to be displayed\n  rowData: [] as IRow[],\n  // Columns to be displayed (Should match rowData properties)\n  columnDefs: [\n    {\n      field: \"company\",\n      flex: 6,\n    },\n    {\n      field: \"website\",\n      cellRenderer: CompanyRenderer,\n    },\n    {\n      headerName: \"Logo\",\n      field: \"company\",\n      cellRenderer: CompanyLogoRenderer,\n      cellClass: \"logoCell\",\n      minWidth: 100,\n    },\n    {\n      field: \"revenue\",\n      cellRenderer: PriceRenderer,\n    },\n    {\n      field: \"hardware\",\n      headerName: \"Hardware\",\n      cellRenderer: MissionResultRenderer,\n    },\n    {\n      field: \"actions\",\n      headerName: \"Actions\",\n      cellRenderer: CustomButtonComponent,\n    },\n  ] as ColDef[],\n};\n\n// setup the grid after the page has finished loading\nconst gridDiv = document.querySelector<HTMLElement>(\"#myGrid\")!;\ngridApi = createGrid(gridDiv, gridOptions);\n\nfetch(\"https://www.ag-grid.com/example-assets/small-company-data.json\")\n  .then((response) => response.json())\n  .then((data) => {\n    gridApi!.setGridOption(\"rowData\", data);\n  });\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {},\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        // map tells the System loader where to look for things\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            // appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap,\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {},\n            app: {\n                main: './main.ts',\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}