{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["genderRenderer.js","moodRenderer.js","main.js"],"styleFiles":[],"files":{"genderRenderer.js":"\nclass GenderRenderer  {\n    eGui;\n    init(params) {\n        this.eGui = document.createElement('span');\n        const icon = params.value === 'Male' ? 'fa-male' : 'fa-female';\n        this.eGui.innerHTML = `<i class=\"fa ${icon}\"></i> ${params.value}`;\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n    refresh(params) {\n        return false;\n    }\n}\n","moodRenderer.js":"\nclass MoodRenderer  {\n    eGui;\n\n    init(params) {\n        this.eGui = document.createElement('span');\n        if (params.value !== '' || params.value !== undefined) {\n            const imgForMood =\n                params.value === 'Happy'\n                    ? 'https://www.ag-grid.com/example-assets/smileys/happy.png'\n                    : 'https://www.ag-grid.com/example-assets/smileys/sad.png';\n            this.eGui.innerHTML = `<img width=\"20px\" src=\"${imgForMood}\" />`;\n        }\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n\n    refresh(params) {\n        return false;\n    }\n}\n","main.js":"const rowData = [\n  { value: 14, type: \"age\" },\n  { value: \"Female\", type: \"gender\" },\n  { value: \"Happy\", type: \"mood\" },\n  { value: 21, type: \"age\" },\n  { value: \"Male\", type: \"gender\" },\n  { value: \"Sad\", type: \"mood\" },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    { field: \"value\" },\n    {\n      headerName: \"Rendered Value\",\n      field: \"value\",\n      cellRendererSelector: (params) => {\n        const moodDetails = {\n          component: MoodRenderer,\n        };\n\n        const genderDetails = {\n          component: GenderRenderer,\n          params: { values: [\"Male\", \"Female\"] },\n        };\n        if (params.data) {\n          if (params.data.type === \"gender\") return genderDetails;\n          else if (params.data.type === \"mood\") return moodDetails;\n        }\n        return undefined;\n      },\n    },\n    { field: \"type\" },\n  ],\n  defaultColDef: {\n    flex: 1,\n    cellDataType: false,\n  },\n  rowData: rowData,\n  onRowEditingStarted: (event) => {\n    console.log(\"never called - not doing row editing\");\n  },\n  onRowEditingStopped: (event) => {\n    console.log(\"never called - not doing row editing\");\n  },\n  onCellEditingStarted: (event) => {\n    console.log(\"cellEditingStarted\");\n  },\n  onCellEditingStopped: (event) => {\n    console.log(\"cellEditingStopped\");\n  },\n};\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}},"extras":["fontawesome"]}