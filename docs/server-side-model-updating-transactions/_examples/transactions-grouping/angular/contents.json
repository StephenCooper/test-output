{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"app.component.ts","styleFiles":[],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n","data.ts":"export let data = [\n    {\n        product: 'Palm Oil',\n        portfolio: 'Aggressive',\n        book: 'GL-62472',\n        tradeId: 0,\n        current: 23558,\n        previous: 27014,\n    },\n    {\n        product: 'Palm Oil',\n        portfolio: 'Aggressive',\n        book: 'GL-62472',\n        tradeId: 1,\n        current: 92080,\n        previous: 97460,\n    },\n    {\n        product: 'Palm Oil',\n        portfolio: 'Hybrid',\n        book: 'GL-62473',\n        tradeId: 2,\n        current: 1352,\n        previous: 5835,\n    },\n    {\n        product: 'Palm Oil',\n        portfolio: 'Hybrid',\n        book: 'GL-62473',\n        tradeId: 3,\n        current: 87685,\n        previous: 91535,\n    },\n    {\n        product: 'Palm Oil',\n        portfolio: 'Defensive',\n        book: 'GL-62474',\n        tradeId: 4,\n        current: 25263,\n        previous: 26374,\n    },\n    {\n        product: 'Palm Oil',\n        portfolio: 'Defensive',\n        book: 'GL-62474',\n        tradeId: 5,\n        current: 65201,\n        previous: 69745,\n    },\n    {\n        product: 'Palm Oil',\n        portfolio: 'Income',\n        book: 'GL-62475',\n        tradeId: 6,\n        current: 48405,\n        previous: 50367,\n    },\n    {\n        product: 'Palm Oil',\n        portfolio: 'Income',\n        book: 'GL-62475',\n        tradeId: 7,\n        current: 65361,\n        previous: 64564,\n    },\n    {\n        product: 'Palm Oil',\n        portfolio: 'Speculative',\n        book: 'GL-62476',\n        tradeId: 8,\n        current: 94747,\n        previous: 94067,\n    },\n    {\n        product: 'Palm Oil',\n        portfolio: 'Speculative',\n        book: 'GL-62476',\n        tradeId: 9,\n        current: 28967,\n        previous: 32447,\n    },\n];\n\nexport function deletePortfolioOnServer(portfolio) {\n    const oldDataSize = data.length;\n    data = data.filter((record) => record.portfolio !== portfolio);\n    return {\n        success: oldDataSize !== data.length,\n    };\n}\n\nlet currentServerRecordId = data.length;\nexport function createRowOnServer(portfolio, product, book) {\n    const groupDidExist = data.some((record) => record.portfolio === 'Aggressive');\n    const newRecord = {\n        tradeId: ++currentServerRecordId,\n        portfolio: portfolio,\n        product: product,\n        book: book,\n        current: 0,\n        previous: 0,\n    };\n    data.push(newRecord);\n\n    return {\n        success: true,\n        newGroupCreated: !groupDidExist,\n        newRecord: newRecord,\n    };\n}\n\nexport function changePortfolioOnServer(oldPortfolio, newPortfolio) {\n    const groupDidExist = data.some((record) => record.portfolio === newPortfolio);\n    const updatedRecords = [];\n    data.forEach((record) => {\n        if (record.portfolio === oldPortfolio) {\n            record.portfolio = newPortfolio;\n            updatedRecords.push(record);\n        }\n    });\n    return {\n        success: !!updatedRecords.length,\n        newGroupCreated: !groupDidExist,\n        updatedRecords: updatedRecords,\n    };\n}\n","fakeServer.ts":"export function FakeServer(data) {\n    alasql.options.cache = false;\n\n    return {\n        getData: function (request) {\n            const results = executeQuery(request);\n\n            return {\n                success: true,\n                rows: results,\n            };\n        },\n    };\n\n    function executeQuery(request) {\n        const groupByResult = executeRowGroupQuery(request);\n\n        return groupByResult;\n    }\n\n    function executeRowGroupQuery(request) {\n        const groupByQuery = buildGroupBySql(request);\n\n        console.log('[FakeServer] - about to execute row group query:', groupByQuery);\n\n        return alasql(groupByQuery, [data]);\n    }\n\n    function buildGroupBySql(request) {\n        return (\n            selectSql(request) +\n            ' FROM ?' +\n            whereSql(request) +\n            groupBySql(request) +\n            orderBySql(request) +\n            limitSql(request)\n        );\n    }\n\n    function selectSql(request) {\n        const rowGroupCols = request.rowGroupCols;\n        const valueCols = request.valueCols;\n        const groupKeys = request.groupKeys;\n\n        if (isDoingGrouping(rowGroupCols, groupKeys)) {\n            const rowGroupCol = rowGroupCols[groupKeys.length];\n            const colsToSelect = [rowGroupCol.id];\n\n            valueCols.forEach(function (valueCol) {\n                colsToSelect.push(valueCol.aggFunc + '(' + valueCol.id + ') AS ' + valueCol.id);\n            });\n\n            return 'SELECT ' + colsToSelect.join(', ');\n        }\n\n        return 'SELECT *';\n    }\n\n    function whereSql(request) {\n        const rowGroups = request.rowGroupCols;\n        const groupKeys = request.groupKeys;\n        const whereParts = [];\n\n        if (groupKeys) {\n            groupKeys.forEach(function (key, i) {\n                const value = typeof key === 'string' ? \"'\" + key + \"'\" : key;\n\n                whereParts.push(rowGroups[i].id + ' = ' + value);\n            });\n        }\n\n        if (whereParts.length > 0) {\n            return ' WHERE ' + whereParts.join(' AND ');\n        }\n\n        return '';\n    }\n\n    function groupBySql(request) {\n        const rowGroupCols = request.rowGroupCols;\n        const groupKeys = request.groupKeys;\n\n        if (isDoingGrouping(rowGroupCols, groupKeys)) {\n            const rowGroupCol = rowGroupCols[groupKeys.length];\n\n            return ' GROUP BY ' + rowGroupCol.id + ' HAVING count(*) > 0';\n        }\n\n        return '';\n    }\n\n    function orderBySql(request) {\n        const sortModel = request.sortModel;\n\n        if (sortModel.length === 0) return '';\n\n        const sorts = sortModel.map(function (s) {\n            return s.colId + ' ' + s.sort.toUpperCase();\n        });\n\n        return ' ORDER BY ' + sorts.join(', ');\n    }\n\n    function limitSql(request) {\n        if (request.endRow == undefined || request.startRow == undefined) {\n            return '';\n        }\n        const blockSize = request.endRow - request.startRow;\n\n        return ' LIMIT ' + blockSize + ' OFFSET ' + request.startRow;\n    }\n\n    function isDoingGrouping(rowGroupCols, groupKeys) {\n        // we are not doing grouping if at the lowest level\n        return rowGroupCols.length > groupKeys.length;\n    }\n\n    function getLastRowIndex(request, results) {\n        if (!results || results.length === 0) {\n            return null;\n        }\n        if (request.endRow == undefined || request.startRow == undefined) {\n            return results.length;\n        }\n        const currentLastRow = request.startRow + results.length;\n\n        return currentLastRow <= request.endRow ? currentLastRow : -1;\n    }\n}\n\n// IE Workaround - as templates literals are not supported\nfunction interpolate(str, o) {\n    return str.replace(/{([^{}]*)}/g, function (a, b) {\n        const r = o[b];\n        return typeof r === 'string' || typeof r === 'number' ? r : a;\n    });\n}\n","main.ts":"import '@angular/compiler';\nimport { provideHttpClient } from '@angular/common/http';\nimport { enableProdMode } from '@angular/core';\nimport { bootstrapApplication } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\nif ((window as any).ENABLE_PROD_MODE) {\n    enableProdMode();\n}\n\nbootstrapApplication(AppComponent, {\n    providers: [provideHttpClient()],\n});\n","app.component.ts":"import { Component } from \"@angular/core\";\nimport { AgGridAngular } from \"ag-grid-angular\";\nimport \"./styles.css\";\nimport {\n  ColDef,\n  ColGroupDef,\n  GetRowIdFunc,\n  GetRowIdParams,\n  GridApi,\n  GridOptions,\n  GridReadyEvent,\n  HighlightChangesModule,\n  IServerSideGetRowsParams,\n  IsServerSideGroupOpenByDefaultParams,\n  ModuleRegistry,\n  RowModelType,\n  ServerSideTransaction,\n  ServerSideTransactionResult,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\nimport {\n  RowGroupingModule,\n  ServerSideRowModelApiModule,\n  ServerSideRowModelModule,\n} from \"ag-grid-enterprise\";\nimport {\n  changePortfolioOnServer,\n  createRowOnServer,\n  data,\n  deletePortfolioOnServer,\n} from \"./data\";\nimport { FakeServer } from \"./fakeServer\";\nModuleRegistry.registerModules([\n  HighlightChangesModule,\n  RowGroupingModule,\n  ServerSideRowModelModule,\n  ServerSideRowModelApiModule,\n  ValidationModule /* Development Only */,\n]);\n\n@Component({\n  selector: \"my-app\",\n  standalone: true,\n  imports: [AgGridAngular],\n  template: `<div class=\"example-wrapper\">\n    <div style=\"margin-bottom: 5px\">\n      <button (click)=\"createOneAggressive()\">Add new 'Aggressive'</button>\n      <button (click)=\"updateAggressiveToHybrid()\">\n        Move all 'Aggressive' to 'Hybrid'\n      </button>\n      <button (click)=\"deleteAllHybrid()\">Remove all 'Hybrid'</button>\n    </div>\n    <ag-grid-angular\n      style=\"width: 100%; height: 100%;\"\n      [columnDefs]=\"columnDefs\"\n      [defaultColDef]=\"defaultColDef\"\n      [autoGroupColumnDef]=\"autoGroupColumnDef\"\n      [isServerSideGroupOpenByDefault]=\"isServerSideGroupOpenByDefault\"\n      [getRowId]=\"getRowId\"\n      [rowModelType]=\"rowModelType\"\n      [rowData]=\"rowData\"\n      (gridReady)=\"onGridReady($event)\"\n    />\n  </div> `,\n})\nexport class AppComponent {\n  private gridApi!: GridApi;\n\n  columnDefs: ColDef[] = [\n    { field: \"tradeId\" },\n    { field: \"portfolio\", hide: true, rowGroup: true },\n    { field: \"book\" },\n    { field: \"previous\" },\n    { field: \"current\" },\n  ];\n  defaultColDef: ColDef = {\n    flex: 1,\n    minWidth: 100,\n    enableCellChangeFlash: true,\n  };\n  autoGroupColumnDef: ColDef = {\n    minWidth: 220,\n  };\n  isServerSideGroupOpenByDefault: (\n    params: IsServerSideGroupOpenByDefaultParams,\n  ) => boolean = (params: IsServerSideGroupOpenByDefaultParams) => {\n    return (\n      params.rowNode.key === \"Aggressive\" || params.rowNode.key === \"Hybrid\"\n    );\n  };\n  getRowId: GetRowIdFunc = (params: GetRowIdParams) => {\n    if (params.level === 0) {\n      return params.data.portfolio;\n    }\n    return String(params.data.tradeId);\n  };\n  rowModelType: RowModelType = \"serverSide\";\n  rowData!: any[];\n\n  deleteAllHybrid() {\n    // NOTE: real applications would be better served listening to a stream of changes from the server instead\n    const serverResponse: any = deletePortfolioOnServer(\"Hybrid\");\n    if (!serverResponse.success) {\n      console.warn(\"Nothing has changed on the server\");\n      return;\n    }\n    if (serverResponse) {\n      // apply tranaction to keep grid in sync\n      const transaction = {\n        remove: [{ portfolio: \"Hybrid\" }],\n      };\n      const result = this.gridApi.applyServerSideTransaction(transaction);\n      logResults(transaction, result);\n    }\n  }\n\n  createOneAggressive() {\n    // NOTE: real applications would be better served listening to a stream of changes from the server instead\n    const serverResponse: any = createRowOnServer(\n      \"Aggressive\",\n      \"Aluminium\",\n      \"GL-1\",\n    );\n    if (!serverResponse.success) {\n      console.warn(\"Nothing has changed on the server\");\n      return;\n    }\n    if (serverResponse.newGroupCreated) {\n      // if a new group had to be created, reflect in the grid\n      const transaction = {\n        route: [],\n        add: [{ portfolio: \"Aggressive\" }],\n      };\n      const result = this.gridApi.applyServerSideTransaction(transaction);\n      logResults(transaction, result);\n    } else {\n      // if the group already existed, add rows to it\n      const transaction = {\n        route: [\"Aggressive\"],\n        add: [serverResponse.newRecord],\n      };\n      const result = this.gridApi.applyServerSideTransaction(transaction);\n      logResults(transaction, result);\n    }\n  }\n\n  updateAggressiveToHybrid() {\n    // NOTE: real applications would be better served listening to a stream of changes from the server instead\n    const serverResponse: any = changePortfolioOnServer(\"Aggressive\", \"Hybrid\");\n    if (!serverResponse.success) {\n      console.warn(\"Nothing has changed on the server\");\n      return;\n    }\n    const transaction = {\n      remove: [{ portfolio: \"Aggressive\" }],\n    };\n    // aggressive group no longer exists, so delete the group\n    const result = this.gridApi.applyServerSideTransaction(transaction);\n    logResults(transaction, result);\n    if (serverResponse.newGroupCreated) {\n      // hybrid group didn't exist, so just create the new group\n      const t = {\n        route: [],\n        add: [{ portfolio: \"Hybrid\" }],\n      };\n      const r = this.gridApi.applyServerSideTransaction(t);\n      logResults(t, r);\n    } else {\n      // hybrid group already existed, add rows to it\n      const t = {\n        route: [\"Hybrid\"],\n        add: serverResponse.updatedRecords,\n      };\n      const r = this.gridApi.applyServerSideTransaction(t);\n      logResults(t, r);\n    }\n  }\n\n  onGridReady(params: GridReadyEvent) {\n    this.gridApi = params.api;\n\n    // setup the fake server\n    const server = new FakeServer(data);\n    // create datasource with a reference to the fake server\n    const datasource = getServerSideDatasource(server);\n    // register the datasource with the grid\n    params.api.setGridOption(\"serverSideDatasource\", datasource);\n  }\n}\n\nfunction getServerSideDatasource(server: any) {\n  return {\n    getRows: (params: IServerSideGetRowsParams) => {\n      const response = server.getData(params.request);\n      // adding delay to simulate real server call\n      setTimeout(() => {\n        if (response.success) {\n          // call the success callback\n          params.success({\n            rowData: response.rows,\n            rowCount: response.lastRow,\n          });\n        } else {\n          // inform the grid request failed\n          params.fail();\n        }\n      }, 300);\n    },\n  };\n}\nfunction logResults(\n  transaction: ServerSideTransaction,\n  result?: ServerSideTransactionResult,\n) {\n  console.log(\n    \"[Example] - Applied transaction:\",\n    transaction,\n    \"Result:\",\n    result,\n  );\n}\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","main.ts":"import '@angular/compiler';\nimport { provideHttpClient } from '@angular/common/http';\nimport { enableProdMode } from '@angular/core';\nimport { bootstrapApplication } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\nif ((window as any).ENABLE_PROD_MODE) {\n    enableProdMode();\n}\n\nbootstrapApplication(AppComponent, {\n    providers: [provideHttpClient()],\n});\n","systemjs.config.js":"(function (global) {\n    var ANGULAR_VERSION = '^19';\n    window.ENABLE_PROD_MODE = true;\n\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true,\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        // map tells the System loader where to look for things\n        map: {\n            '@angular/compiler': 'npm:@angular/compiler@' + ANGULAR_VERSION + '/fesm2022/compiler.mjs',\n            '@angular/platform-browser-dynamic':\n                'npm:@angular/platform-browser-dynamic@' + ANGULAR_VERSION + '/fesm2022/platform-browser-dynamic.mjs',\n\n            '@angular/core': 'npm:@angular/core@' + ANGULAR_VERSION + '/fesm2022/core.mjs',\n            '@angular/core/primitives/signals':\n                'npm:@angular/core@' + ANGULAR_VERSION + '/fesm2022/primitives/signals.mjs',\n            '@angular/core/primitives/event-dispatch':\n                'npm:@angular/core@' + ANGULAR_VERSION + '/fesm2022/primitives/event-dispatch.mjs',\n            '@angular/common': 'npm:@angular/common@' + ANGULAR_VERSION + '/fesm2022/common.mjs',\n            '@angular/common/http': 'npm:@angular/common@' + ANGULAR_VERSION + '/fesm2022/http.mjs',\n\n            '@angular/platform-browser':\n                'npm:@angular/platform-browser@' + ANGULAR_VERSION + '/fesm2022/platform-browser.mjs',\n            '@angular/platform-browser/animations':\n                'npm:@angular/platform-browser@' + ANGULAR_VERSION + '/fesm2022/animations.mjs',\n\n            '@angular/forms': 'npm:@angular/forms@' + ANGULAR_VERSION + '/fesm2022/forms.mjs',\n            '@angular/animations': 'npm:@angular/animations@' + ANGULAR_VERSION + '/fesm2022/animations.mjs',\n            '@angular/animations/browser': 'npm:@angular/animations@' + ANGULAR_VERSION + '/fesm2022/browser.mjs',\n\n            rxjs: 'npm:rxjs@7.8.1/dist/bundles/rxjs.umd.min.js',\n            'rxjs/operators': 'npm:rxjs@7.8.1/dist/bundles/rxjs.umd.min.js',\n\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@4.4/lib/typescript.min.js',\n\n            // our app is within the app folder, appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap,\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {}, // Stop css.js from defaulting to apps .ts extension\n            app: {\n                main: './main.ts',\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-angular': {\n                main: './fesm2022/ag-grid-angular.mjs',\n                defaultExtension: 'mjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"@angular/core":"^19","@angular/common":"^19","@angular/forms":"^19","@angular/platform-browser":"^19","ag-grid-angular":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}},"extras":["alasql"]}