{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"index.jsx","mainFileName":"index.jsx","styleFiles":[],"files":{"styles.css":".grid-container {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    row-gap: 5px;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n}\n","fakeServer.jsx":"function FakeServer() {\n    alasql.options.cache = false;\n\n    let intervals = [];\n    return {\n        randomUpdates: () => {\n            intervals.push(setInterval(() => randomTransaction({ numUpdate: 5, numAdd: 2, numRemove: 2 }), 1000));\n        },\n        stopUpdates: () => {\n            intervals.forEach(clearInterval);\n            intervals = [];\n        },\n        getData: function (request) {\n            const results = executeQuery(request);\n\n            return {\n                success: true,\n                rows: results,\n            };\n        },\n        getAggValues: function (groupRow) {\n            const whereClause = Object.entries(groupRow)\n                .map(([field, val]) => `${field} = \"${val}\"`)\n                .join(' AND ');\n            const SQL = `\n        SELECT SUM(current) as current, SUM(previous) as previous, COUNT(tradeId) as childCount FROM ? WHERE ${whereClause}\n      `;\n            return alasql(SQL, [data])[0];\n        },\n    };\n\n    function executeQuery(request) {\n        const groupByResult = executeRowGroupQuery(request);\n        const rowGroupCols = request.rowGroupCols;\n        const groupKeys = request.groupKeys;\n\n        if (!isDoingGrouping(rowGroupCols, groupKeys)) {\n            return groupByResult;\n        }\n\n        const groupsToUse = request.rowGroupCols.slice(groupKeys.length, groupKeys.length + 1);\n        const groupColId = groupsToUse[0].id;\n        const childCountResult = executeGroupChildCountsQuery(request, groupColId);\n\n        // add 'childCount' to group results\n        return groupByResult.map(function (group) {\n            group['childCount'] = childCountResult[group[groupColId]];\n            return group;\n        });\n    }\n\n    function executeRowGroupQuery(request) {\n        const groupByQuery = buildGroupBySql(request);\n\n        return alasql(groupByQuery, [data]);\n    }\n\n    function executeGroupChildCountsQuery(request, groupId) {\n        const SQL = interpolate('SELECT {0} FROM ? pivot (count({0}) for {0})' + whereSql(request), [groupId]);\n\n        return alasql(SQL, [data])[0];\n    }\n\n    function buildGroupBySql(request) {\n        return (\n            selectSql(request) +\n            ' FROM ?' +\n            whereSql(request) +\n            groupBySql(request) +\n            orderBySql(request) +\n            limitSql(request)\n        );\n    }\n\n    function selectSql(request) {\n        const rowGroupCols = request.rowGroupCols;\n        const valueCols = request.valueCols;\n        const groupKeys = request.groupKeys;\n\n        if (isDoingGrouping(rowGroupCols, groupKeys)) {\n            const rowGroupCol = rowGroupCols[groupKeys.length];\n            const colsToSelect = [rowGroupCol.id];\n\n            valueCols.forEach(function (valueCol) {\n                colsToSelect.push(valueCol.aggFunc + '(' + valueCol.id + ') AS ' + valueCol.id);\n            });\n\n            return 'SELECT ' + colsToSelect.join(', ');\n        }\n\n        return 'SELECT *';\n    }\n\n    function whereSql(request) {\n        const rowGroups = request.rowGroupCols;\n        const groupKeys = request.groupKeys;\n        const whereParts = [];\n\n        if (groupKeys) {\n            groupKeys.forEach(function (key, i) {\n                const value = typeof key === 'string' ? \"'\" + key + \"'\" : key;\n\n                whereParts.push(rowGroups[i].id + ' = ' + value);\n            });\n        }\n\n        if (whereParts.length > 0) {\n            return ' WHERE ' + whereParts.join(' AND ');\n        }\n\n        return '';\n    }\n\n    function groupBySql(request) {\n        const rowGroupCols = request.rowGroupCols;\n        const groupKeys = request.groupKeys;\n\n        if (isDoingGrouping(rowGroupCols, groupKeys)) {\n            const rowGroupCol = rowGroupCols[groupKeys.length];\n\n            return ' GROUP BY ' + rowGroupCol.id + ' HAVING count(*) > 0';\n        }\n\n        return '';\n    }\n\n    function orderBySql(request) {\n        const sortModel = request.sortModel;\n\n        if (sortModel.length === 0) return '';\n\n        const sorts = sortModel.map(function (s) {\n            return s.colId + ' ' + s.sort.toUpperCase();\n        });\n\n        return ' ORDER BY ' + sorts.join(', ');\n    }\n\n    function limitSql(request) {\n        if (request.endRow == undefined || request.startRow == undefined) {\n            return '';\n        }\n        const blockSize = request.endRow - request.startRow;\n\n        return ' LIMIT ' + blockSize + ' OFFSET ' + request.startRow;\n    }\n\n    function isDoingGrouping(rowGroupCols, groupKeys) {\n        // we are not doing grouping if at the lowest level\n        return rowGroupCols.length > groupKeys.length;\n    }\n\n    function getLastRowIndex(request, results) {\n        if (!results || results.length === 0) {\n            return null;\n        }\n        if (request.endRow == undefined || request.startRow == undefined) {\n            return results.length;\n        }\n        const currentLastRow = request.startRow + results.length;\n\n        return currentLastRow <= request.endRow ? currentLastRow : -1;\n    }\n}\n\nlet fakeServerInstance;\nexport function getFakeServer() {\n    if (!fakeServerInstance) {\n        fakeServerInstance = new FakeServer();\n    }\n    return fakeServerInstance;\n}\n\n// IE Workaround - as templates literals are not supported\nfunction interpolate(str, o) {\n    return str.replace(/{([^{}]*)}/g, function (a, b) {\n        const r = o[b];\n        return typeof r === 'string' || typeof r === 'number' ? r : a;\n    });\n}\n\nconst BOOK_COUNT = 3;\nconst MIN_TRADE_COUNT = 1;\nconst MAX_TRADE_COUNT = 10;\n\nconst products = [\n    'Palm Oil',\n    'Rubber',\n    'Wool',\n    'Amber',\n    'Copper',\n    'Lead',\n    'Zinc',\n    'Tin',\n    'Aluminium',\n    'Aluminium Alloy',\n    'Nickel',\n    'Cobalt',\n    'Molybdenum',\n    'Recycled Steel',\n    'Corn',\n    'Oats',\n];\n\nconst portfolios = ['Aggressive', 'Defensive', 'Income', 'Speculative', 'Hybrid'];\n\nlet nextTradeId = 0;\nconst FIRST_BOOK_ID = 62472;\n\nconst PRODUCT_BOOK_START = {};\nproducts.forEach((product, idx) => {\n    PRODUCT_BOOK_START[product] = FIRST_BOOK_ID + portfolios.length * BOOK_COUNT * idx;\n});\nconst PORTFOLIO_BOOK_OFFSET = {};\nportfolios.forEach((portfolio, idx) => {\n    PORTFOLIO_BOOK_OFFSET[portfolio] = idx * BOOK_COUNT;\n});\n\nlet nextBookId = 62472;\n\nexport const data = [];\n\n// IIFE to create initial data\n(function () {\n    const lastUpdated = new Date();\n\n    for (let i = 0; i < products.length; i++) {\n        const product = products[i];\n        for (let j = 0; j < portfolios.length; j++) {\n            const portfolio = portfolios[j];\n\n            for (let k = 0; k < BOOK_COUNT; k++) {\n                const book = createBookName();\n                const tradeCount = randomBetween(MAX_TRADE_COUNT, MIN_TRADE_COUNT);\n                for (let l = 0; l < tradeCount; l++) {\n                    const trade = createTradeRecord(product, portfolio, book);\n\n                    trade.updateCount = 0;\n                    trade.lastUpdated = lastUpdated;\n\n                    data.push(trade);\n                }\n            }\n        }\n    }\n})();\n\nexport const dataObservers = [];\nexport const registerObserver = ({ transactionFunc, groupedFields }) => {\n    const existingObserver = dataObservers.find(({ transactionFunc: oldFunc }) => oldFunc === transactionFunc);\n    if (existingObserver) {\n        existingObserver.groupedFields = groupedFields;\n        return;\n    }\n    dataObservers.push({\n        transactionFunc,\n        groupedFields,\n    });\n};\n\nconst uniqueQueries = new Map();\nexport function randomTransaction({ numAdd, numUpdate, numRemove }) {\n    uniqueQueries.clear();\n    // updates\n    const update = [];\n    for (let i = 0; i < numUpdate && data.length; i++) {\n        const idx = randomBetween(0, data.length - 1);\n        const d = data[idx];\n        d.previous = d.current;\n        d.current = d.previous + 13;\n        d.lastUpdated = new Date();\n        d.updateCount = ++d.updateCount;\n        update.push(d);\n    }\n\n    // adds\n    const add = [];\n    const lastUpdate = new Date();\n    for (let i = 0; i < numAdd; i++) {\n        const product = products[randomBetween(0, products.length - 1)];\n        const portfolio = portfolios[randomBetween(0, portfolios.length - 1)];\n        const bookStart = PRODUCT_BOOK_START[product] + PORTFOLIO_BOOK_OFFSET[portfolio];\n        const book = 'GL-' + randomBetween(bookStart, bookStart + BOOK_COUNT - 1);\n        const newRecord = createTradeRecord(product, portfolio, book);\n        newRecord.lastUpdated = lastUpdate;\n        newRecord.updateCount = 0;\n        add.push(newRecord);\n    }\n    // insert new rows at the end\n    data.push(...add);\n\n    // removes\n    const remove = [];\n    for (let i = 0; i < numRemove && data.length; i++) {\n        const idx = randomBetween(0, data.length - 1);\n        const d = data[idx];\n        data.splice(idx, 1);\n        remove.push(d);\n    }\n\n    dataObservers.forEach(({ transactionFunc, groupedFields }) => {\n        const routedTransactions = {};\n\n        translateRowsToRoutes({\n            rows: update,\n            op: 'update',\n            fields: groupedFields,\n            mutableTransactionObj: routedTransactions,\n        });\n        translateRowsToRoutes({\n            rows: remove,\n            op: 'remove',\n            fields: groupedFields,\n            mutableTransactionObj: routedTransactions,\n        });\n        translateRowsToRoutes({\n            rows: add,\n            op: 'add',\n            fields: groupedFields,\n            mutableTransactionObj: routedTransactions,\n        });\n\n        // may want to filter duplicates here\n        Object.values(routedTransactions).forEach(transactionFunc);\n    });\n}\n\nconst translateRowsToRoutes = ({ rows, op, fields, mutableTransactionObj }) => {\n    rows.forEach((item) => {\n        for (let i = 0; i < fields.length; i++) {\n            const route = fields.slice(0, i).map((field) => item[field]);\n            const routeId = route.join('-');\n            const groupRowFields = fields.slice(0, i + 1);\n            const groupRow = Object.fromEntries(groupRowFields.map((field) => [field, item[field]]));\n\n            // does a row belonging to this group already exist\n            const doesGroupExist = data.some(\n                (row) => row !== item && groupRowFields.every((field) => groupRow[field] === row[field])\n            );\n\n            const stringifiedRow = JSON.stringify(groupRow);\n            let aggValues;\n            if (uniqueQueries.has(stringifiedRow)) {\n                aggValues = uniqueQueries.get(stringifiedRow);\n            } else {\n                aggValues = getFakeServer().getAggValues(groupRow);\n                uniqueQueries.set(stringifiedRow, aggValues);\n            }\n            const newGroupItem = { ...groupRow, ...aggValues };\n\n            // if not, create a new group row instead\n            if (!doesGroupExist) {\n                const existingTransaction = mutableTransactionObj[routeId] || {};\n\n                mutableTransactionObj[routeId] = {\n                    ...existingTransaction,\n                    route,\n                    [op]: [...(existingTransaction[op] ?? []), newGroupItem],\n                };\n                return;\n            }\n\n            // if group does exist, update aggregations\n            const existingTransaction = mutableTransactionObj[routeId] || {};\n            mutableTransactionObj[routeId] = {\n                ...existingTransaction,\n                route: route,\n                update: [...(existingTransaction.update ?? []), newGroupItem],\n            };\n        }\n\n        // no groups need created, create the leaf row\n        const route = fields.map((field) => item[field]);\n        const routeId = route.join('-');\n        const existingTransaction = mutableTransactionObj[routeId] || {};\n\n        mutableTransactionObj[routeId] = {\n            route,\n            [op]: [...(existingTransaction[op] ?? []), item],\n        };\n    });\n};\n\nfunction randomBetween(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction createTradeRecord(product, portfolio, book) {\n    const current = Math.floor(Math.random() * 100000) + 100;\n    const previous = current + Math.floor(Math.random() * 10000) - 2000;\n    const trade = {\n        product: product,\n        portfolio: portfolio,\n        book: book,\n        tradeId: createTradeId(),\n        submitterID: randomBetween(10, 1000),\n        submitterDealID: randomBetween(10, 1000),\n        dealType: Math.random() < 0.2 ? 'Physical' : 'Financial',\n        bidFlag: Math.random() < 0.5 ? 'Buy' : 'Sell',\n        current: current,\n        previous: previous,\n        pl1: randomBetween(100, 1000),\n        pl2: randomBetween(100, 1000),\n        gainDx: randomBetween(100, 1000),\n        sxPx: randomBetween(100, 1000),\n        _99Out: randomBetween(100, 1000),\n    };\n    return trade;\n}\n\nfunction createBookName() {\n    return 'GL-' + nextBookId++;\n}\n\nfunction createTradeId() {\n    return nextTradeId++;\n}\n","index.jsx":"\"use client\";\n\nimport React, {\n  useCallback,\n  useMemo,\n  useRef,\n  useState,\n  StrictMode,\n} from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"./styles.css\";\nimport { getFakeServer, registerObserver } from \"./fakeServer.jsx\";\nimport {\n  ColumnApiModule,\n  HighlightChangesModule,\n  ModuleRegistry,\n  TextFilterModule,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\nimport {\n  RowGroupingModule,\n  RowGroupingPanelModule,\n  ServerSideRowModelApiModule,\n  ServerSideRowModelModule,\n} from \"ag-grid-enterprise\";\nModuleRegistry.registerModules([\n  TextFilterModule,\n  HighlightChangesModule,\n  ColumnApiModule,\n  RowGroupingModule,\n  ServerSideRowModelModule,\n  ServerSideRowModelApiModule,\n  RowGroupingPanelModule,\n  ValidationModule /* Development Only */,\n]);\n\nconst disable = (id, disabled) => {\n  document.querySelector(id).disabled = disabled;\n};\n\nconst getServerSideDatasource = (server) => {\n  return {\n    getRows: (params) => {\n      console.log(\"[Datasource] - rows requested by grid: \", params.request);\n      const response = server.getData(params.request);\n      // adding delay to simulate real server call\n      setTimeout(() => {\n        if (response.success) {\n          // call the success callback\n          params.success({\n            rowData: response.rows,\n            rowCount: response.lastRow,\n          });\n        } else {\n          // inform the grid request failed\n          params.fail();\n        }\n      }, 300);\n    },\n  };\n};\n\nconst GridExample = () => {\n  const gridRef = useRef();\n  const containerStyle = useMemo(() => ({ width: \"100%\", height: \"100%\" }), []);\n  const gridStyle = useMemo(() => ({ height: \"100%\", width: \"100%\" }), []);\n\n  const [columnDefs, setColumnDefs] = useState([\n    { field: \"tradeId\" },\n    {\n      field: \"product\",\n      rowGroup: true,\n      enableRowGroup: true,\n      hide: true,\n    },\n    {\n      field: \"portfolio\",\n      rowGroup: true,\n      enableRowGroup: true,\n      hide: true,\n    },\n    {\n      field: \"book\",\n      rowGroup: true,\n      enableRowGroup: true,\n      hide: true,\n    },\n    { field: \"previous\", aggFunc: \"sum\" },\n    { field: \"current\", aggFunc: \"sum\" },\n  ]);\n  const defaultColDef = useMemo(() => {\n    return {\n      flex: 1,\n      minWidth: 100,\n      enableCellChangeFlash: true,\n    };\n  }, []);\n  const autoGroupColumnDef = useMemo(() => {\n    return {\n      minWidth: 220,\n    };\n  }, []);\n\n  const onGridReady = useCallback((params) => {\n    disable(\"#stopUpdates\", true);\n    // create datasource with a reference to the fake server\n    const datasource = getServerSideDatasource(getFakeServer());\n    // register the datasource with the grid\n    params.api.setGridOption(\"serverSideDatasource\", datasource);\n    // register interest in data changes\n    registerObserver({\n      transactionFunc: (t) => params.api.applyServerSideTransactionAsync(t),\n      groupedFields: [\"product\", \"portfolio\", \"book\"],\n    });\n  }, []);\n\n  const onColumnRowGroupChanged = useCallback(\n    (event) => {\n      const colState = event.api.getColumnState();\n      const groupedColumns = colState.filter((state) => state.rowGroup);\n      groupedColumns.sort((a, b) => a.rowGroupIndex - b.rowGroupIndex);\n      const groupedFields = groupedColumns.map((col) => col.colId);\n      registerObserver({\n        transactionFunc: (t) =>\n          gridRef.current.api.applyServerSideTransactionAsync(t),\n        groupedFields: groupedFields.length === 0 ? undefined : groupedFields,\n      });\n    },\n    [registerObserver],\n  );\n\n  const startUpdates = useCallback(() => {\n    getFakeServer().randomUpdates();\n    disable(\"#startUpdates\", true);\n    disable(\"#stopUpdates\", false);\n  }, [getFakeServer]);\n\n  const stopUpdates = useCallback(() => {\n    getFakeServer().stopUpdates();\n    disable(\"#stopUpdates\", true);\n    disable(\"#startUpdates\", false);\n  }, [getFakeServer]);\n\n  const getChildCount = useCallback((data) => {\n    return data ? data.childCount : undefined;\n  }, []);\n\n  const getRowId = useCallback((params) => {\n    let rowId = \"\";\n    if (params.parentKeys && params.parentKeys.length) {\n      rowId += params.parentKeys.join(\"-\") + \"-\";\n    }\n    const groupCols = params.api.getRowGroupColumns();\n    if (groupCols.length > params.level) {\n      const thisGroupCol = groupCols[params.level];\n      rowId += params.data[thisGroupCol.getColDef().field] + \"-\";\n    }\n    if (params.data.tradeId != null) {\n      rowId += params.data.tradeId;\n    }\n    return rowId;\n  }, []);\n\n  const isServerSideGroupOpenByDefault = useCallback((params) => {\n    const route = params.rowNode.getRoute();\n    if (!route) {\n      return false;\n    }\n    const routeAsString = route.join(\",\");\n    return (\n      [\"Wool\", \"Wool,Aggressive\", \"Wool,Aggressive,GL-62502\"].indexOf(\n        routeAsString,\n      ) >= 0\n    );\n  }, []);\n\n  return (\n    <div style={containerStyle}>\n      <div className=\"grid-container\">\n        <div>\n          <button id=\"startUpdates\" onClick={startUpdates}>\n            Start Updates\n          </button>\n          <button id=\"stopUpdates\" onClick={stopUpdates}>\n            Stop Updates\n          </button>\n        </div>\n\n        <div style={gridStyle}>\n          <AgGridReact\n            ref={gridRef}\n            columnDefs={columnDefs}\n            defaultColDef={defaultColDef}\n            autoGroupColumnDef={autoGroupColumnDef}\n            rowGroupPanelShow={\"always\"}\n            purgeClosedRowNodes={true}\n            rowModelType={\"serverSide\"}\n            getChildCount={getChildCount}\n            getRowId={getRowId}\n            isServerSideGroupOpenByDefault={isServerSideGroupOpenByDefault}\n            onGridReady={onGridReady}\n            onColumnRowGroupChanged={onColumnRowGroupChanged}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst root = createRoot(document.getElementById(\"root\"));\nroot.render(\n  <StrictMode>\n    <GridExample />\n  </StrictMode>,\n);\nwindow.tearDownExample = () => root.unmount();\n","index.html":"<div class=\"grid-container\">\n    <div>\n        <button id=\"startUpdates\" onclick=\"startUpdates()\">Start Updates</button>\n        <button id=\"stopUpdates\" onclick=\"stopUpdates()\">Stop Updates</button>\n    </div>\n    <div id=\"myGrid\"></div>\n</div>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            jsx: 'react',\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            // react\n            react: 'npm:react@18.2.0',\n            'react-dom': 'npm:react-dom@18.2.0',\n            'react-dom/client': 'npm:react-dom@18.2.0',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            css: {},\n            react: {\n                main: './umd/react.production.min.js',\n            },\n            'react-dom': {\n                main: './umd/react-dom.production.min.js',\n            },\n            'react-dom/server': {\n                main: '../umd/react-dom-server.browser.production.min.js',\n            },\n            app: {\n                main: './index.jsx',\n                defaultExtension: 'jsx',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"react":"18","react-dom":"18","@types/react":"18","@types/react-dom":"18","ag-grid-react":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}},"extras":["alasql"]}