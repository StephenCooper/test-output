{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"app.component.ts","styleFiles":[],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n","data.ts":"const MIN_BOOK_COUNT = 1;\nconst MAX_BOOK_COUNT = 5;\nconst MIN_TRADE_COUNT = 1;\nconst MAX_TRADE_COUNT = 5;\n\nconst products = [\n    'Palm Oil',\n    'Rubber',\n    'Wool',\n    'Amber',\n    'Copper',\n    'Lead',\n    'Zinc',\n    'Tin',\n    'Aluminium',\n    'Aluminium Alloy',\n    'Nickel',\n    'Cobalt',\n    'Molybdenum',\n    'Recycled Steel',\n    'Corn',\n    'Oats',\n    'Rough Rice',\n    'Soybeans',\n    'Rapeseed',\n    'Soybean Meal',\n    'Soybean Oil',\n    'Wheat',\n    'Milk',\n    'Coca',\n    'Coffee C',\n    'Cotton No.2',\n    'Sugar No.11',\n    'Sugar No.14',\n];\n\nconst portfolios = ['Aggressive', 'Defensive', 'Income', 'Speculative', 'Hybrid'];\n\nlet nextTradeId = 0;\nlet nextBookId = 62472;\n\nexport var data = [];\n\n// IIFE to create initial data\n(function () {\n    const lastUpdated = new Date();\n\n    for (let i = 0; i < products.length; i++) {\n        const product = products[i];\n        for (let j = 0; j < portfolios.length; j++) {\n            const portfolio = portfolios[j];\n\n            const bookCount = randomBetween(MAX_BOOK_COUNT, MIN_BOOK_COUNT);\n\n            for (let k = 0; k < bookCount; k++) {\n                const book = createBookName();\n                const tradeCount = randomBetween(MAX_TRADE_COUNT, MIN_TRADE_COUNT);\n                for (let l = 0; l < tradeCount; l++) {\n                    const trade = createTradeRecord(product, portfolio, book);\n\n                    trade.updateCount = 0;\n                    trade.lastUpdated = lastUpdated;\n\n                    data.push(trade);\n                }\n            }\n        }\n    }\n})();\n\nexport var dataObservers = [];\n\nexport function randomUpdates({ numRemove, numAdd, numUpdate }) {\n    // removes\n    const remove = [];\n    for (let i = 0; i < Math.ceil(numRemove); i++) {\n        const idx = randomBetween(0, data.length - 1);\n        const d = data[idx];\n        data.splice(idx, 1);\n        remove.push(d);\n    }\n\n    // updates\n    const update = [];\n    for (let i = 0; i < numUpdate; i++) {\n        const idx = randomBetween(0, data.length - 1);\n        const d = data[idx];\n        d.previous = d.current;\n        d.current = d.previous + 13;\n        d.lastUpdated = new Date();\n        d.updateCount = ++d.updateCount;\n        update.push(d);\n    }\n\n    // adds\n    const add = [];\n    const lastUpdate = new Date();\n    for (let i = 0; i < Math.ceil(numAdd); i++) {\n        const product = products[randomBetween(0, products.length - 1)];\n        const portfolio = portfolios[randomBetween(0, portfolios.length - 1)];\n        const book = createBookName();\n        const newRecord = createTradeRecord(product, portfolio, book);\n        newRecord.lastUpdated = lastUpdate;\n        newRecord.updateCount = 0;\n        add.push(newRecord);\n    }\n    data.push(...add);\n\n    // notify observers\n    dataObservers.forEach((obs) => obs({ update, add, remove }));\n}\n\nfunction randomBetween(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction createTradeRecord(product, portfolio, book) {\n    const current = Math.floor(Math.random() * 100000) + 100;\n    const previous = current + Math.floor(Math.random() * 10000) - 2000;\n    const trade = {\n        product: product,\n        portfolio: portfolio,\n        book: book,\n        tradeId: createTradeId(),\n        submitterID: randomBetween(10, 1000),\n        submitterDealID: randomBetween(10, 1000),\n        dealType: Math.random() < 0.2 ? 'Physical' : 'Financial',\n        bidFlag: Math.random() < 0.5 ? 'Buy' : 'Sell',\n        current: current,\n        previous: previous,\n        pl1: randomBetween(100, 1000),\n        pl2: randomBetween(100, 1000),\n        gainDx: randomBetween(100, 1000),\n        sxPx: randomBetween(100, 1000),\n        _99Out: randomBetween(100, 1000),\n    };\n    return trade;\n}\n\nfunction createBookName() {\n    return 'GL-' + nextBookId++;\n}\n\nfunction createTradeId() {\n    return nextTradeId++;\n}\n","fakeServer.ts":"export function FakeServer(data) {\n    alasql.options.cache = false;\n\n    return {\n        getData: function (request) {\n            const results = executeQuery(request);\n            const resultSize = executeQuery({ ...request, endRow: undefined }, true).length;\n\n            return {\n                success: true,\n                rows: results,\n                lastRow: resultSize,\n            };\n        },\n    };\n\n    function executeQuery(request, suppressLogging) {\n        const groupByResult = executeRowGroupQuery(request, suppressLogging);\n\n        return groupByResult;\n    }\n\n    function executeRowGroupQuery(request, suppressLogging) {\n        const groupByQuery = buildGroupBySql(request);\n\n        if (!suppressLogging) {\n            console.log('[FakeServer] - about to execute row group query:', groupByQuery);\n        }\n\n        return alasql(groupByQuery, [data]);\n    }\n\n    function buildGroupBySql(request) {\n        return (\n            selectSql(request) +\n            ' FROM ?' +\n            whereSql(request) +\n            groupBySql(request) +\n            orderBySql(request) +\n            limitSql(request)\n        );\n    }\n\n    function selectSql(request) {\n        const rowGroupCols = request.rowGroupCols;\n        const valueCols = request.valueCols;\n        const groupKeys = request.groupKeys;\n\n        if (isDoingGrouping(rowGroupCols, groupKeys)) {\n            const rowGroupCol = rowGroupCols[groupKeys.length];\n            const colsToSelect = [rowGroupCol.id];\n\n            valueCols.forEach(function (valueCol) {\n                colsToSelect.push(valueCol.aggFunc + '(' + valueCol.id + ') AS ' + valueCol.id);\n            });\n\n            return 'SELECT ' + colsToSelect.join(', ');\n        }\n\n        return 'SELECT *';\n    }\n\n    function whereSql(request) {\n        const rowGroups = request.rowGroupCols;\n        const groupKeys = request.groupKeys;\n        const whereParts = [];\n\n        if (groupKeys) {\n            groupKeys.forEach(function (key, i) {\n                const value = typeof key === 'string' ? \"'\" + key + \"'\" : key;\n\n                whereParts.push(rowGroups[i].id + ' = ' + value);\n            });\n        }\n\n        if (whereParts.length > 0) {\n            return ' WHERE ' + whereParts.join(' AND ');\n        }\n\n        return '';\n    }\n\n    function groupBySql(request) {\n        const rowGroupCols = request.rowGroupCols;\n        const groupKeys = request.groupKeys;\n\n        if (isDoingGrouping(rowGroupCols, groupKeys)) {\n            const rowGroupCol = rowGroupCols[groupKeys.length];\n\n            return ' GROUP BY ' + rowGroupCol.id + ' HAVING count(*) > 0';\n        }\n\n        return '';\n    }\n\n    function orderBySql(request) {\n        const sortModel = request.sortModel;\n\n        if (sortModel.length === 0) return '';\n\n        const sorts = sortModel.map(function (s) {\n            return s.colId + ' ' + s.sort.toUpperCase();\n        });\n\n        return ' ORDER BY ' + sorts.join(', ');\n    }\n\n    function limitSql(request) {\n        if (request.endRow == undefined || request.startRow == undefined) {\n            return '';\n        }\n        const blockSize = request.endRow - request.startRow;\n\n        return ' LIMIT ' + blockSize + ' OFFSET ' + request.startRow;\n    }\n\n    function isDoingGrouping(rowGroupCols, groupKeys) {\n        // we are not doing grouping if at the lowest level\n        return rowGroupCols.length > groupKeys.length;\n    }\n\n    function getLastRowIndex(request, results) {\n        if (!results || results.length === 0) {\n            return null;\n        }\n        if (request.endRow == undefined || request.startRow == undefined) {\n            return results.length;\n        }\n        const currentLastRow = request.startRow + results.length;\n\n        return currentLastRow <= request.endRow ? currentLastRow : -1;\n    }\n}\n\n// IE Workaround - as templates literals are not supported\nfunction interpolate(str, o) {\n    return str.replace(/{([^{}]*)}/g, function (a, b) {\n        const r = o[b];\n        return typeof r === 'string' || typeof r === 'number' ? r : a;\n    });\n}\n","main.ts":"import '@angular/compiler';\nimport { provideHttpClient } from '@angular/common/http';\nimport { enableProdMode } from '@angular/core';\nimport { bootstrapApplication } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\nif ((window as any).ENABLE_PROD_MODE) {\n    enableProdMode();\n}\n\nbootstrapApplication(AppComponent, {\n    providers: [provideHttpClient()],\n});\n","app.component.ts":"import { Component } from \"@angular/core\";\nimport { AgGridAngular } from \"ag-grid-angular\";\nimport \"./styles.css\";\nimport {\n  ColDef,\n  ColGroupDef,\n  GetRowIdFunc,\n  GetRowIdParams,\n  GridApi,\n  GridOptions,\n  GridReadyEvent,\n  HighlightChangesModule,\n  IServerSideGetRowsParams,\n  ModuleRegistry,\n  RowModelType,\n  ServerSideTransaction,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\nimport {\n  ServerSideRowModelApiModule,\n  ServerSideRowModelModule,\n} from \"ag-grid-enterprise\";\nimport { data, dataObservers, randomUpdates } from \"./data\";\nimport { FakeServer } from \"./fakeServer\";\nModuleRegistry.registerModules([\n  HighlightChangesModule,\n  ServerSideRowModelModule,\n  ServerSideRowModelApiModule,\n  ValidationModule /* Development Only */,\n]);\n\n@Component({\n  selector: \"my-app\",\n  standalone: true,\n  imports: [AgGridAngular],\n  template: `<div class=\"example-wrapper\">\n    <div style=\"margin-bottom: 5px\">\n      <button id=\"startUpdates\" (click)=\"startUpdates()\">Start Updates</button>\n      <button id=\"stopUpdates\" (click)=\"stopUpdates()\">Stop Updates</button>\n    </div>\n    <ag-grid-angular\n      style=\"width: 100%; height: 100%;\"\n      [columnDefs]=\"columnDefs\"\n      [defaultColDef]=\"defaultColDef\"\n      [autoGroupColumnDef]=\"autoGroupColumnDef\"\n      [getRowId]=\"getRowId\"\n      [asyncTransactionWaitMillis]=\"asyncTransactionWaitMillis\"\n      [rowModelType]=\"rowModelType\"\n      [rowData]=\"rowData\"\n      (gridReady)=\"onGridReady($event)\"\n    />\n  </div> `,\n})\nexport class AppComponent {\n  columnDefs: ColDef[] = [\n    { field: \"tradeId\" },\n    { field: \"portfolio\" },\n    { field: \"book\" },\n    { field: \"previous\" },\n    { field: \"current\" },\n    {\n      field: \"lastUpdated\",\n      wrapHeaderText: true,\n      autoHeaderHeight: true,\n      valueFormatter: (params) => {\n        const ts = params.data!.lastUpdated;\n        if (ts) {\n          const hh_mm_ss = ts.toLocaleString().split(\" \")[1];\n          const SSS = ts.getMilliseconds();\n          return `${hh_mm_ss}:${SSS}`;\n        }\n        return \"\";\n      },\n    },\n    { field: \"updateCount\" },\n  ];\n  defaultColDef: ColDef = {\n    flex: 1,\n    minWidth: 100,\n    enableCellChangeFlash: true,\n  };\n  autoGroupColumnDef: ColDef = {\n    minWidth: 220,\n  };\n  getRowId: GetRowIdFunc = (params: GetRowIdParams) => {\n    let rowId = \"\";\n    if (params.parentKeys && params.parentKeys.length) {\n      rowId += params.parentKeys.join(\"-\") + \"-\";\n    }\n    if (params.data.tradeId != null) {\n      rowId += params.data.tradeId;\n    }\n    return rowId;\n  };\n  asyncTransactionWaitMillis = 1000;\n  rowModelType: RowModelType = \"serverSide\";\n  rowData!: any[];\n\n  startUpdates() {\n    interval = setInterval(\n      () => randomUpdates({ numUpdate: 10, numAdd: 1, numRemove: 1 }),\n      10,\n    );\n    disable(\"#stopUpdates\", false);\n    disable(\"#startUpdates\", true);\n  }\n\n  stopUpdates() {\n    if (interval !== undefined) {\n      clearInterval(interval);\n    }\n    disable(\"#stopUpdates\", true);\n    disable(\"#startUpdates\", false);\n  }\n\n  onGridReady(params: GridReadyEvent) {\n    disable(\"#stopUpdates\", true);\n    // setup the fake server\n    const server = FakeServer(data);\n    // create datasource with a reference to the fake server\n    const datasource = getServerSideDatasource(server);\n    // register the datasource with the grid\n    params.api.setGridOption(\"serverSideDatasource\", datasource);\n    // register interest in data changes\n    dataObservers.push((t: ServerSideTransaction) => {\n      params.api.applyServerSideTransactionAsync(t);\n    });\n  }\n}\n\nfunction getServerSideDatasource(server: any) {\n  return {\n    getRows: (params: IServerSideGetRowsParams) => {\n      const response = server.getData(params.request);\n      // adding delay to simulate real server call\n      setTimeout(() => {\n        if (response.success) {\n          // call the success callback\n          params.success({\n            rowData: response.rows,\n            rowCount: response.lastRow,\n          });\n        } else {\n          // inform the grid request failed\n          params.fail();\n        }\n      }, 300);\n    },\n  };\n}\nlet interval: any;\nfunction disable(id: string, disabled: boolean) {\n  document.querySelector<HTMLInputElement>(id)!.disabled = disabled;\n}\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","main.ts":"import '@angular/compiler';\nimport { provideHttpClient } from '@angular/common/http';\nimport { enableProdMode } from '@angular/core';\nimport { bootstrapApplication } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\nif ((window as any).ENABLE_PROD_MODE) {\n    enableProdMode();\n}\n\nbootstrapApplication(AppComponent, {\n    providers: [provideHttpClient()],\n});\n","systemjs.config.js":"(function (global) {\n    var ANGULAR_VERSION = '^19';\n    window.ENABLE_PROD_MODE = true;\n\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true,\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        // map tells the System loader where to look for things\n        map: {\n            '@angular/compiler': 'npm:@angular/compiler@' + ANGULAR_VERSION + '/fesm2022/compiler.mjs',\n            '@angular/platform-browser-dynamic':\n                'npm:@angular/platform-browser-dynamic@' + ANGULAR_VERSION + '/fesm2022/platform-browser-dynamic.mjs',\n\n            '@angular/core': 'npm:@angular/core@' + ANGULAR_VERSION + '/fesm2022/core.mjs',\n            '@angular/core/primitives/signals':\n                'npm:@angular/core@' + ANGULAR_VERSION + '/fesm2022/primitives/signals.mjs',\n            '@angular/core/primitives/event-dispatch':\n                'npm:@angular/core@' + ANGULAR_VERSION + '/fesm2022/primitives/event-dispatch.mjs',\n            '@angular/common': 'npm:@angular/common@' + ANGULAR_VERSION + '/fesm2022/common.mjs',\n            '@angular/common/http': 'npm:@angular/common@' + ANGULAR_VERSION + '/fesm2022/http.mjs',\n\n            '@angular/platform-browser':\n                'npm:@angular/platform-browser@' + ANGULAR_VERSION + '/fesm2022/platform-browser.mjs',\n            '@angular/platform-browser/animations':\n                'npm:@angular/platform-browser@' + ANGULAR_VERSION + '/fesm2022/animations.mjs',\n\n            '@angular/forms': 'npm:@angular/forms@' + ANGULAR_VERSION + '/fesm2022/forms.mjs',\n            '@angular/animations': 'npm:@angular/animations@' + ANGULAR_VERSION + '/fesm2022/animations.mjs',\n            '@angular/animations/browser': 'npm:@angular/animations@' + ANGULAR_VERSION + '/fesm2022/browser.mjs',\n\n            rxjs: 'npm:rxjs@7.8.1/dist/bundles/rxjs.umd.min.js',\n            'rxjs/operators': 'npm:rxjs@7.8.1/dist/bundles/rxjs.umd.min.js',\n\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@4.4/lib/typescript.min.js',\n\n            // our app is within the app folder, appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap,\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {}, // Stop css.js from defaulting to apps .ts extension\n            app: {\n                main: './main.ts',\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-angular': {\n                main: './fesm2022/ag-grid-angular.mjs',\n                defaultExtension: 'mjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"@angular/core":"^19","@angular/common":"^19","@angular/forms":"^19","@angular/platform-browser":"^19","ag-grid-angular":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}},"extras":["alasql"]}