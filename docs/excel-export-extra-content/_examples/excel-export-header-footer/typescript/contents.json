{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"main.ts","styleFiles":["styles.css"],"files":{"styles.css":".row {\n    display: flex;\n    gap: 10px;\n    align-items: center;\n    margin-top: 5px;\n}\n\n#myGrid {\n    width: 100%;\n    height: 100%;\n}\n.container {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n.columns {\n    display: flex;\n    flex-direction: row;\n    gap: 16px;\n}\n.grid-wrapper {\n    display: flex;\n    flex: 1 1 0px;\n}\n","main.ts":"import {\n  ClientSideRowModelModule,\n  ColDef,\n  ColGroupDef,\n  ExcelExportParams,\n  ExcelHeaderFooterConfig,\n  ExcelHeaderFooterContent,\n  GridApi,\n  GridOptions,\n  ModuleRegistry,\n  NumberFilterModule,\n  TextFilterModule,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\nimport {\n  ColumnMenuModule,\n  ContextMenuModule,\n  ExcelExportModule,\n} from \"ag-grid-enterprise\";\nimport { IOlympicData } from \"./interfaces\";\n\nModuleRegistry.registerModules([\n  TextFilterModule,\n  NumberFilterModule,\n  ClientSideRowModelModule,\n  ExcelExportModule,\n  ColumnMenuModule,\n  ContextMenuModule,\n  ValidationModule /* Development Only */,\n]);\n\nlet gridApi: GridApi<IOlympicData>;\n\nconst gridOptions: GridOptions<IOlympicData> = {\n  columnDefs: [\n    { field: \"athlete\", minWidth: 200 },\n    { field: \"country\", minWidth: 200 },\n    { field: \"sport\", minWidth: 150 },\n    { field: \"gold\" },\n    { field: \"silver\" },\n    { field: \"bronze\" },\n    { field: \"total\" },\n  ],\n  defaultColDef: {\n    filter: true,\n    minWidth: 100,\n    flex: 1,\n  },\n\n  popupParent: document.body,\n};\n\nconst getValues = (type: string) => {\n  const value = (\n    document.querySelector(\"#\" + type + \"Value\") as HTMLInputElement\n  ).value;\n\n  if (value == null) {\n    return;\n  }\n\n  const obj: ExcelHeaderFooterContent = {\n    value: value,\n  };\n\n  obj.position = (\n    document.querySelector(\"#\" + type + \"Position\") as HTMLInputElement\n  ).value as \"Left\" | \"Center\" | \"Right\";\n\n  const fontName = (\n    document.querySelector(\"#\" + type + \"FontName\") as HTMLInputElement\n  ).value;\n  const fontSize = (\n    document.querySelector(\"#\" + type + \"FontSize\") as HTMLInputElement\n  ).value;\n  const fontWeight = (\n    document.querySelector(\"#\" + type + \"FontWeight\") as HTMLInputElement\n  ).value;\n  const underline = (\n    document.querySelector(\"#\" + type + \"Underline\") as HTMLInputElement\n  ).checked;\n\n  if (\n    fontName !== \"Calibri\" ||\n    fontSize != \"11\" ||\n    fontWeight !== \"Regular\" ||\n    underline\n  ) {\n    obj.font = {};\n    if (fontName !== \"Calibri\") {\n      obj.font.fontName = fontName;\n    }\n    if (fontSize != \"11\") {\n      obj.font.size = Number.parseInt(fontSize);\n    }\n    if (fontWeight !== \"Regular\") {\n      if (fontWeight.indexOf(\"Bold\") !== -1) {\n        obj.font.bold = true;\n      }\n      if (fontWeight.indexOf(\"Italic\") !== -1) {\n        obj.font.italic = true;\n      }\n    }\n\n    if (underline) {\n      obj.font.underline = \"Single\";\n    }\n  }\n\n  return obj;\n};\n\nconst getParams: () => ExcelExportParams | undefined = () => {\n  const header = getValues(\"header\");\n  const footer = getValues(\"footer\");\n\n  if (!header && !footer) {\n    return undefined;\n  }\n\n  const obj: ExcelExportParams = {\n    headerFooterConfig: {\n      all: {},\n    },\n  };\n\n  if (header) {\n    obj.headerFooterConfig!.all!.header = [header];\n  }\n\n  if (footer) {\n    obj.headerFooterConfig!.all!.footer = [footer];\n  }\n\n  return obj;\n};\n\nfunction onBtExport() {\n  gridApi!.exportDataAsExcel(getParams());\n}\n\n// setup the grid after the page has finished loading\nconst gridDiv = document.querySelector<HTMLElement>(\"#myGrid\")!;\ngridApi = createGrid(gridDiv, gridOptions);\n\nfetch(\"https://www.ag-grid.com/example-assets/small-olympic-winners.json\")\n  .then((response) => response.json())\n  .then((data) =>\n    gridApi!.setGridOption(\n      \"rowData\",\n      data.filter((rec: any) => rec.country != null),\n    ),\n  );\n\nif (typeof window !== \"undefined\") {\n  // Attach external event handlers to window so they can be called from index.html\n  (<any>window).onBtExport = onBtExport;\n}\n","index.html":"<div class=\"container\">\n    <div class=\"columns\">\n        <fieldset class=\"column\">\n            <legend>Header</legend>\n            <div class=\"row\">\n                Position\n                <select id=\"headerPosition\">\n                    <option>Left</option>\n                    <option>Center</option>\n                    <option>Right</option>\n                </select>\n            </div>\n            <div class=\"row\">\n                Font\n                <select id=\"headerFontName\">\n                    <option>Calibri</option>\n                    <option>Arial</option>\n                </select>\n                <select id=\"headerFontSize\">\n                    <option>11</option>\n                    <option>12</option>\n                    <option>13</option>\n                    <option>14</option>\n                    <option>16</option>\n                    <option>20</option>\n                </select>\n                <select id=\"headerFontWeight\">\n                    <option>Regular</option>\n                    <option>Bold</option>\n                    <option>Italic</option>\n                    <option>Bold Italic</option>\n                </select>\n                <label class=\"option underline\" for=\"headerUnderline\">\n                    <input type=\"checkbox\" id=\"headerUnderline\" /><u>U</u>\n                </label>\n            </div>\n            <div class=\"row option\">\n                Value\n                <input id=\"headerValue\" />\n            </div>\n        </fieldset>\n        <fieldset class=\"column\">\n            <legend>Footer</legend>\n            <div class=\"row\">\n                Position\n                <select id=\"footerPosition\">\n                    <option>Left</option>\n                    <option>Center</option>\n                    <option>Right</option>\n                </select>\n            </div>\n            <div class=\"row\">\n                Font\n                <select id=\"footerFontName\">\n                    <option>Calibri</option>\n                    <option>Arial</option>\n                </select>\n                <select id=\"footerFontSize\">\n                    <option>11</option>\n                    <option>12</option>\n                    <option>13</option>\n                    <option>14</option>\n                    <option>16</option>\n                    <option>20</option>\n                </select>\n                <select id=\"footerFontWeight\">\n                    <option>Regular</option>\n                    <option>Bold</option>\n                    <option>Italic</option>\n                    <option>Bold Italic</option>\n                </select>\n                <label class=\"option underline\" for=\"footerUnderline\">\n                    <input type=\"checkbox\" id=\"footerUnderline\" /><u>U</u>\n                </label>\n            </div>\n            <div class=\"row\">\n                Value\n                <input id=\"footerValue\" />\n            </div>\n        </fieldset>\n    </div>\n    <div>\n        <button onclick=\"onBtExport()\" style=\"margin: 5px 0px; font-weight: bold\">Export to Excel</button>\n    </div>\n    <div class=\"grid-wrapper\">\n        <div id=\"myGrid\"></div>\n    </div>\n</div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {},\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        // map tells the System loader where to look for things\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            // appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap,\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {},\n            app: {\n                main: './main.ts',\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}