{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".details > label {\n    margin-bottom: 10px;\n}\n.details > label:first-of-type {\n    margin-top: 10px;\n}\n.details > label:last-of-type {\n    margin-bottom: 0;\n}\n.option {\n    display: block;\n    margin: 5px 10px 5px 0;\n}\n.grid-wrapper {\n    display: flex;\n    flex: 1 1 0px;\n}\n.grid-wrapper > div {\n    width: 100%;\n    height: 100%;\n}\n.container {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n.columns {\n    display: flex;\n    flex-direction: row;\n    gap: 16px;\n}\n","main.js":"let gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    { field: \"athlete\", minWidth: 200 },\n    { field: \"country\", minWidth: 200 },\n    { field: \"sport\", minWidth: 150 },\n    { field: \"gold\" },\n    { field: \"silver\" },\n    { field: \"bronze\" },\n    { field: \"total\" },\n  ],\n\n  defaultColDef: {\n    filter: true,\n    minWidth: 100,\n    flex: 1,\n  },\n\n  popupParent: document.body,\n};\n\nconst getRows = () => [\n  { cells: [] },\n  {\n    cells: [\n      {\n        data: {\n          value: 'Here is a comma, and a some \"quotes\".',\n          type: \"String\",\n        },\n      },\n    ],\n  },\n  {\n    cells: [\n      {\n        data: {\n          value:\n            \"They are visible when the downloaded file is opened in Excel because custom content is properly escaped.\",\n          type: \"String\",\n        },\n      },\n    ],\n  },\n  {\n    cells: [\n      { data: { value: \"this cell:\", type: \"String\" }, mergeAcross: 1 },\n      {\n        data: {\n          value: \"is empty because the first cell has mergeAcross=1\",\n          type: \"String\",\n        },\n      },\n    ],\n  },\n  { cells: [] },\n];\n\nconst getBoolean = (inputSelector) =>\n  !!document.querySelector(inputSelector).checked;\n\nconst getParams = () => ({\n  prependContent: getBoolean(\"#prependContent\") ? getRows() : undefined,\n  appendContent: getBoolean(\"#appendContent\") ? getRows() : undefined,\n});\n\nfunction onBtExport() {\n  gridApi.exportDataAsExcel(getParams());\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/small-olympic-winners.json\")\n    .then((response) => response.json())\n    .then((data) =>\n      gridApi.setGridOption(\n        \"rowData\",\n        data.filter((rec) => rec.country != null),\n      ),\n    );\n});\n","index.html":"<div class=\"container\">\n    <div class=\"columns\">\n        <label class=\"option\" for=\"prependContent\"><input type=\"checkbox\" id=\"prependContent\" />Prepend Content</label>\n        <label class=\"option\" for=\"appendContent\"><input type=\"checkbox\" id=\"appendContent\" /> Append Content</label>\n    </div>\n    <div>\n        <button onclick=\"onBtExport()\" style=\"margin: 5px 0px; font-weight: bold\">Export to Excel</button>\n    </div>\n    <div class=\"grid-wrapper\">\n        <div id=\"myGrid\"></div>\n    </div>\n</div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}