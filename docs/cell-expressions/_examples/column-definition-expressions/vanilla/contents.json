{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["data.js","main.js"],"styleFiles":[],"files":{"data.js":"function getData() {\n    const rowData = [];\n\n    const words = [\n        'One',\n        'Apple',\n        'Moon',\n        'Sugar',\n        'Grid',\n        'Banana',\n        'Sunshine',\n        'Stars',\n        'Black',\n        'White',\n        'Salt',\n        'Beach',\n    ];\n    const firstNames = ['Niall', 'John', 'Rob', 'Alberto', 'Bas', 'Dimple', 'Sean'];\n    const lastNames = ['Pink', 'Black', 'White', 'Brown', 'Smith', 'Smooth', 'Anderson'];\n\n    for (let i = 0; i < 100; i++) {\n        const randomWords = words[i % words.length] + ' ' + words[(i * 17) % words.length];\n        rowData.push({\n            simple: randomWords,\n            number: Math.floor(((i + 2) * 476321) % 10000),\n            a: Math.floor(i % 4),\n            b: Math.floor(i % 7),\n            firstName: firstNames[i % firstNames.length],\n            lastName: lastNames[i % lastNames.length],\n        });\n    }\n\n    return rowData;\n}\n","main.js":"const columnDefs = [\n  {\n    headerName: \"String (editable)\",\n    field: \"simple\",\n    editable: true,\n  },\n  {\n    headerName: \"Number (editable)\",\n    field: \"number\",\n    editable: true,\n    valueFormatter: `\"Â£\" + Math.floor(value).toString().replace(/(\\\\d)(?=(\\\\d{3})+(?!\\\\d))/g, \"$1,\")`,\n  },\n  {\n    headerName: \"Name (editable)\",\n    editable: true,\n    valueGetter: 'data.firstName + \" \" + data.lastName',\n    valueSetter:\n      // an expression can span multiple lines!!!\n      `var nameSplit = newValue.split(\" \");\n             var newFirstName = nameSplit[0];\n             var newLastName = nameSplit[1];\n             if (data.firstName !== newFirstName || data.lastName !== newLastName) {  \n                data.firstName = newFirstName;  \n                data.lastName = newLastName;  \n                return true;\n            } else {  \n                return false;\n            }`,\n  },\n  { headerName: \"A\", field: \"a\", width: 100 },\n  { headerName: \"B\", field: \"b\", width: 100 },\n  { headerName: \"A + B\", valueGetter: \"data.a + data.b\" },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n  columnDefs: columnDefs,\n  defaultColDef: {\n    flex: 1,\n    sortable: false,\n  },\n  rowData: getData(),\n  onCellValueChanged: onCellValueChanged,\n  autoSizeStrategy: { type: \"fitGridWidth\" },\n};\n\nfunction onCellValueChanged(event) {\n  console.log(\"data after changes is: \", event.data);\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}