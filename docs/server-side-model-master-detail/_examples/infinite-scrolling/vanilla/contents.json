{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":[],"files":{"main.js":"let gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    // group cell renderer needed for expand / collapse icons\n    { field: \"accountId\", cellRenderer: \"agGroupCellRenderer\" },\n    { field: \"name\" },\n    { field: \"country\" },\n    { field: \"calls\" },\n    { field: \"totalDuration\" },\n  ],\n  defaultColDef: {\n    flex: 1,\n    sortable: false,\n  },\n\n  // use the server-side row model\n  rowModelType: \"serverSide\",\n\n  // enable master detail\n  masterDetail: true,\n\n  detailCellRendererParams: {\n    detailGridOptions: {\n      columnDefs: [\n        { field: \"callId\" },\n        { field: \"direction\" },\n        { field: \"duration\", valueFormatter: \"x.toLocaleString() + 's'\" },\n        { field: \"switchCode\", minWidth: 150 },\n        { field: \"number\", minWidth: 180 },\n      ],\n      defaultColDef: {\n        flex: 1,\n      },\n    },\n    getDetailRowData: (params) => {\n      // supply details records to detail cell renderer (i.e. detail grid)\n      params.successCallback(params.data.callRecords);\n    },\n  },\n  onGridReady: (params) => {\n    setTimeout(() => {\n      // expand some master row\n      const someRow = params.api.getRowNode(\"1\");\n      if (someRow) {\n        someRow.setExpanded(true);\n      }\n    }, 1000);\n  },\n};\n\nfunction getServerSideDatasource(server) {\n  return {\n    getRows: (params) => {\n      // adding delay to simulate real server call\n      setTimeout(() => {\n        const response = server.getResponse(params.request);\n\n        if (response.success) {\n          // call the success callback\n          params.success({\n            rowData: response.rows,\n            rowCount: response.lastRow,\n          });\n        } else {\n          // inform the grid request failed\n          params.fail();\n        }\n      }, 500);\n    },\n  };\n}\n\nfunction getFakeServer(allData) {\n  return {\n    getResponse: (request) => {\n      console.log(\n        \"asking for rows: \" + request.startRow + \" to \" + request.endRow,\n      );\n\n      // take a slice of the total rows\n      const rowsThisPage = allData.slice(request.startRow, request.endRow);\n\n      // if row count is known, it's possible to skip over blocks\n      const lastRow = allData.length;\n\n      return {\n        success: true,\n        rows: rowsThisPage,\n        lastRow: lastRow,\n      };\n    },\n  };\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/call-data.json\")\n    .then((response) => response.json())\n    .then(function (data) {\n      const server = getFakeServer(data);\n      const datasource = getServerSideDatasource(server);\n      gridApi.setGridOption(\"serverSideDatasource\", datasource);\n    });\n});\n","index.html":"<div style=\"height: 100%; box-sizing: border-box\">\n    <div id=\"myGrid\" style=\"height: 100%\"></div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}