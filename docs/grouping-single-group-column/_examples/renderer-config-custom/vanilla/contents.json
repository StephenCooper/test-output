{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["customGroupCellRenderer.js","main.js"],"styleFiles":[],"files":{"customGroupCellRenderer.js":"\nclass CustomGroupCellRenderer  {\n    eGui;\n    eGroupStatus;\n    eValueContainer;\n\n    node;\n\n    onClick = () => {\n        this.node.setExpanded(!this.node.expanded);\n    };\n\n    onExpandedChanged = (params) => {\n        this.eGroupStatus.setAttribute(\n            'style',\n            `cursor: pointer;transform: ${params.node.expanded ? 'rotate(90deg)' : 'rotate(0deg)'};display: inline-block`\n        );\n    };\n\n    init(params) {\n        this.node = params.node;\n        this.eGui = document.createElement('div');\n\n        const paddingLeft = params.node.level * 15;\n        this.eGui.setAttribute('style', `padding-left: ${paddingLeft}px`);\n\n        if (this.node.group) {\n            this.eGroupStatus = document.createElement('div');\n            this.eGroupStatus.setAttribute(\n                'style',\n                `cursor: pointer;transform: ${params.node.expanded ? 'rotate(90deg)' : 'rotate(0deg)'};display: inline-block`\n            );\n            this.eGroupStatus.innerHTML = '&rarr;';\n            this.eGroupStatus.setAttribute('class', 'eGroupStatus');\n\n            this.eGroupStatus.addEventListener('click', this.onClick);\n\n            this.eGui.appendChild(this.eGroupStatus);\n\n            this.node.addEventListener('expandedChanged', this.onExpandedChanged);\n        }\n\n        this.eGui.append(' ');\n\n        this.eValueContainer = document.createElement('span');\n        this.eValueContainer.textContent = params.value == null ? '' : params.value;\n        this.eValueContainer.setAttribute('class', 'eValueContainer');\n        this.eGui.appendChild(this.eValueContainer);\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n\n    refresh(params) {\n        this.eValueContainer.textContent = params.value == null ? '' : params.value;\n        return true;\n    }\n\n    destroy() {\n        if (this.eGroupStatus) {\n            this.node.removeEventListener('expandedChanged', this.onExpandedChanged);\n            this.eGroupStatus.removeEventListener('click', this.onClick);\n        }\n    }\n}\n","main.js":"const columnDefs = [\n  {\n    field: \"country\",\n    rowGroup: true,\n    hide: true,\n  },\n  {\n    field: \"year\",\n    rowGroup: true,\n    hide: true,\n  },\n  {\n    field: \"athlete\",\n  },\n  {\n    field: \"total\",\n    aggFunc: \"sum\",\n  },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n  columnDefs: columnDefs,\n  autoGroupColumnDef: {\n    cellRenderer: CustomGroupCellRenderer,\n  },\n  defaultColDef: {\n    flex: 1,\n    minWidth: 120,\n  },\n  groupDefaultExpanded: 1,\n  onCellDoubleClicked: (params) => {\n    if (params.colDef.showRowGroup) {\n      params.node.setExpanded(!params.node.expanded);\n    }\n  },\n  onCellKeyDown: (params) => {\n    if (!(\"colDef\" in params)) {\n      return;\n    }\n    if (!(params.event instanceof KeyboardEvent)) {\n      return;\n    }\n    if (params.event.code !== \"Enter\") {\n      return;\n    }\n    if (params.colDef.showRowGroup) {\n      params.node.setExpanded(!params.node.expanded);\n    }\n  },\n};\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/small-olympic-winners.json\")\n    .then((response) => response.json())\n    .then((data) => gridApi.setGridOption(\"rowData\", data));\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}