{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"main.ts","styleFiles":[],"files":{"main.ts":"import {\n  ColDef,\n  ColGroupDef,\n  GetServerSideGroupKey,\n  GridApi,\n  GridOptions,\n  ICellRendererParams,\n  IServerSideDatasource,\n  IServerSideGetRowsParams,\n  IsServerSideGroup,\n  IsServerSideGroupOpenByDefaultParams,\n  ModuleRegistry,\n  RowModelType,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\nimport {\n  ColumnMenuModule,\n  ColumnsToolPanelModule,\n  ContextMenuModule,\n  ServerSideRowModelApiModule,\n  ServerSideRowModelModule,\n  TreeDataModule,\n} from \"ag-grid-enterprise\";\n\nModuleRegistry.registerModules([\n  ColumnsToolPanelModule,\n  TreeDataModule,\n  ColumnMenuModule,\n  ContextMenuModule,\n  ServerSideRowModelModule,\n  ServerSideRowModelApiModule,\n  ValidationModule /* Development Only */,\n]);\n\nconst columnDefs: ColDef[] = [\n  { field: \"employeeId\", hide: true },\n  { field: \"employeeName\", hide: true },\n  { field: \"jobTitle\" },\n  { field: \"employmentType\" },\n];\n\nlet gridApi: GridApi;\n\nconst gridOptions: GridOptions = {\n  defaultColDef: {\n    width: 240,\n    flex: 1,\n    sortable: false,\n  },\n  autoGroupColumnDef: {\n    field: \"employeeName\",\n    cellRendererParams: {\n      innerRenderer: (params: ICellRendererParams) => {\n        // display employeeName rather than group key (employeeId)\n        return params.data.employeeName;\n      },\n    },\n  },\n  rowModelType: \"serverSide\",\n  treeData: true,\n  columnDefs: columnDefs,\n  isServerSideGroupOpenByDefault: (\n    params: IsServerSideGroupOpenByDefaultParams,\n  ) => {\n    // open first two levels by default\n    return params.rowNode.level < 2;\n  },\n  isServerSideGroup: (dataItem: any) => {\n    // indicate if node is a group\n    return !!dataItem.underlings;\n  },\n  getServerSideGroupKey: (dataItem: any) => {\n    // specify which group key to use\n    return dataItem.employeeId;\n  },\n};\n\n// setup the grid after the page has finished loading\nconst gridDiv = document.querySelector<HTMLElement>(\"#myGrid\")!;\ngridApi = createGrid(gridDiv, gridOptions);\n\nfetch(\"https://www.ag-grid.com/example-assets/tree-data.json\")\n  .then((response) => response.json())\n  .then(function (data) {\n    const datasource = createServerSideDatasource(data);\n    gridApi!.setGridOption(\"serverSideDatasource\", datasource);\n\n    function createServerSideDatasource(data: any) {\n      const dataSource: IServerSideDatasource = {\n        getRows: (params: IServerSideGetRowsParams) => {\n          console.log(\"ServerSideDatasource.getRows: params = \", params);\n\n          const request = params.request;\n          if (request.groupKeys.length) {\n            // this example doesn't need to support lower levels.\n            params.fail();\n            return;\n          }\n\n          const result = {\n            rowData: data.slice(request.startRow, request.endRow),\n          };\n          console.log(\"getRows: result = \", result);\n          setTimeout(() => {\n            params.success(result);\n\n            const recursivelyPopulateHierarchy = (\n              route: string[],\n              node: any,\n            ) => {\n              if (node.underlings) {\n                gridApi!.applyServerSideRowData({\n                  route,\n                  successParams: {\n                    rowData: node.underlings,\n                    rowCount: node.underlings.length,\n                  },\n                });\n                node.underlings.forEach((child: any) => {\n                  recursivelyPopulateHierarchy(\n                    [...route, child.employeeId],\n                    child,\n                  );\n                });\n              }\n            };\n            result.rowData.forEach((topLevelNode: any) => {\n              recursivelyPopulateHierarchy(\n                [topLevelNode.employeeId],\n                topLevelNode,\n              );\n            });\n          }, 200);\n        },\n      };\n\n      return dataSource;\n    }\n  });\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {},\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        // map tells the System loader where to look for things\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            // appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap,\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {},\n            app: {\n                main: './main.ts',\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}