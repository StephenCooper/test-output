{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n","main.js":"const columnDefs = [\n  { field: \"employeeId\", hide: true },\n  { field: \"employeeName\", hide: true },\n  { field: \"employmentType\" },\n  { field: \"startDate\" },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n  defaultColDef: {\n    width: 235,\n    flex: 1,\n    sortable: false,\n  },\n  autoGroupColumnDef: {\n    field: \"employeeName\",\n  },\n  rowModelType: \"serverSide\",\n  treeData: true,\n  columnDefs: columnDefs,\n  cacheBlockSize: 10,\n  isServerSideGroupOpenByDefault: (params) => {\n    const isKathrynPowers =\n      params.rowNode.level == 0 && params.data.employeeName == \"Kathryn Powers\";\n    const isMabelWard =\n      params.rowNode.level == 1 && params.data.employeeName == \"Mabel Ward\";\n    return isKathrynPowers || isMabelWard;\n  },\n  isServerSideGroup: (dataItem) => {\n    // indicate if node is a group\n    return dataItem.group;\n  },\n  getServerSideGroupKey: (dataItem) => {\n    // specify which group key to use\n    return dataItem.employeeName;\n  },\n};\n\nfunction refreshCache(route) {\n  gridApi.refreshServerSide({ route: route, purge: true });\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/tree-data.json\")\n    .then((response) => response.json())\n    .then(function (data) {\n      const fakeServer = createFakeServer(data);\n      const datasource = createServerSideDatasource(fakeServer);\n      gridApi.setGridOption(\"serverSideDatasource\", datasource);\n    });\n});\n\nfunction createFakeServer(fakeServerData) {\n  const fakeServer = {\n    getData: (request) => {\n      function extractRowsFromData(groupKeys, data) {\n        if (groupKeys.length === 0) {\n          return data.map(function (d) {\n            return {\n              group: !!d.underlings,\n              employeeId: d.employeeId + \"\",\n              employeeName: d.employeeName,\n              employmentType: d.employmentType,\n              startDate: d.startDate,\n            };\n          });\n        }\n\n        const key = groupKeys[0];\n        for (let i = 0; i < data.length; i++) {\n          if (data[i].employeeName === key) {\n            return extractRowsFromData(\n              groupKeys.slice(1),\n              data[i].underlings.slice(),\n            );\n          }\n        }\n      }\n\n      return extractRowsFromData(request.groupKeys, fakeServerData);\n    },\n  };\n  return fakeServer;\n}\n\nfunction createServerSideDatasource(fakeServer) {\n  const dataSource = {\n    getRows: (params) => {\n      console.log(\"ServerSideDatasource.getRows: params = \", params);\n      const request = params.request;\n      const allRows = fakeServer.getData(request);\n      const doingInfinite = request.startRow != null && request.endRow != null;\n      const result = doingInfinite\n        ? {\n            rowData: allRows.slice(request.startRow, request.endRow),\n            rowCount: allRows.length,\n          }\n        : { rowData: allRows };\n      console.log(\"getRows: result = \", result);\n      setTimeout(() => {\n        params.success(result);\n      }, 500);\n    },\n  };\n\n  return dataSource;\n}\n","index.html":"<div class=\"example-wrapper\">\n    <div style=\"margin-bottom: 5px\">\n        <button onclick=\"refreshCache([])\">Refresh Everything</button>\n        <button onclick=\"refreshCache(['Kathryn Powers','Mabel Ward'])\">Refresh ['Kathryn Powers','Mabel Ward']</button>\n    </div>\n    <div id=\"myGrid\"></div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}