{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":[],"files":{"main.js":"const columnDefs = [\n  { field: \"employeeId\", hide: true },\n  { field: \"employeeName\", hide: true },\n  { field: \"jobTitle\" },\n  { field: \"employmentType\" },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n  defaultColDef: {\n    width: 240,\n    flex: 1,\n    sortable: false,\n  },\n  autoGroupColumnDef: {\n    field: \"employeeName\",\n    cellRendererParams: {\n      innerRenderer: (params) => {\n        // display employeeName rather than group key (employeeId)\n        return params.data.employeeName;\n      },\n    },\n  },\n  rowModelType: \"serverSide\",\n  treeData: true,\n  columnDefs: columnDefs,\n  isServerSideGroupOpenByDefault: (params) => {\n    // open first two levels by default\n    return params.rowNode.level < 2;\n  },\n  isServerSideGroup: (dataItem) => {\n    // indicate if node is a group\n    return dataItem.group;\n  },\n  getServerSideGroupKey: (dataItem) => {\n    // specify which group key to use\n    return dataItem.employeeId;\n  },\n};\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/small-tree-data.json\")\n    .then((response) => response.json())\n    .then(function (data) {\n      const fakeServer = createFakeServer(data);\n      const datasource = createServerSideDatasource(fakeServer);\n      gridApi.setGridOption(\"serverSideDatasource\", datasource);\n    });\n});\n\nfunction createFakeServer(fakeServerData) {\n  const fakeServer = {\n    data: fakeServerData,\n    getData: function (request) {\n      function extractRowsFromData(groupKeys, data) {\n        if (groupKeys.length === 0) {\n          return data.map(function (d) {\n            return {\n              group: !!d.children,\n              employeeId: d.employeeId,\n              employeeName: d.employeeName,\n              employmentType: d.employmentType,\n              jobTitle: d.jobTitle,\n            };\n          });\n        }\n\n        const key = groupKeys[0];\n        for (let i = 0; i < data.length; i++) {\n          if (data[i].employeeId === key) {\n            return extractRowsFromData(\n              groupKeys.slice(1),\n              data[i].children.slice(),\n            );\n          }\n        }\n      }\n\n      return extractRowsFromData(request.groupKeys, this.data);\n    },\n  };\n\n  return fakeServer;\n}\n\nfunction createServerSideDatasource(fakeServer) {\n  const dataSource = {\n    getRows: (params) => {\n      console.log(\"ServerSideDatasource.getRows: params = \", params);\n\n      const allRows = fakeServer.getData(params.request);\n\n      const request = params.request;\n      const doingInfinite = request.startRow != null && request.endRow != null;\n      const result = doingInfinite\n        ? {\n            rowData: allRows.slice(request.startRow, request.endRow),\n            rowCount: allRows.length,\n          }\n        : { rowData: allRows };\n      console.log(\"getRows: result = \", result);\n      setTimeout(() => {\n        params.success(result);\n      }, 200);\n    },\n  };\n\n  return dataSource;\n}\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}