{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["fakeServer.js","main.js"],"styleFiles":[],"files":{"fakeServer.js":"// This fake server uses http://alasql.org/ to mimic how a real server\n// might generate sql queries from the Server-Side Row Model request.\n// To keep things simple it does the bare minimum to support the example.\nfunction FakeServer(allData) {\n    const processedData = processData(allData);\n    alasql.options.cache = false;\n\n    return {\n        getData: function (request) {\n            const hasFilter = request.filterModel && Object.keys(request.filterModel).length;\n            let results = executeQuery(request, hasFilter);\n\n            if (hasFilter) {\n                results = recursiveFilter(request, results);\n            }\n\n            return {\n                success: true,\n                rows: results,\n                lastRow: getLastRowIndex(request),\n            };\n        },\n        getDates: function () {\n            const sql = 'SELECT DISTINCT startDate FROM ? ORDER BY startDate ASC';\n\n            return alasql(sql, [processedData]).map((row) => row.startDate);\n        },\n        getEmployees: function () {\n            // get children only\n            const sql = 'SELECT DISTINCT dataPath FROM ? WHERE underlings = FALSE ORDER BY dataPath ASC';\n\n            return alasql(sql, [processedData]).map((row) => (row.dataPath ? row.dataPath.split(',') : null));\n        },\n    };\n\n    function executeQuery(request, ignoreLimit) {\n        const sql = buildSql(request, ignoreLimit);\n\n        console.log('[FakeServer] - about to execute query:', sql);\n\n        return alasql(sql, [processedData]);\n    }\n\n    function buildSql(request, ignoreLimit) {\n        return 'SELECT * FROM ?' + whereSql(request) + orderBySql(request) + limitSql(request, ignoreLimit);\n    }\n\n    function whereSql(request) {\n        const whereParts = [];\n\n        const filterModel = request.filterModel;\n\n        if (filterModel && Object.keys(filterModel).length) {\n            Object.keys(filterModel).forEach(function (key) {\n                const item = filterModel[key];\n                if (key === 'ag-Grid-AutoColumn') {\n                    key = 'dataPath';\n                }\n\n                switch (item.filterType) {\n                    case 'text':\n                        whereParts.push(createFilterSql(textFilterMapper, key, item));\n                        break;\n                    case 'number':\n                        whereParts.push(createFilterSql(numberFilterMapper, key, item));\n                        break;\n                    case 'set':\n                        whereParts.push(createSetFilterSql(key, item.values));\n                        break;\n                    default:\n                        console.log('unknown filter type: ' + item.filterType);\n                        break;\n                }\n            });\n        } else {\n            whereParts.push(\"(parentPath = '\" + request.groupKeys.join(',') + \"')\");\n        }\n\n        if (whereParts.length > 0) {\n            return ' WHERE ' + whereParts.join(' AND ');\n        }\n\n        return '';\n    }\n\n    function createSetFilterSql(key, values) {\n        return key + \" IN ('\" + values.join(\"', '\") + \"')\";\n    }\n\n    function createFilterSql(mapper, key, item) {\n        if (item.operator) {\n            const conditions = item.conditions.map((condition) => mapper(key, condition));\n\n            return '(' + conditions.join(' ' + item.operator + ' ') + ')';\n        }\n\n        return mapper(key, item);\n    }\n\n    function textFilterMapper(key, item) {\n        switch (item.type) {\n            case 'equals':\n                return key + \" = '\" + item.filter + \"'\";\n            case 'notEqual':\n                return key + \" != '\" + item.filter + \"'\";\n            case 'contains':\n                return key + \" LIKE '%\" + item.filter + \"%'\";\n            case 'notContains':\n                return key + \" NOT LIKE '%\" + item.filter + \"%'\";\n            case 'startsWith':\n                return key + \" LIKE '\" + item.filter + \"%'\";\n            case 'endsWith':\n                return key + \" LIKE '%\" + item.filter + \"'\";\n            case 'blank':\n                return key + ' IS NULL or ' + key + \" = ''\";\n            case 'notBlank':\n                return key + ' IS NOT NULL and ' + key + \" != ''\";\n            default:\n                console.log('unknown text filter type: ' + item.type);\n        }\n    }\n\n    function numberFilterMapper(key, item) {\n        switch (item.type) {\n            case 'equals':\n                return key + ' = ' + item.filter;\n            case 'notEqual':\n                return key + ' != ' + item.filter;\n            case 'greaterThan':\n                return key + ' > ' + item.filter;\n            case 'greaterThanOrEqual':\n                return key + ' >= ' + item.filter;\n            case 'lessThan':\n                return key + ' < ' + item.filter;\n            case 'lessThanOrEqual':\n                return key + ' <= ' + item.filter;\n            case 'inRange':\n                return '(' + key + ' >= ' + item.filter + ' and ' + key + ' <= ' + item.filterTo + ')';\n            case 'blank':\n                return key + ' IS NULL';\n            case 'notBlank':\n                return key + ' IS NOT NULL';\n            default:\n                console.log('unknown number filter type: ' + item.type);\n        }\n    }\n\n    function orderBySql(request) {\n        const sortModel = request.sortModel;\n\n        if (sortModel.length === 0) return '';\n\n        const sorts = sortModel.map(function (s) {\n            return s.colId + ' ' + s.sort.toUpperCase();\n        });\n\n        return ' ORDER BY ' + sorts.join(', ');\n    }\n\n    function limitSql(request, ignoreLimit) {\n        if (ignoreLimit || request.endRow == undefined || request.startRow == undefined) {\n            return '';\n        }\n        const blockSize = request.endRow - request.startRow;\n\n        return ' LIMIT ' + blockSize + ' OFFSET ' + request.startRow;\n    }\n\n    function getLastRowIndex(request) {\n        const hasFilter = request.filterModel && Object.keys(request.filterModel).length;\n        let results = executeQuery(request, hasFilter);\n\n        if (hasFilter) {\n            results = recursiveFilter(request, results);\n        }\n        return results.length;\n    }\n\n    function processData(data) {\n        const flattenedData = [];\n        const flattenRowRecursive = (row, parentPath) => {\n            let startDate = null;\n            if (row.startDate) {\n                const dateParts = row.startDate.split('/');\n                startDate = new Date(parseInt(dateParts[2]), dateParts[1] - 1, dateParts[0]).toISOString();\n            }\n            const dataPath = [...parentPath, row.employeeName];\n            flattenedData.push({\n                ...row,\n                dataPath: dataPath.join(','),\n                parentPath: parentPath.join(','),\n                startDate,\n                underlings: !!row.underlings,\n            });\n            if (row.underlings) {\n                row.underlings.forEach((underling) => flattenRowRecursive(underling, dataPath));\n            }\n        };\n        data.forEach((row) => flattenRowRecursive(row, []));\n        return flattenedData;\n    }\n\n    function recursiveFilter(request, results) {\n        // tree data filter returns rows where the row itself matches, parent matches, or a child matches.\n        // matches for row itself\n        const allResults = [...results];\n        // parents of matching rows\n        recursiveFilterParentMatches(allResults, results);\n        // children of matching rows\n        recursiveFilterChildMatches(allResults, results);\n\n        const requestPath = request.groupKeys.join(',');\n        const sql =\n            \"SELECT DISTINCT processedData.* FROM ? processedData INNER JOIN ? allResults ON processedData.dataPath = allResults.dataPath WHERE parentPath = '\" +\n            requestPath +\n            \"'\" +\n            orderBySql(request) +\n            limitSql(request);\n        return alasql(sql, [processedData, allResults]);\n    }\n\n    function recursiveFilterParentMatches(allResults, childResults) {\n        if (!childResults.length) {\n            return;\n        }\n        const sql =\n            'SELECT DISTINCT processedData.* FROM ? processedData INNER JOIN ? parentResults ON processedData.dataPath = parentResults.parentPath';\n        const newMatches = alasql(sql, [processedData, childResults]).filter(\n            (newResult) => !allResults.some((existingResult) => newResult.dataPath === existingResult.dataPath)\n        );\n        allResults.push(...newMatches);\n        recursiveFilterParentMatches(allResults, newMatches);\n    }\n\n    function recursiveFilterChildMatches(allResults, parentResults) {\n        if (!parentResults.length) {\n            return;\n        }\n        const sql =\n            'SELECT DISTINCT processedData.* FROM ? processedData INNER JOIN ? parentResults ON processedData.parentPath = parentResults.dataPath';\n        const newMatches = alasql(sql, [processedData, parentResults]).filter(\n            (newResult) => !allResults.some((existingResult) => newResult.dataPath === existingResult.dataPath)\n        );\n        allResults.push(...newMatches);\n        recursiveFilterChildMatches(allResults, newMatches);\n    }\n}\n","main.js":"const columnDefs = [\n  { field: \"employeeId\", hide: true },\n  { field: \"employeeName\", hide: true },\n  { field: \"employmentType\" },\n  {\n    field: \"startDate\",\n    valueGetter: valueGetter,\n    valueFormatter: cellValueFormatter,\n    filter: \"agSetColumnFilter\",\n    filterParams: {\n      treeList: true,\n      excelMode: \"windows\",\n      keyCreator: dateKeyCreator,\n      valueFormatter: floatingFilterValueFormatter,\n      values: getDatesAsync,\n    },\n  },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n  defaultColDef: {\n    width: 240,\n    filter: \"agTextColumnFilter\",\n    floatingFilter: true,\n    flex: 1,\n    sortable: false,\n  },\n  autoGroupColumnDef: {\n    field: \"employeeName\",\n    filter: \"agSetColumnFilter\",\n    filterParams: {\n      treeList: true,\n      excelMode: \"windows\",\n      keyCreator: treeDataKeyCreator,\n      values: getEmployeesAsync,\n    },\n  },\n  rowModelType: \"serverSide\",\n  treeData: true,\n  columnDefs: columnDefs,\n  isServerSideGroupOpenByDefault: (params) => {\n    // open first level by default\n    return params.rowNode.level === 0;\n  },\n  isServerSideGroup: (dataItem) => {\n    // indicate if node is a group\n    return dataItem.underlings;\n  },\n  getServerSideGroupKey: (dataItem) => {\n    // specify which group key to use\n    return dataItem.employeeName;\n  },\n};\n\nfunction valueGetter(params) {\n  // server is returning a string, so need to convert to `Date`.\n  // could instead do this inside `agGrid.IServerSideDatasource.getRows`\n  return params.data.startDate ? new Date(params.data.startDate) : null;\n}\n\nfunction cellValueFormatter(params) {\n  return params.value ? params.value.toLocaleDateString() : null;\n}\n\nfunction floatingFilterValueFormatter(params) {\n  return params.value ? params.value.toLocaleDateString() : \"(Blanks)\";\n}\n\nfunction dateKeyCreator(params) {\n  // this is what is being sent in the Filter Model to the server, so want the matching format\n  return params.value ? params.value.toISOString() : null;\n}\n\nfunction treeDataKeyCreator(params) {\n  // tree data group filter value is a string[], so convert to a unique string\n  return params.value ? params.value.join(\",\") : null;\n}\n\nlet fakeServer;\n\nfunction getServerSideDatasource(server) {\n  return {\n    getRows: (params) => {\n      console.log(\"[Datasource] - rows requested by grid: \", params.request);\n\n      // simulating real server call with a 500ms delay\n      setTimeout(() => {\n        // get data for request from our fake server\n        const response = server.getData(params.request);\n        if (response.success) {\n          // supply rows for requested block to grid\n          params.success({\n            rowData: response.rows,\n            rowCount: response.lastRow,\n          });\n        } else {\n          params.fail();\n        }\n      }, 500);\n    },\n  };\n}\n\nfunction getDatesAsync(params) {\n  if (!fakeServer) {\n    // wait for init\n    setTimeout(() => getDatesAsync(params), 500);\n    return;\n  }\n  let dates = fakeServer.getDates();\n\n  if (dates) {\n    // values need to match the cell value (what the `valueGetter` returns)\n    dates = dates.map((isoDateString) =>\n      isoDateString ? new Date(isoDateString) : isoDateString,\n    );\n  }\n\n  // simulating real server call with a 500ms delay\n  setTimeout(() => {\n    params.success(dates);\n  }, 500);\n}\n\nfunction getEmployeesAsync(params) {\n  if (!fakeServer) {\n    // wait for init\n    setTimeout(() => getEmployeesAsync(params), 500);\n    return;\n  }\n  const employees = fakeServer.getEmployees();\n\n  // simulating real server call with a 500ms delay\n  setTimeout(() => {\n    params.success(employees);\n  }, 500);\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/tree-data.json\")\n    .then((response) => response.json())\n    .then(function (data) {\n      // setup the fake server with entire dataset\n      fakeServer = new FakeServer(data);\n\n      // create datasource with a reference to the fake server\n      const datasource = getServerSideDatasource(fakeServer);\n\n      // register the datasource with the grid\n      gridApi.setGridOption(\"serverSideDatasource\", datasource);\n    });\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}},"extras":["alasql"]}