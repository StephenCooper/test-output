{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n","main.js":"let fakeServer;\n\nlet gridApi;\n\nconst gridOptions = {\n  defaultColDef: {\n    width: 235,\n    flex: 1,\n    sortable: false,\n  },\n  autoGroupColumnDef: {\n    field: \"employeeName\",\n  },\n  rowModelType: \"serverSide\",\n  treeData: true,\n  columnDefs: [\n    { field: \"employeeId\", hide: true },\n    { field: \"employeeName\", hide: true },\n    { field: \"employmentType\" },\n    { field: \"startDate\" },\n  ],\n  cacheBlockSize: 10,\n  rowSelection: {\n    mode: \"multiRow\",\n    groupSelects: \"descendants\",\n  },\n  isServerSideGroupOpenByDefault: (params) => {\n    const isKathrynPowers =\n      params.rowNode.level == 0 && params.data.employeeName == \"Kathryn Powers\";\n    const isMabelWard =\n      params.rowNode.level == 1 && params.data.employeeName == \"Mabel Ward\";\n    return isKathrynPowers || isMabelWard;\n  },\n  getRowId: (row) => String(row.data.employeeId),\n  isServerSideGroup: (dataItem) => dataItem.group,\n  getServerSideGroupKey: (dataItem) => dataItem.employeeName,\n};\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/tree-data.json\")\n    .then((response) => response.json())\n    .then(function (data) {\n      const adjustedData = [\n        {\n          employeeId: -1,\n          employeeName: \"Robert Peterson\",\n          employmentType: \"Founder\",\n          startDate: \"24/01/1990\",\n        },\n        ...data,\n      ];\n      const fakeServer = createFakeServer(adjustedData, gridApi);\n      const datasource = createServerSideDatasource(fakeServer);\n      gridApi.setGridOption(\"serverSideDatasource\", datasource);\n    });\n});\n\nfunction createFakeServer(fakeServerData, api) {\n  const getDataAtRoute = (route) => {\n    let mutableRoute = [...route];\n    let target = { underlings: fakeServerData };\n    while (mutableRoute.length) {\n      const nextRoute = mutableRoute[0];\n      mutableRoute = mutableRoute.slice(1);\n      target = target.underlings.find((e) => e.employeeName === nextRoute);\n    }\n    return target;\n  };\n\n  const sanitizeRowForGrid = (d) => {\n    return {\n      group: !!d.underlings && !!d.underlings.length,\n      employeeId: d.employeeId,\n      employeeName: d.employeeName,\n      employmentType: d.employmentType,\n      startDate: d.startDate,\n    };\n  };\n\n  fakeServer = {\n    getData: (request) => {\n      function extractRowsFromData(groupKeys, data) {\n        if (groupKeys.length === 0) {\n          return data.map(sanitizeRowForGrid);\n        }\n\n        const key = groupKeys[0];\n        for (let i = 0; i < data.length; i++) {\n          if (data[i].employeeName === key) {\n            return extractRowsFromData(\n              groupKeys.slice(1),\n              data[i].underlings.slice(),\n            );\n          }\n        }\n      }\n\n      return extractRowsFromData(request.groupKeys, fakeServerData);\n    },\n    addChildRow: (route, newRow) => {\n      const target = getDataAtRoute(route);\n      if (!target.underlings || target.underlings.length === 0) {\n        target.underlings = [newRow];\n\n        // update the parent row via transaction\n        api.applyServerSideTransaction({\n          route: route.slice(0, route.length - 1),\n          update: [sanitizeRowForGrid(target)],\n        });\n      } else {\n        target.underlings.push(newRow);\n\n        // add the child row via transaction\n        api.applyServerSideTransaction({\n          route,\n          add: [sanitizeRowForGrid(newRow)],\n        });\n      }\n    },\n    toggleEmployment: (route) => {\n      const target = getDataAtRoute(route);\n      // update the data at the source\n      target.employmentType =\n        target.employmentType === \"Contract\" ? \"Permanent\" : \"Contract\";\n\n      // inform the grid of the changes\n      api.applyServerSideTransaction({\n        route: route.slice(0, route.length - 1),\n        update: [sanitizeRowForGrid(target)],\n      });\n    },\n    removeEmployee: (route) => {\n      const target = getDataAtRoute(route);\n\n      const parent = getDataAtRoute(route.slice(0, route.length - 1));\n      parent.underlings = parent.underlings.filter(\n        (child) => child.employeeName !== target.employeeName,\n      );\n      if (parent.underlings.length === 0) {\n        // update the parent row via transaction, as it's no longer a group\n        api.applyServerSideTransaction({\n          route: route.slice(0, route.length - 2),\n          update: [sanitizeRowForGrid(parent)],\n        });\n      } else {\n        // inform the grid of the changes\n        api.applyServerSideTransaction({\n          route: route.slice(0, route.length - 1),\n          remove: [sanitizeRowForGrid(target)],\n        });\n      }\n    },\n    moveEmployee: (route, to) => {\n      const target = getDataAtRoute(route);\n\n      // remove employee from old group\n      fakeServer.removeEmployee(route);\n\n      // add employee to new group\n      fakeServer.addChildRow(to, target);\n    },\n  };\n  return fakeServer;\n}\n\nfunction createServerSideDatasource(fakeServer) {\n  const dataSource = {\n    getRows: (params) => {\n      console.log(\"ServerSideDatasource.getRows: params = \", params);\n      const request = params.request;\n      const allRows = fakeServer.getData(request);\n      const doingInfinite = request.startRow != null && request.endRow != null;\n      const result = doingInfinite\n        ? {\n            rowData: allRows.slice(request.startRow, request.endRow),\n            rowCount: allRows.length,\n          }\n        : { rowData: allRows };\n      console.log(\"getRows: result = \", result);\n      setTimeout(() => {\n        params.success(result);\n      }, 500);\n    },\n  };\n\n  return dataSource;\n}\n","index.html":"<div class=\"example-wrapper\">\n    <div id=\"myGrid\"></div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}