{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"index.tsx","mainFileName":"index.tsx","styleFiles":[],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n","index.tsx":"\"use client\";\n\nimport React, {\n  useCallback,\n  useMemo,\n  useRef,\n  useState,\n  StrictMode,\n} from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"./styles.css\";\nimport {\n  ColDef,\n  ColGroupDef,\n  GetRowIdFunc,\n  GetServerSideGroupKey,\n  GridApi,\n  GridOptions,\n  GridReadyEvent,\n  IServerSideDatasource,\n  IServerSideGetRowsRequest,\n  IsServerSideGroup,\n  IsServerSideGroupOpenByDefaultParams,\n  ModuleRegistry,\n  RowModelType,\n  RowSelectionOptions,\n  TextFilterModule,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\nimport {\n  ColumnMenuModule,\n  ColumnsToolPanelModule,\n  ContextMenuModule,\n  ServerSideRowModelApiModule,\n  ServerSideRowModelModule,\n  TreeDataModule,\n} from \"ag-grid-enterprise\";\nModuleRegistry.registerModules([\n  ServerSideRowModelApiModule,\n  TextFilterModule,\n  ColumnsToolPanelModule,\n  ColumnMenuModule,\n  ContextMenuModule,\n  TreeDataModule,\n  ServerSideRowModelModule,\n  ValidationModule /* Development Only */,\n]);\n\ninterface FakeServer {\n  getData: (request: IServerSideGetRowsRequest) => any;\n  addChildRow: (route: string[], newRow: any) => void;\n  toggleEmployment: (route: string[]) => void;\n  removeEmployee: (route: string[]) => void;\n  moveEmployee: (from: string[], to: string[]) => void;\n}\n\nlet fakeServer: FakeServer;\n\nfunction createFakeServer(fakeServerData: any[], api: GridApi) {\n  const getDataAtRoute = (route: string[]) => {\n    let mutableRoute = [...route];\n    let target: any = { underlings: fakeServerData };\n    while (mutableRoute.length) {\n      const nextRoute = mutableRoute[0];\n      mutableRoute = mutableRoute.slice(1);\n      target = target.underlings.find((e: any) => e.employeeName === nextRoute);\n    }\n    return target;\n  };\n  const sanitizeRowForGrid = (d: any) => {\n    return {\n      group: !!d.underlings && !!d.underlings.length,\n      employeeId: d.employeeId,\n      employeeName: d.employeeName,\n      employmentType: d.employmentType,\n      startDate: d.startDate,\n    };\n  };\n  fakeServer = {\n    getData: (request: IServerSideGetRowsRequest): any => {\n      const extractRowsFromData: (groupKeys: string[], data: any[]) => any = (\n        groupKeys: string[],\n        data: any[],\n      ) => {\n        if (groupKeys.length === 0) {\n          return data.map(sanitizeRowForGrid);\n        }\n        const key = groupKeys[0];\n        for (let i = 0; i < data.length; i++) {\n          if (data[i].employeeName === key) {\n            return extractRowsFromData(\n              groupKeys.slice(1),\n              data[i].underlings.slice(),\n            );\n          }\n        }\n      };\n      return extractRowsFromData(request.groupKeys, fakeServerData);\n    },\n    addChildRow: (route: string[], newRow: any) => {\n      const target = getDataAtRoute(route);\n      if (!target.underlings || target.underlings.length === 0) {\n        target.underlings = [newRow];\n        // update the parent row via transaction\n        api.applyServerSideTransaction({\n          route: route.slice(0, route.length - 1),\n          update: [sanitizeRowForGrid(target)],\n        });\n      } else {\n        target.underlings.push(newRow);\n        // add the child row via transaction\n        api.applyServerSideTransaction({\n          route,\n          add: [sanitizeRowForGrid(newRow)],\n        });\n      }\n    },\n    toggleEmployment: (route: string[]) => {\n      const target = getDataAtRoute(route);\n      // update the data at the source\n      target.employmentType =\n        target.employmentType === \"Contract\" ? \"Permanent\" : \"Contract\";\n      // inform the grid of the changes\n      api.applyServerSideTransaction({\n        route: route.slice(0, route.length - 1),\n        update: [sanitizeRowForGrid(target)],\n      });\n    },\n    removeEmployee: (route: string[]) => {\n      const target = getDataAtRoute(route);\n      const parent = getDataAtRoute(route.slice(0, route.length - 1));\n      parent.underlings = parent.underlings.filter(\n        (child: any) => child.employeeName !== target.employeeName,\n      );\n      if (parent.underlings.length === 0) {\n        // update the parent row via transaction, as it's no longer a group\n        api.applyServerSideTransaction({\n          route: route.slice(0, route.length - 2),\n          update: [sanitizeRowForGrid(parent)],\n        });\n      } else {\n        // inform the grid of the changes\n        api.applyServerSideTransaction({\n          route: route.slice(0, route.length - 1),\n          remove: [sanitizeRowForGrid(target)],\n        });\n      }\n    },\n    moveEmployee: (route: string[], to: string[]) => {\n      const target = getDataAtRoute(route);\n      // remove employee from old group\n      fakeServer.removeEmployee(route);\n      // add employee to new group\n      fakeServer.addChildRow(to, target);\n    },\n  };\n  return fakeServer;\n}\n\nfunction createServerSideDatasource(fakeServer: FakeServer) {\n  const dataSource: IServerSideDatasource = {\n    getRows: (params) => {\n      console.log(\"ServerSideDatasource.getRows: params = \", params);\n      const request = params.request;\n      const allRows = fakeServer.getData(request);\n      const doingInfinite = request.startRow != null && request.endRow != null;\n      const result = doingInfinite\n        ? {\n            rowData: allRows.slice(request.startRow, request.endRow),\n            rowCount: allRows.length,\n          }\n        : { rowData: allRows };\n      console.log(\"getRows: result = \", result);\n      setTimeout(() => {\n        params.success(result);\n      }, 500);\n    },\n  };\n  return dataSource;\n}\n\nconst GridExample = () => {\n  const containerStyle = useMemo(() => ({ width: \"100%\", height: \"100%\" }), []);\n  const gridStyle = useMemo(() => ({ height: \"100%\", width: \"100%\" }), []);\n\n  const defaultColDef = useMemo<ColDef>(() => {\n    return {\n      width: 235,\n      flex: 1,\n      sortable: false,\n    };\n  }, []);\n  const autoGroupColumnDef = useMemo<ColDef>(() => {\n    return {\n      field: \"employeeName\",\n    };\n  }, []);\n  const [columnDefs, setColumnDefs] = useState<ColDef[]>([\n    { field: \"employeeId\", hide: true },\n    { field: \"employeeName\", hide: true },\n    { field: \"employmentType\" },\n    { field: \"startDate\" },\n  ]);\n  const rowSelection = useMemo<\n    RowSelectionOptions | \"single\" | \"multiple\"\n  >(() => {\n    return {\n      mode: \"multiRow\",\n      groupSelects: \"descendants\",\n    };\n  }, []);\n  const isServerSideGroupOpenByDefault = useCallback((params) => {\n    const isKathrynPowers =\n      params.rowNode.level == 0 && params.data.employeeName == \"Kathryn Powers\";\n    const isMabelWard =\n      params.rowNode.level == 1 && params.data.employeeName == \"Mabel Ward\";\n    return isKathrynPowers || isMabelWard;\n  }, []);\n  const getRowId = useCallback((row) => String(row.data.employeeId), []);\n  const isServerSideGroup = useCallback((dataItem) => dataItem.group, []);\n  const getServerSideGroupKey = useCallback(\n    (dataItem) => dataItem.employeeName,\n    [],\n  );\n\n  const onGridReady = useCallback((params: GridReadyEvent) => {\n    fetch(\"https://www.ag-grid.com/example-assets/tree-data.json\")\n      .then((resp) => resp.json())\n      .then((data: any[]) => {\n        const adjustedData = [\n          {\n            employeeId: -1,\n            employeeName: \"Robert Peterson\",\n            employmentType: \"Founder\",\n            startDate: \"24/01/1990\",\n          },\n          ...data,\n        ];\n        const fakeServer = createFakeServer(adjustedData, params.api!);\n        const datasource = createServerSideDatasource(fakeServer);\n        params.api!.setGridOption(\"serverSideDatasource\", datasource);\n      });\n  }, []);\n\n  return (\n    <div style={containerStyle}>\n      <div className=\"example-wrapper\">\n        <div style={gridStyle}>\n          <AgGridReact\n            defaultColDef={defaultColDef}\n            autoGroupColumnDef={autoGroupColumnDef}\n            rowModelType={\"serverSide\"}\n            treeData={true}\n            columnDefs={columnDefs}\n            cacheBlockSize={10}\n            rowSelection={rowSelection}\n            isServerSideGroupOpenByDefault={isServerSideGroupOpenByDefault}\n            getRowId={getRowId}\n            isServerSideGroup={isServerSideGroup}\n            getServerSideGroupKey={getServerSideGroupKey}\n            onGridReady={onGridReady}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst root = createRoot(document.getElementById(\"root\")!);\nroot.render(\n  <StrictMode>\n    <GridExample />\n  </StrictMode>,\n);\n","index.html":"<div class=\"example-wrapper\">\n    <div id=\"myGrid\"></div>\n</div>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            jsx: 'react',\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            // react\n            react: 'npm:react@18.2.0',\n            'react-dom': 'npm:react-dom@18.2.0',\n            'react-dom/client': 'npm:react-dom@18.2.0',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            css: {},\n            react: {\n                main: './umd/react.production.min.js',\n            },\n            'react-dom': {\n                main: './umd/react-dom.production.min.js',\n            },\n            'react-dom/server': {\n                main: '../umd/react-dom-server.browser.production.min.js',\n            },\n            app: {\n                main: './index.tsx',\n                defaultExtension: 'tsx',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"react":"18","react-dom":"18","@types/react":"18","@types/react-dom":"18","ag-grid-react":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}