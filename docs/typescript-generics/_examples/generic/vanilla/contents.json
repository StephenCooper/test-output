{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".test-grid {\n    flex-grow: 1;\n}\n\n.test-container {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\n.test-header {\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\n    font-size: 13px;\n    margin-bottom: 1rem;\n}\n","main.js":"const columnDefs = [\n  { headerName: \"Make\", field: \"make\" },\n  { headerName: \"Model\", field: \"model\" },\n  {\n    headerName: \"Price\",\n    field: \"price\",\n    valueFormatter: (params) => {\n      // params.value: number\n      return \"Â£\" + params.value;\n    },\n  },\n];\n\n// Data with ICar interface\nconst rowData = [\n  { make: \"Toyota\", model: \"Celica\", price: 35000 },\n  { make: \"Ford\", model: \"Mondeo\", price: 32000 },\n  { make: \"Porsche\", model: \"Boxster\", price: 72000 },\n];\n\nlet gridApi;\n\n// Pass ICar as generic row data type\nconst gridOptions = {\n  columnDefs,\n  rowData,\n  rowSelection: {\n    mode: \"multiRow\",\n  },\n  context: {\n    discount: 0.9,\n  },\n  // Type specified her but can be omitted and inferred by Typescript\n  getRowId: (params) => {\n    // params.data : ICar\n    return params.data.make + params.data.model;\n  },\n  onRowSelected: (event) => {\n    // event.data: ICar | undefined\n    if (event.data && event.node.isSelected()) {\n      const price = event.data.price;\n      // event.context: IContext\n      const discountRate = event.context.discount;\n      console.log(\"Price with 10% discount:\", price * discountRate);\n    }\n  },\n};\n\nfunction onShowSelection() {\n  // api.getSelectedRows() : ICar[]\n  const cars = gridApi.getSelectedRows();\n  console.log(\n    \"Selected cars are\",\n    cars.map((c) => `${c.make} ${c.model}`),\n  );\n}\n\n// wait for the document to be loaded, otherwise\n// AG Grid will not find the div in the document.\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  // lookup the container we want the Grid to use\n  const eGridDiv = document.querySelector(\"#myGrid\");\n\n  // create the grid passing in the div to use together with the columns & data we want to use\n  gridApi = agGrid.createGrid(eGridDiv, gridOptions);\n});\n","index.html":"<div class=\"test-container\">\n    <div class=\"test-header\">\n        <button onclick=\"onShowSelection()\">Log Selected Cars</button>\n    </div>\n    <div id=\"myGrid\" class=\"test-grid\"></div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}