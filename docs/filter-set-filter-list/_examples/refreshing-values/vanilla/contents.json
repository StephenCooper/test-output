{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["data.js","main.js"],"styleFiles":["styles.css"],"files":{"styles.css":"#container {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    padding-top: 1rem;\n}\n","data.js":"const animals = ['Monkey', 'Lion', 'Elephant', 'Tiger', 'Giraffe', 'Antelope'];\n\nfunction getData() {\n    const rows = [];\n\n    for (let i = 0; i < 2000; i++) {\n        const index = Math.floor(Math.random() * animals.length);\n        rows.push({ animal: animals[index] });\n    }\n\n    return rows;\n}\n","main.js":"const list1 = [\"Elephant\", \"Lion\", \"Monkey\"];\nconst list2 = [\"Elephant\", \"Giraffe\", \"Tiger\"];\n\nconst valuesArray = list1.slice();\nlet valuesCallbackList = list1;\n\nfunction valuesCallback(params) {\n  setTimeout(() => {\n    params.success(valuesCallbackList);\n  }, 1000);\n}\n\nconst arrayFilterParams = {\n  values: valuesArray,\n};\n\nconst callbackFilterParams = {\n  values: valuesCallback,\n  refreshValuesOnOpen: true,\n};\n\nlet gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    {\n      colId: \"array\",\n      headerName: \"Values Array\",\n      field: \"animal\",\n      filter: \"agSetColumnFilter\",\n      filterParams: arrayFilterParams,\n    },\n    {\n      colId: \"callback\",\n      headerName: \"Values Callback\",\n      field: \"animal\",\n      filter: \"agSetColumnFilter\",\n      filterParams: callbackFilterParams,\n    },\n  ],\n  defaultColDef: {\n    flex: 1,\n    filter: true,\n  },\n  sideBar: \"filters\",\n  rowData: getData(),\n  onFirstDataRendered: onFirstDataRendered,\n};\n\nfunction onFirstDataRendered(params) {\n  params.api.getToolPanelInstance(\"filters\").expandFilters();\n}\n\nfunction useList1() {\n  console.log(\"Updating values to \" + list1);\n  valuesArray.length = 0;\n  list1.forEach((value) => {\n    valuesArray.push(value);\n  });\n\n  gridApi.getColumnFilterInstance(\"array\").then((filter) => {\n    filter.refreshFilterValues();\n\n    valuesCallbackList = list1;\n  });\n}\n\nfunction useList2() {\n  console.log(\"Updating values to \" + list2);\n  valuesArray.length = 0;\n  list2.forEach((value) => {\n    valuesArray.push(value);\n  });\n\n  gridApi.getColumnFilterInstance(\"array\").then((filter) => {\n    filter.refreshFilterValues();\n\n    valuesCallbackList = list2;\n  });\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n});\n","index.html":"<div id=\"container\">\n    <div id=\"header\">\n        <button onclick=\"useList1()\">Use <code>['Elephant', 'Lion', 'Monkey']</code></button>\n        <button onclick=\"useList2()\">Use <code>['Elephant', 'Giraffe', 'Tiger']</code></button>\n    </div>\n    <div id=\"myGrid\" style=\"height: 100%\"></div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}