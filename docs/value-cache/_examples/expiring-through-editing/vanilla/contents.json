{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["data.js","main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n\n.ag-row-level-0 {\n    font-weight: bold;\n    color: burlywood;\n}\n\n.total-col {\n    font-weight: bold;\n    color: burlywood;\n}\n\n.number-cell {\n    text-align: right;\n}\n","data.js":"function getData() {\n    const rowData = [];\n\n    for (let i = 0; i < 10; i++) {\n        rowData.push({\n            id: i,\n            numberGood: Math.floor(((i + 2) * 476321) % 10000),\n            q1: Math.floor(((i + 2) * 173456) % 10000),\n            q2: Math.floor(((i + 200) * 173456) % 10000),\n            q3: Math.floor(((i + 20000) * 173456) % 10000),\n            q4: Math.floor(((i + 2000000) * 173456) % 10000),\n            year: i % 2 == 0 ? '2015' : '2016',\n        });\n    }\n\n    return rowData;\n}\n","main.js":"let callCount = 1;\n\nconst totalValueGetter = function (params) {\n  const q1 = params.getValue(\"q1\");\n  const q2 = params.getValue(\"q2\");\n  const q3 = params.getValue(\"q3\");\n  const q4 = params.getValue(\"q4\");\n  const result = q1 + q2 + q3 + q4;\n  console.log(\n    `Total Value Getter (${callCount}, ${params.column.getId()}): ${[q1, q2, q3, q4].join(\", \")} = ${result}`,\n  );\n  callCount++;\n  return result;\n};\nconst total10ValueGetter = function (params) {\n  const total = params.getValue(\"total\");\n  return total * 10;\n};\n\nconst columnDefs = [\n  { field: \"q1\", type: \"quarterFigure\" },\n  { field: \"q2\", type: \"quarterFigure\" },\n  { field: \"q3\", type: \"quarterFigure\" },\n  { field: \"q4\", type: \"quarterFigure\" },\n  { field: \"year\", rowGroup: true, hide: true },\n  {\n    headerName: \"Total\",\n    colId: \"total\",\n    cellClass: [\"number-cell\", \"total-col\"],\n    aggFunc: \"sum\",\n    valueFormatter: formatNumber,\n    valueGetter: totalValueGetter,\n  },\n  {\n    headerName: \"Total x 10\",\n    cellClass: [\"number-cell\", \"total-col\"],\n    aggFunc: \"sum\",\n    minWidth: 120,\n    valueFormatter: formatNumber,\n    valueGetter: total10ValueGetter,\n  },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n  columnDefs: columnDefs,\n  defaultColDef: {\n    flex: 1,\n    enableCellChangeFlash: true,\n  },\n  autoGroupColumnDef: {\n    minWidth: 130,\n  },\n  columnTypes: {\n    quarterFigure: {\n      editable: true,\n      cellClass: \"number-cell\",\n      aggFunc: \"sum\",\n      valueFormatter: formatNumber,\n      valueParser: function numberParser(params) {\n        return Number(params.newValue);\n      },\n    },\n  },\n  rowData: getData(),\n  suppressAggFuncInHeader: true,\n  groupDefaultExpanded: 1,\n  valueCache: true,\n  getRowId: (params) => {\n    return String(params.data.id);\n  },\n  onCellValueChanged: () => {\n    console.log(\"onCellValueChanged\");\n  },\n};\n\nfunction formatNumber(params) {\n  const number = params.value;\n  return Math.floor(number).toLocaleString();\n}\n\nfunction onExpireValueCache() {\n  console.log(\"onInvalidateValueCache -> start\");\n  gridApi.expireValueCache();\n  console.log(\"onInvalidateValueCache -> end\");\n}\n\nfunction onRefreshCells() {\n  console.log(\"onRefreshCells -> start\");\n  gridApi.refreshCells();\n  console.log(\"onRefreshCells -> end\");\n}\n\nfunction onUpdateOneValue() {\n  const randomId = Math.floor(Math.random() * 10) + \"\";\n  const rowNode = gridApi.getRowNode(randomId);\n  if (rowNode) {\n    const randomCol = [\"q1\", \"q2\", \"q3\", \"q4\"][Math.floor(Math.random() * 4)];\n    const newValue = Math.floor(Math.random() * 1000);\n    console.log(\"onUpdateOneValue -> start\");\n    rowNode.setDataValue(randomCol, newValue);\n    console.log(\"onUpdateOneValue -> end\");\n  }\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n});\n","index.html":"<div class=\"example-wrapper\">\n    <div style=\"margin-bottom: 5px\">\n        <button onclick=\"onExpireValueCache()\">Invalidate Value Cache</button>\n        <button onclick=\"onRefreshCells()\">Refresh Cells</button>\n        <button onclick=\"onUpdateOneValue()\">Update One Value</button>\n    </div>\n\n    <div id=\"myGrid\"></div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}