{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"main.ts","styleFiles":["styles.css"],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n\n.ag-row-level-0 {\n    font-weight: bold;\n    color: burlywood;\n}\n\n.total-col {\n    font-weight: bold;\n    color: burlywood;\n}\n\n.number-cell {\n    text-align: right;\n}\n","data.ts":"export function getData(): any[] {\n    const rowData = [];\n\n    for (let i = 0; i < 10; i++) {\n        rowData.push({\n            id: i,\n            numberGood: Math.floor(((i + 2) * 476321) % 10000),\n            q1: Math.floor(((i + 2) * 173456) % 10000),\n            q2: Math.floor(((i + 200) * 173456) % 10000),\n            q3: Math.floor(((i + 20000) * 173456) % 10000),\n            q4: Math.floor(((i + 2000000) * 173456) % 10000),\n            year: i % 2 == 0 ? '2015' : '2016',\n        });\n    }\n\n    return rowData;\n}\n","main.ts":"import {\n  CellStyleModule,\n  ClientSideRowModelModule,\n  ColDef,\n  ColGroupDef,\n  ColTypeDef,\n  GetRowIdFunc,\n  GetRowIdParams,\n  GridApi,\n  GridOptions,\n  HighlightChangesModule,\n  ModuleRegistry,\n  NumberEditorModule,\n  RenderApiModule,\n  RowApiModule,\n  TextEditorModule,\n  ValidationModule,\n  ValueCacheModule,\n  ValueFormatterParams,\n  ValueGetterParams,\n  createGrid,\n} from \"ag-grid-community\";\nimport { RowGroupingModule } from \"ag-grid-enterprise\";\nimport { getData } from \"./data\";\n\nModuleRegistry.registerModules([\n  RowApiModule,\n  RenderApiModule,\n  NumberEditorModule,\n  TextEditorModule,\n  ValueCacheModule,\n  HighlightChangesModule,\n  CellStyleModule,\n  ClientSideRowModelModule,\n  RowGroupingModule,\n  ValidationModule /* Development Only */,\n]);\n\nlet callCount = 1;\n\nconst totalValueGetter = function (params: ValueGetterParams) {\n  const q1 = params.getValue(\"q1\");\n  const q2 = params.getValue(\"q2\");\n  const q3 = params.getValue(\"q3\");\n  const q4 = params.getValue(\"q4\");\n  const result = q1 + q2 + q3 + q4;\n  console.log(\n    `Total Value Getter (${callCount}, ${params.column.getId()}): ${[q1, q2, q3, q4].join(\", \")} = ${result}`,\n  );\n  callCount++;\n  return result;\n};\nconst total10ValueGetter = function (params: ValueGetterParams) {\n  const total = params.getValue(\"total\");\n  return total * 10;\n};\n\nconst columnDefs: ColDef[] = [\n  { field: \"q1\", type: \"quarterFigure\" },\n  { field: \"q2\", type: \"quarterFigure\" },\n  { field: \"q3\", type: \"quarterFigure\" },\n  { field: \"q4\", type: \"quarterFigure\" },\n  { field: \"year\", rowGroup: true, hide: true },\n  {\n    headerName: \"Total\",\n    colId: \"total\",\n    cellClass: [\"number-cell\", \"total-col\"],\n    aggFunc: \"sum\",\n    valueFormatter: formatNumber,\n    valueGetter: totalValueGetter,\n  },\n  {\n    headerName: \"Total x 10\",\n    cellClass: [\"number-cell\", \"total-col\"],\n    aggFunc: \"sum\",\n    minWidth: 120,\n    valueFormatter: formatNumber,\n    valueGetter: total10ValueGetter,\n  },\n];\n\nlet gridApi: GridApi;\n\nconst gridOptions: GridOptions = {\n  columnDefs: columnDefs,\n  defaultColDef: {\n    flex: 1,\n    enableCellChangeFlash: true,\n  },\n  autoGroupColumnDef: {\n    minWidth: 130,\n  },\n  columnTypes: {\n    quarterFigure: {\n      editable: true,\n      cellClass: \"number-cell\",\n      aggFunc: \"sum\",\n      valueFormatter: formatNumber,\n      valueParser: function numberParser(params) {\n        return Number(params.newValue);\n      },\n    },\n  },\n  rowData: getData(),\n  suppressAggFuncInHeader: true,\n  groupDefaultExpanded: 1,\n  valueCache: true,\n  getRowId: (params: GetRowIdParams) => {\n    return String(params.data.id);\n  },\n  onCellValueChanged: () => {\n    console.log(\"onCellValueChanged\");\n  },\n};\n\nfunction formatNumber(params: ValueFormatterParams) {\n  const number = params.value;\n  return Math.floor(number).toLocaleString();\n}\n\nfunction onExpireValueCache() {\n  console.log(\"onInvalidateValueCache -> start\");\n  gridApi!.expireValueCache();\n  console.log(\"onInvalidateValueCache -> end\");\n}\n\nfunction onRefreshCells() {\n  console.log(\"onRefreshCells -> start\");\n  gridApi!.refreshCells();\n  console.log(\"onRefreshCells -> end\");\n}\n\nfunction onUpdateOneValue() {\n  const randomId = Math.floor(Math.random() * 10) + \"\";\n  const rowNode = gridApi!.getRowNode(randomId);\n  if (rowNode) {\n    const randomCol = [\"q1\", \"q2\", \"q3\", \"q4\"][Math.floor(Math.random() * 4)];\n    const newValue = Math.floor(Math.random() * 1000);\n    console.log(\"onUpdateOneValue -> start\");\n    rowNode.setDataValue(randomCol, newValue);\n    console.log(\"onUpdateOneValue -> end\");\n  }\n}\n\n// setup the grid after the page has finished loading\nconst gridDiv = document.querySelector<HTMLElement>(\"#myGrid\")!;\ngridApi = createGrid(gridDiv, gridOptions);\n\nif (typeof window !== \"undefined\") {\n  // Attach external event handlers to window so they can be called from index.html\n  (<any>window).onExpireValueCache = onExpireValueCache;\n  (<any>window).onRefreshCells = onRefreshCells;\n  (<any>window).onUpdateOneValue = onUpdateOneValue;\n}\n","index.html":"<div class=\"example-wrapper\">\n    <div style=\"margin-bottom: 5px\">\n        <button onclick=\"onExpireValueCache()\">Invalidate Value Cache</button>\n        <button onclick=\"onRefreshCells()\">Refresh Cells</button>\n        <button onclick=\"onUpdateOneValue()\">Update One Value</button>\n    </div>\n\n    <div id=\"myGrid\"></div>\n</div>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {},\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        // map tells the System loader where to look for things\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            // appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap,\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {},\n            app: {\n                main: './main.ts',\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}