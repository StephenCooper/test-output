{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":true,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["data.js","main.js"],"styleFiles":["style.css"],"files":{"style.css":".wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n.button-container {\n    flex-wrap: wrap;\n}\n\n#myGrid {\n    flex: 1;\n}\n\n#myChart {\n    flex: 2;\n    min-height: 530px;\n}\n","data.js":"async function getData(chartType, delay = 100) {\n    return new Promise((resolve) => setTimeout(() => resolve(generateData(chartType)), delay));\n}\n\nfunction generateData(chartType) {\n    switch (chartType) {\n        case 'heatmap':\n            return generateHeatmapData();\n        case 'waterfall':\n            return generateWaterfallData();\n    }\n}\n\nfunction generateHeatmapData() {\n    // Source: http://www.sheffieldweather.co.uk/Averages/MONTHLYAIRAVERAGE.htm\n    return [\n        {\n            year: '2010',\n            jan: 1.2,\n            feb: 1.9,\n            mar: 5.9,\n            apr: 9.1,\n            may: 10.9,\n            jun: 15.2,\n            jul: 16.2,\n            aug: 14.9,\n            sep: 13.4,\n            oct: 9.5,\n            nov: 4.9,\n            dec: 0.4,\n        },\n        {\n            year: '2011',\n            jan: 3.9,\n            feb: 6,\n            mar: 6.6,\n            apr: 12,\n            may: 12,\n            jun: 14.2,\n            jul: 15.8,\n            aug: 15.8,\n            sep: 14.9,\n            oct: 12.2,\n            nov: 8.9,\n            dec: 5.4,\n        },\n        {\n            year: '2012',\n            jan: 5.1,\n            feb: 4.5,\n            mar: 8.6,\n            apr: 6.7,\n            may: 11.6,\n            jun: 13.4,\n            jul: 15.5,\n            aug: 16.2,\n            sep: 12.7,\n            oct: 8.8,\n            nov: 6.1,\n            dec: 4.2,\n        },\n        {\n            year: '2013',\n            jan: 3.4,\n            feb: 2.7,\n            mar: 1.7,\n            apr: 7.4,\n            may: 10.6,\n            jun: 14.1,\n            jul: 18.4,\n            aug: 16.8,\n            sep: 13.3,\n            oct: 11.7,\n            nov: 6.2,\n            dec: 6.3,\n        },\n        {\n            year: '2014',\n            jan: 5,\n            feb: 5.6,\n            mar: 7.4,\n            apr: 10.1,\n            may: 12.2,\n            jun: 15.3,\n            jul: 17.9,\n            aug: 14.9,\n            sep: 14.4,\n            oct: 11.4,\n            nov: 7.8,\n            dec: 5.2,\n        },\n        {\n            year: '2015',\n            jan: 4.1,\n            feb: 3.8,\n            mar: 5.9,\n            apr: 9.1,\n            may: 10.6,\n            jun: 13.9,\n            jul: 15.7,\n            aug: 15.8,\n            sep: 12.2,\n            oct: 10.2,\n            nov: 8.7,\n            dec: 8.6,\n        },\n        {\n            year: '2016',\n            jan: 4.8,\n            feb: 4.2,\n            mar: 5.5,\n            apr: 7,\n            may: 11.8,\n            jun: 14.6,\n            jul: 16.6,\n            aug: 16.6,\n            sep: 15.4,\n            oct: 10.2,\n            nov: 5.4,\n            dec: 6.3,\n        },\n        {\n            year: '2017',\n            jan: 3.9,\n            feb: 5.2,\n            mar: 8,\n            apr: 8.6,\n            may: 12.8,\n            jun: 15.7,\n            jul: 16.4,\n            aug: 15.2,\n            sep: 13,\n            oct: 11.9,\n            nov: 6.5,\n            dec: 4.7,\n        },\n        {\n            year: '2018',\n            jan: 4.4,\n            feb: 2.3,\n            mar: 3.7,\n            apr: 8.8,\n            may: 13.8,\n            jun: 16.4,\n            jul: 19.5,\n            aug: 17,\n            sep: 13.4,\n            oct: 10.3,\n            nov: 7.4,\n            dec: 6.4,\n        },\n        {\n            year: '2019',\n            jan: 4.4,\n            feb: 6.9,\n            mar: 7.5,\n            apr: 8.9,\n            may: 11.5,\n            jun: 14.1,\n            jul: 17.8,\n            aug: 17.1,\n            sep: 13.7,\n            oct: 9.2,\n            nov: 5.4,\n            dec: 5.4,\n        },\n        {\n            year: '2020',\n            jan: 6.4,\n            feb: 5.6,\n            mar: 6.3,\n            apr: 10.3,\n            may: 12.8,\n            jun: 15,\n            jul: 15.6,\n            aug: 17.2,\n            sep: 13.7,\n            oct: 9.8,\n            nov: 8.1,\n            dec: 4.6,\n        },\n        {\n            year: '2021',\n            jan: 2.8,\n            feb: 4.3,\n            mar: 7.2,\n            apr: 6.5,\n            may: 10,\n            jun: 16.1,\n            jul: 18.4,\n            aug: 16.1,\n            sep: 16.2,\n            oct: 11.6,\n            nov: 7.7,\n            dec: 5.4,\n        },\n        {\n            year: '2022',\n            jan: 5.2,\n            feb: 6.1,\n            mar: 7.4,\n            apr: 9.2,\n            may: 13.3,\n            jun: 15.5,\n            jul: 18.5,\n            aug: 18.4,\n            sep: 14.5,\n            oct: 12.1,\n            nov: 8.4,\n            dec: 3.6,\n        },\n    ];\n}\n\nfunction generateWaterfallData() {\n    return [\n        { financials: 'Income\\nTax', amount: 185 },\n        { financials: 'VAT', amount: 145 },\n        { financials: 'NI', amount: 134 },\n        { financials: 'Corp\\nTax', amount: 55 },\n        { financials: 'Council\\nTax', amount: 34 },\n        { financials: 'Social\\nProtection', amount: -252 },\n        { financials: 'Health', amount: -155 },\n        { financials: 'Education', amount: -112 },\n        { financials: 'Defence', amount: -65 },\n        { financials: 'Debt\\nInterest', amount: -63 },\n        { financials: 'Housing', amount: -31 },\n    ];\n}\n","main.js":"let gridApi;\nlet chartRef;\n\nconst heatmapColIds = [\n  \"year\",\n  \"jan\",\n  \"feb\",\n  \"mar\",\n  \"apr\",\n  \"may\",\n  \"jun\",\n  \"jul\",\n  \"aug\",\n  \"sep\",\n  \"oct\",\n  \"nov\",\n  \"dec\",\n];\nconst heatmapColDefs = [\n  { field: \"year\", width: 150, chartDataType: \"category\" },\n  { field: \"jan\" },\n  { field: \"feb\" },\n  { field: \"mar\" },\n  { field: \"apr\" },\n  { field: \"may\" },\n  { field: \"jun\" },\n  { field: \"jul\" },\n  { field: \"aug\" },\n  { field: \"sep\" },\n  { field: \"oct\" },\n  { field: \"nov\" },\n  { field: \"dec\" },\n];\n\nconst waterfallColIds = [\"financials\", \"amount\"];\nconst waterfallColDefs = [\n  { field: \"financials\", width: 150, chartDataType: \"category\" },\n  { field: \"amount\", chartDataType: \"series\" },\n];\n\nconst gridOptions = {\n  columnDefs: heatmapColDefs,\n  defaultColDef: {\n    flex: 1,\n    minWidth: 100,\n  },\n  popupParent: document.body,\n  cellSelection: true,\n  enableCharts: true,\n  chartToolPanelsDef: {\n    defaultToolPanel: \"settings\",\n  },\n  onGridReady: (params) => {\n    getData(\"heatmap\").then((rowData) =>\n      params.api.setGridOption(\"rowData\", rowData),\n    );\n  },\n  onFirstDataRendered,\n};\n\nfunction onFirstDataRendered(params) {\n  chartRef = params.api.createRangeChart({\n    chartContainer: document.querySelector(\"#myChart\"),\n    chartType: \"heatmap\",\n    cellRange: {\n      columns: heatmapColIds,\n    },\n  });\n}\n\nfunction updateChart(chartType) {\n  getData(chartType).then((rowData) => {\n    gridApi.updateGridOptions({\n      columnDefs: chartType === \"heatmap\" ? heatmapColDefs : waterfallColDefs,\n      rowData,\n    });\n    setTimeout(() => {\n      gridApi.updateChart({\n        type: \"rangeChartUpdate\",\n        chartId: chartRef.chartId,\n        chartType,\n        cellRange: {\n          columns: chartType === \"heatmap\" ? heatmapColIds : waterfallColIds,\n        },\n      });\n    });\n  });\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(\n    gridDiv,\n    gridOptions,\n  ); /** DARK INTEGRATED START **/\n  const isInitialModeDark =\n    document.documentElement.dataset.agThemeMode?.includes(\"dark\");\n\n  const updateChartThemes = (isDark) => {\n    const themes = [\n      \"ag-default\",\n      \"ag-material\",\n      \"ag-sheets\",\n      \"ag-polychroma\",\n      \"ag-vivid\",\n    ];\n    const currentThemes = gridApi.getGridOption(\"chartThemes\");\n    const customTheme =\n      currentThemes &&\n      currentThemes.some((theme) => theme.startsWith(\"my-custom-theme\"));\n\n    let modifiedThemes = customTheme\n      ? isDark\n        ? [\"my-custom-theme-dark\", \"my-custom-theme-light\"]\n        : [\"my-custom-theme-light\", \"my-custom-theme-dark\"]\n      : Array.from(\n          new Set(themes.map((theme) => theme + (isDark ? \"-dark\" : \"\"))),\n        );\n\n    // updating the 'chartThemes' grid option will cause the chart to reactively update!\n    gridApi.setGridOption(\"chartThemes\", modifiedThemes);\n  };\n\n  // update chart themes when example first loads\n  let initialSet = false;\n  const maxTries = 5;\n  let tries = 0;\n  const trySetInitial = (delay) => {\n    if (gridApi) {\n      initialSet = true;\n      updateChartThemes(isInitialModeDark);\n    } else {\n      if (tries < maxTries) {\n        setTimeout(() => trySetInitial(), 250);\n        tries++;\n      }\n    }\n  };\n  trySetInitial(0);\n\n  const handleColorSchemeChange = (event) => {\n    const { darkMode } = event.detail;\n    updateChartThemes(darkMode);\n  };\n\n  // listen for user-triggered dark mode changes (not removing listener is fine here!)\n  document.addEventListener(\"color-scheme-change\", handleColorSchemeChange);\n  /** DARK INTEGRATED END **/\n});\n","index.html":"<div class=\"wrapper\">\n    <div class=\"button-container\">\n        <button onclick=\"updateChart('heatmap')\">Heatmap</button>\n        <button onclick=\"updateChart('waterfall')\">Waterfall</button>\n    </div>\n    <div id=\"myGrid\"></div>\n    <div id=\"myChart\"></div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0","ag-charts-community":"latest","ag-charts-enterprise":"latest"}}}