{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":true,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["data.js","main.js"],"styleFiles":["style.css"],"files":{"style.css":".wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n.button-container {\n    flex-wrap: wrap;\n}\n\n#myGrid {\n    flex: 1;\n}\n\n#myChart {\n    flex: 2;\n    min-height: 530px;\n}\n","data.js":"async function getData(delay = 100) {\n    return new Promise((resolve) => setTimeout(() => resolve(generateData()), delay));\n}\n\nfunction generateData() {\n    return [\n        { period: 'Q1 2023', client: 'TechNova Enterprises', recurring: 15000, individual: 5000 },\n        { period: 'Q1 2023', client: 'InnoDyne Solutions', recurring: 2000, individual: 70000 },\n        { period: 'Q1 2023', client: 'Unified Systems Ltd', recurring: 10000, individual: 40000 },\n        { period: 'Q1 2023', client: 'Vertex Dynamics Inc', recurring: 1800, individual: 6000 },\n        { period: 'Q1 2023', client: 'MacroWare Technologies', recurring: 25000, individual: 90000 },\n        { period: 'Q1 2023', client: 'Nexa Innovations Corp', recurring: 30000, individual: 120000 },\n        { period: 'Q1 2023', client: 'Synthetics Solutions Ltd', recurring: 22000, individual: 8000 },\n        { period: 'Q1 2023', client: 'Optimal Systems Inc', recurring: 28000, individual: 100000 },\n        { period: 'Q1 2023', client: 'TechEdge Ventures', recurring: 3500, individual: 130000 },\n        { period: 'Q1 2023', client: 'Visionary Labs LLC', recurring: 40000, individual: 160000 },\n        { period: 'Q2 2023', client: 'TechNova Enterprises', recurring: 15500, individual: 52000 },\n        { period: 'Q2 2023', client: 'InnoDyne Solutions', recurring: 20500, individual: 7200 },\n        { period: 'Q2 2023', client: 'Unified Systems Ltd', recurring: 1050, individual: 42000 },\n        { period: 'Q2 2023', client: 'Vertex Dynamics Inc', recurring: 18500, individual: 62000 },\n        { period: 'Q2 2023', client: 'MacroWare Technologies', recurring: 25500, individual: 9200 },\n        { period: 'Q2 2023', client: 'Nexa Innovations Corp', recurring: 30500, individual: 122000 },\n        { period: 'Q2 2023', client: 'Synthetics Solutions Ltd', recurring: 22500, individual: 8200 },\n        { period: 'Q2 2023', client: 'Optimal Systems Inc', recurring: 28500, individual: 102000 },\n        { period: 'Q2 2023', client: 'TechEdge Ventures', recurring: 3550, individual: 132000 },\n        { period: 'Q2 2023', client: 'Visionary Labs LLC', recurring: 40500, individual: 162000 },\n        { period: 'Q3 2023', client: 'TechNova Enterprises', recurring: 16000, individual: 54000 },\n        { period: 'Q3 2023', client: 'InnoDyne Solutions', recurring: 21000, individual: 74000 },\n        { period: 'Q3 2023', client: 'Unified Systems Ltd', recurring: 11000, individual: 4400 },\n        { period: 'Q3 2023', client: 'Vertex Dynamics Inc', recurring: 19000, individual: 64000 },\n        { period: 'Q3 2023', client: 'MacroWare Technologies', recurring: 2600, individual: 94000 },\n        { period: 'Q3 2023', client: 'Nexa Innovations Corp', recurring: 31000, individual: 12400 },\n        { period: 'Q3 2023', client: 'Synthetics Solutions Ltd', recurring: 23000, individual: 84000 },\n        { period: 'Q3 2023', client: 'Optimal Systems Inc', recurring: 29000, individual: 104000 },\n        { period: 'Q3 2023', client: 'TechEdge Ventures', recurring: 3600, individual: 134000 },\n        { period: 'Q3 2023', client: 'Visionary Labs LLC', recurring: 41000, individual: 16400 },\n        { period: 'Q4 2023', client: 'TechNova Enterprises', recurring: 16500, individual: 56000 },\n        { period: 'Q4 2023', client: 'InnoDyne Solutions', recurring: 2150, individual: 76000 },\n        { period: 'Q4 2023', client: 'Unified Systems Ltd', recurring: 11500, individual: 46000 },\n        { period: 'Q4 2023', client: 'Vertex Dynamics Inc', recurring: 19500, individual: 6600 },\n        { period: 'Q4 2023', client: 'MacroWare Technologies', recurring: 26500, individual: 9600 },\n        { period: 'Q4 2023', client: 'Nexa Innovations Corp', recurring: 31500, individual: 126000 },\n        { period: 'Q4 2023', client: 'Synthetics Solutions Ltd', recurring: 23500, individual: 86000 },\n        { period: 'Q4 2023', client: 'Optimal Systems Inc', recurring: 29500, individual: 106000 },\n        { period: 'Q4 2023', client: 'TechEdge Ventures', recurring: 3650, individual: 136000 },\n        { period: 'Q4 2023', client: 'Visionary Labs LLC', recurring: 41500, individual: 166000 },\n    ];\n}\n","main.js":"let gridApi;\nlet chartRef;\n\nconst gridOptions = {\n  columnDefs: [\n    {\n      field: \"period\",\n      chartDataType: \"category\",\n      headerName: \"Financial Period\",\n      width: 150,\n    },\n    { field: \"client\", chartDataType: \"category\", headerName: \"Client name\" },\n    {\n      field: \"recurring\",\n      chartDataType: \"series\",\n      headerName: \"Recurring revenue\",\n    },\n    {\n      field: \"individual\",\n      chartDataType: \"series\",\n      headerName: \"Individual sales\",\n    },\n  ],\n  defaultColDef: {\n    flex: 1,\n    minWidth: 100,\n  },\n  popupParent: document.body,\n  cellSelection: true,\n  enableCharts: true,\n  chartToolPanelsDef: {\n    defaultToolPanel: \"settings\",\n  },\n  onGridReady: (params) => {\n    getData().then((rowData) => params.api.setGridOption(\"rowData\", rowData));\n  },\n  onFirstDataRendered,\n};\n\nfunction onFirstDataRendered(params) {\n  chartRef = params.api.createRangeChart({\n    chartContainer: document.querySelector(\"#myChart\"),\n    cellRange: {\n      columns: [\"period\", \"client\", \"recurring\", \"individual\"],\n    },\n    chartType: \"boxPlot\",\n  });\n}\n\nfunction updateChart(chartType) {\n  gridApi.updateChart({\n    type: \"rangeChartUpdate\",\n    chartId: `${chartRef.chartId}`,\n    chartType: chartType,\n  });\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(\n    gridDiv,\n    gridOptions,\n  ); /** DARK INTEGRATED START **/\n  const isInitialModeDark =\n    document.documentElement.dataset.agThemeMode?.includes(\"dark\");\n\n  const updateChartThemes = (isDark) => {\n    const themes = [\n      \"ag-default\",\n      \"ag-material\",\n      \"ag-sheets\",\n      \"ag-polychroma\",\n      \"ag-vivid\",\n    ];\n    const currentThemes = gridApi.getGridOption(\"chartThemes\");\n    const customTheme =\n      currentThemes &&\n      currentThemes.some((theme) => theme.startsWith(\"my-custom-theme\"));\n\n    let modifiedThemes = customTheme\n      ? isDark\n        ? [\"my-custom-theme-dark\", \"my-custom-theme-light\"]\n        : [\"my-custom-theme-light\", \"my-custom-theme-dark\"]\n      : Array.from(\n          new Set(themes.map((theme) => theme + (isDark ? \"-dark\" : \"\"))),\n        );\n\n    // updating the 'chartThemes' grid option will cause the chart to reactively update!\n    gridApi.setGridOption(\"chartThemes\", modifiedThemes);\n  };\n\n  // update chart themes when example first loads\n  let initialSet = false;\n  const maxTries = 5;\n  let tries = 0;\n  const trySetInitial = (delay) => {\n    if (gridApi) {\n      initialSet = true;\n      updateChartThemes(isInitialModeDark);\n    } else {\n      if (tries < maxTries) {\n        setTimeout(() => trySetInitial(), 250);\n        tries++;\n      }\n    }\n  };\n  trySetInitial(0);\n\n  const handleColorSchemeChange = (event) => {\n    const { darkMode } = event.detail;\n    updateChartThemes(darkMode);\n  };\n\n  // listen for user-triggered dark mode changes (not removing listener is fine here!)\n  document.addEventListener(\"color-scheme-change\", handleColorSchemeChange);\n  /** DARK INTEGRATED END **/\n});\n","index.html":"<div class=\"wrapper\">\n    <div class=\"button-container\">\n        <button onclick=\"updateChart('boxPlot')\">Box Plot</button>\n        <button onclick=\"updateChart('histogram')\">Histogram</button>\n        <button onclick=\"updateChart('rangeBar')\">Range Bar</button>\n        <button onclick=\"updateChart('rangeArea')\">Range Area</button>\n    </div>\n    <div id=\"myGrid\"></div>\n    <div id=\"myChart\"></div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0","ag-charts-community":"latest","ag-charts-enterprise":"latest"}}}