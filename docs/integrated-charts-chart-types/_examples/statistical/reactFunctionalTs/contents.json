{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":true,"entryFileName":"index.tsx","mainFileName":"index.tsx","styleFiles":[],"files":{"style.css":".wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n.button-container {\n    flex-wrap: wrap;\n}\n\n#myGrid {\n    flex: 1;\n}\n\n#myChart {\n    flex: 2;\n    min-height: 530px;\n}\n","data.tsx":"export async function getData(delay: number = 100): Promise<any[]> {\n    return new Promise((resolve) => setTimeout(() => resolve(generateData()), delay));\n}\n\nfunction generateData(): any[] {\n    return [\n        { period: 'Q1 2023', client: 'TechNova Enterprises', recurring: 15000, individual: 5000 },\n        { period: 'Q1 2023', client: 'InnoDyne Solutions', recurring: 2000, individual: 70000 },\n        { period: 'Q1 2023', client: 'Unified Systems Ltd', recurring: 10000, individual: 40000 },\n        { period: 'Q1 2023', client: 'Vertex Dynamics Inc', recurring: 1800, individual: 6000 },\n        { period: 'Q1 2023', client: 'MacroWare Technologies', recurring: 25000, individual: 90000 },\n        { period: 'Q1 2023', client: 'Nexa Innovations Corp', recurring: 30000, individual: 120000 },\n        { period: 'Q1 2023', client: 'Synthetics Solutions Ltd', recurring: 22000, individual: 8000 },\n        { period: 'Q1 2023', client: 'Optimal Systems Inc', recurring: 28000, individual: 100000 },\n        { period: 'Q1 2023', client: 'TechEdge Ventures', recurring: 3500, individual: 130000 },\n        { period: 'Q1 2023', client: 'Visionary Labs LLC', recurring: 40000, individual: 160000 },\n        { period: 'Q2 2023', client: 'TechNova Enterprises', recurring: 15500, individual: 52000 },\n        { period: 'Q2 2023', client: 'InnoDyne Solutions', recurring: 20500, individual: 7200 },\n        { period: 'Q2 2023', client: 'Unified Systems Ltd', recurring: 1050, individual: 42000 },\n        { period: 'Q2 2023', client: 'Vertex Dynamics Inc', recurring: 18500, individual: 62000 },\n        { period: 'Q2 2023', client: 'MacroWare Technologies', recurring: 25500, individual: 9200 },\n        { period: 'Q2 2023', client: 'Nexa Innovations Corp', recurring: 30500, individual: 122000 },\n        { period: 'Q2 2023', client: 'Synthetics Solutions Ltd', recurring: 22500, individual: 8200 },\n        { period: 'Q2 2023', client: 'Optimal Systems Inc', recurring: 28500, individual: 102000 },\n        { period: 'Q2 2023', client: 'TechEdge Ventures', recurring: 3550, individual: 132000 },\n        { period: 'Q2 2023', client: 'Visionary Labs LLC', recurring: 40500, individual: 162000 },\n        { period: 'Q3 2023', client: 'TechNova Enterprises', recurring: 16000, individual: 54000 },\n        { period: 'Q3 2023', client: 'InnoDyne Solutions', recurring: 21000, individual: 74000 },\n        { period: 'Q3 2023', client: 'Unified Systems Ltd', recurring: 11000, individual: 4400 },\n        { period: 'Q3 2023', client: 'Vertex Dynamics Inc', recurring: 19000, individual: 64000 },\n        { period: 'Q3 2023', client: 'MacroWare Technologies', recurring: 2600, individual: 94000 },\n        { period: 'Q3 2023', client: 'Nexa Innovations Corp', recurring: 31000, individual: 12400 },\n        { period: 'Q3 2023', client: 'Synthetics Solutions Ltd', recurring: 23000, individual: 84000 },\n        { period: 'Q3 2023', client: 'Optimal Systems Inc', recurring: 29000, individual: 104000 },\n        { period: 'Q3 2023', client: 'TechEdge Ventures', recurring: 3600, individual: 134000 },\n        { period: 'Q3 2023', client: 'Visionary Labs LLC', recurring: 41000, individual: 16400 },\n        { period: 'Q4 2023', client: 'TechNova Enterprises', recurring: 16500, individual: 56000 },\n        { period: 'Q4 2023', client: 'InnoDyne Solutions', recurring: 2150, individual: 76000 },\n        { period: 'Q4 2023', client: 'Unified Systems Ltd', recurring: 11500, individual: 46000 },\n        { period: 'Q4 2023', client: 'Vertex Dynamics Inc', recurring: 19500, individual: 6600 },\n        { period: 'Q4 2023', client: 'MacroWare Technologies', recurring: 26500, individual: 9600 },\n        { period: 'Q4 2023', client: 'Nexa Innovations Corp', recurring: 31500, individual: 126000 },\n        { period: 'Q4 2023', client: 'Synthetics Solutions Ltd', recurring: 23500, individual: 86000 },\n        { period: 'Q4 2023', client: 'Optimal Systems Inc', recurring: 29500, individual: 106000 },\n        { period: 'Q4 2023', client: 'TechEdge Ventures', recurring: 3650, individual: 136000 },\n        { period: 'Q4 2023', client: 'Visionary Labs LLC', recurring: 41500, individual: 166000 },\n    ];\n}\n","index.tsx":"\"use client\";\n\nimport React, {\n  useCallback,\n  useMemo,\n  useRef,\n  useState,\n  useEffect,\n  StrictMode,\n} from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"./style.css\";\nimport { AgChartsEnterpriseModule } from \"ag-charts-enterprise\";\nimport {\n  CellSelectionOptions,\n  ChartRef,\n  ChartToolPanelsDef,\n  ChartType,\n  ClientSideRowModelModule,\n  ColDef,\n  ColGroupDef,\n  FirstDataRenderedEvent,\n  GridApi,\n  GridOptions,\n  GridReadyEvent,\n  ModuleRegistry,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\nimport {\n  ColumnMenuModule,\n  ContextMenuModule,\n  IntegratedChartsModule,\n  RowGroupingModule,\n} from \"ag-grid-enterprise\";\nimport { getData } from \"./data\";\nModuleRegistry.registerModules([\n  ClientSideRowModelModule,\n  IntegratedChartsModule.with(AgChartsEnterpriseModule),\n  ColumnMenuModule,\n  ContextMenuModule,\n  RowGroupingModule,\n  ValidationModule /* Development Only */,\n]);\n\nlet chartRef: ChartRef;\n\nconst GridExample = () => {\n  const gridRef = useRef<AgGridReact>(null);\n  const containerStyle = useMemo(() => ({ width: \"100%\", height: \"100%\" }), []);\n  const gridStyle = useMemo(() => ({ height: \"100%\", width: \"100%\" }), []);\n\n  const [columnDefs, setColumnDefs] = useState<ColDef[]>([\n    {\n      field: \"period\",\n      chartDataType: \"category\",\n      headerName: \"Financial Period\",\n      width: 150,\n    },\n    { field: \"client\", chartDataType: \"category\", headerName: \"Client name\" },\n    {\n      field: \"recurring\",\n      chartDataType: \"series\",\n      headerName: \"Recurring revenue\",\n    },\n    {\n      field: \"individual\",\n      chartDataType: \"series\",\n      headerName: \"Individual sales\",\n    },\n  ]);\n  const defaultColDef = useMemo<ColDef>(() => {\n    return {\n      flex: 1,\n      minWidth: 100,\n    };\n  }, []);\n  const popupParent = useMemo<HTMLElement | null>(() => {\n    return document.body;\n  }, []);\n  const chartToolPanelsDef = useMemo<ChartToolPanelsDef>(() => {\n    return {\n      defaultToolPanel: \"settings\",\n    };\n  }, []);\n\n  const onGridReady = useCallback((params: GridReadyEvent) => {\n    getData().then((rowData) => params.api.setGridOption(\"rowData\", rowData));\n  }, []);\n  /** DARK INTEGRATED START **/ const [tick, setTick] = useState(0);\n  useEffect(() => {\n    setTick(1);\n    const isInitialModeDark =\n      document.documentElement.dataset.agThemeMode?.includes(\"dark\");\n\n    // update chart themes based on dark mode status\n    const updateChartThemes = (isDark: boolean): void => {\n      const themes: string[] = [\n        \"ag-default\",\n        \"ag-material\",\n        \"ag-sheets\",\n        \"ag-polychroma\",\n        \"ag-vivid\",\n      ];\n      const currentThemes = gridRef.current?.api.getGridOption(\"chartThemes\");\n      const customTheme =\n        currentThemes &&\n        currentThemes.some((theme) => theme.startsWith(\"my-custom-theme\"));\n\n      let modifiedThemes: string[] = customTheme\n        ? isDark\n          ? [\"my-custom-theme-dark\", \"my-custom-theme-light\"]\n          : [\"my-custom-theme-light\", \"my-custom-theme-dark\"]\n        : Array.from(\n            new Set(themes.map((theme) => theme + (isDark ? \"-dark\" : \"\"))),\n          );\n\n      // updating the 'chartThemes' grid option will cause the chart to reactively update!\n      gridRef.current?.api.setGridOption(\"chartThemes\", modifiedThemes);\n    };\n\n    // update chart themes when example first loads\n    let initialSet = false;\n    const maxTries = 5;\n    let tries = 0;\n    const trySetInitial = (delay) => {\n      if (gridRef.current?.api) {\n        initialSet = true;\n        updateChartThemes(isInitialModeDark);\n      } else {\n        if (tries < maxTries) {\n          setTimeout(() => trySetInitial(), 250);\n          tries++;\n        }\n      }\n    };\n    trySetInitial(0);\n\n    interface ColorSchemeChangeEventDetail {\n      darkMode: boolean;\n    }\n\n    // event handler for color scheme changes\n    const handleColorSchemeChange = (\n      event: CustomEvent<ColorSchemeChangeEventDetail>,\n    ): void => {\n      const { darkMode } = event.detail;\n      updateChartThemes(darkMode);\n    };\n\n    // listen for user-triggered dark mode changes (not removing listener is fine here!)\n    document.addEventListener(\n      \"color-scheme-change\",\n      handleColorSchemeChange as EventListener,\n    );\n  }, [gridRef.current]); /** DARK INTEGRATED END **/\n\n  const onFirstDataRendered = useCallback((params: FirstDataRenderedEvent) => {\n    chartRef = params.api.createRangeChart({\n      chartContainer: document.querySelector(\"#myChart\") as any,\n      cellRange: {\n        columns: [\"period\", \"client\", \"recurring\", \"individual\"],\n      },\n      chartType: \"boxPlot\",\n    })!;\n  }, []);\n\n  const updateChart = useCallback(\n    (chartType: ChartType) => {\n      gridRef.current!.api.updateChart({\n        type: \"rangeChartUpdate\",\n        chartId: `${chartRef.chartId}`,\n        chartType: chartType,\n      });\n    },\n    [chartRef],\n  );\n\n  return (\n    <div style={containerStyle}>\n      <div className=\"wrapper\">\n        <div className=\"button-container\">\n          <button onClick={() => updateChart(\"boxPlot\")}>Box Plot</button>\n          <button onClick={() => updateChart(\"histogram\")}>Histogram</button>\n          <button onClick={() => updateChart(\"rangeBar\")}>Range Bar</button>\n          <button onClick={() => updateChart(\"rangeArea\")}>Range Area</button>\n        </div>\n\n        <div style={gridStyle}>\n          <AgGridReact\n            ref={gridRef}\n            columnDefs={columnDefs}\n            defaultColDef={defaultColDef}\n            popupParent={popupParent}\n            cellSelection={true}\n            enableCharts={true}\n            chartToolPanelsDef={chartToolPanelsDef}\n            onGridReady={onGridReady}\n            onFirstDataRendered={onFirstDataRendered}\n          />\n        </div>\n        <div id=\"myChart\"></div>\n      </div>\n    </div>\n  );\n};\n\nconst root = createRoot(document.getElementById(\"root\")!);\nroot.render(\n  <StrictMode>\n    <GridExample />\n  </StrictMode>,\n);\n","index.html":"<div class=\"wrapper\">\n    <div class=\"button-container\">\n        <button onclick=\"updateChart('boxPlot')\">Box Plot</button>\n        <button onclick=\"updateChart('histogram')\">Histogram</button>\n        <button onclick=\"updateChart('rangeBar')\">Range Bar</button>\n        <button onclick=\"updateChart('rangeArea')\">Range Area</button>\n    </div>\n    <div id=\"myGrid\"></div>\n    <div id=\"myChart\"></div>\n</div>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            jsx: 'react',\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            // react\n            react: 'npm:react@18.2.0',\n            'react-dom': 'npm:react-dom@18.2.0',\n            'react-dom/client': 'npm:react-dom@18.2.0',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            css: {},\n            react: {\n                main: './umd/react.production.min.js',\n            },\n            'react-dom': {\n                main: './umd/react-dom.production.min.js',\n            },\n            'react-dom/server': {\n                main: '../umd/react-dom-server.browser.production.min.js',\n            },\n            app: {\n                main: './index.tsx',\n                defaultExtension: 'tsx',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"react":"18","react-dom":"18","@types/react":"18","@types/react-dom":"18","ag-grid-react":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0","ag-charts-community":"latest","ag-charts-enterprise":"latest"}}}