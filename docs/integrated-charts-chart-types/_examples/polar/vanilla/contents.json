{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":true,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["data.js","main.js"],"styleFiles":["style.css"],"files":{"style.css":".wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n.button-container {\n    flex-wrap: wrap;\n}\n\n#myGrid {\n    flex: 1;\n}\n\n#myChart {\n    flex: 2;\n    min-height: 530px;\n}\n","data.js":"async function getData(delay = 100) {\n    return new Promise((resolve) => setTimeout(() => resolve(generateData()), delay));\n}\n\nfunction generateData() {\n    return [\n        { division: 'Sales', recurring: 485829, individual: 263971 },\n        { division: 'Finance', recurring: 291245, individual: 46821 },\n        { division: 'Consultancy', recurring: 315284, individual: 216473 },\n        { division: 'Operations', recurring: 154319, individual: 29867 },\n        { division: 'Media', recurring: 215284, individual: 61473 },\n    ];\n}\n","main.js":"let gridApi;\nlet chartRef;\n\nconst gridOptions = {\n  columnDefs: [\n    { field: \"division\", chartDataType: \"category\", width: 150 },\n    {\n      field: \"recurring\",\n      chartDataType: \"series\",\n      headerName: \"Recurring revenue\",\n    },\n    {\n      field: \"individual\",\n      chartDataType: \"series\",\n      headerName: \"Individual sales\",\n    },\n  ],\n  defaultColDef: {\n    flex: 1,\n    minWidth: 100,\n  },\n  popupParent: document.body,\n  cellSelection: true,\n  enableCharts: true,\n  chartToolPanelsDef: {\n    defaultToolPanel: \"settings\",\n  },\n  onGridReady: (params) => {\n    getData().then((rowData) => params.api.setGridOption(\"rowData\", rowData));\n  },\n  onFirstDataRendered,\n};\n\nfunction onFirstDataRendered(params) {\n  chartRef = params.api.createRangeChart({\n    chartContainer: document.querySelector(\"#myChart\"),\n    cellRange: {\n      columns: [\"division\", \"recurring\", \"individual\"],\n    },\n    chartType: \"radarLine\",\n  });\n}\n\nfunction updateChart(chartType) {\n  gridApi.updateChart({\n    type: \"rangeChartUpdate\",\n    chartId: `${chartRef.chartId}`,\n    chartType: chartType,\n  });\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(\n    gridDiv,\n    gridOptions,\n  ); /** DARK INTEGRATED START **/\n  const isInitialModeDark =\n    document.documentElement.dataset.agThemeMode?.includes(\"dark\");\n\n  const updateChartThemes = (isDark) => {\n    const themes = [\n      \"ag-default\",\n      \"ag-material\",\n      \"ag-sheets\",\n      \"ag-polychroma\",\n      \"ag-vivid\",\n    ];\n    const currentThemes = gridApi.getGridOption(\"chartThemes\");\n    const customTheme =\n      currentThemes &&\n      currentThemes.some((theme) => theme.startsWith(\"my-custom-theme\"));\n\n    let modifiedThemes = customTheme\n      ? isDark\n        ? [\"my-custom-theme-dark\", \"my-custom-theme-light\"]\n        : [\"my-custom-theme-light\", \"my-custom-theme-dark\"]\n      : Array.from(\n          new Set(themes.map((theme) => theme + (isDark ? \"-dark\" : \"\"))),\n        );\n\n    // updating the 'chartThemes' grid option will cause the chart to reactively update!\n    gridApi.setGridOption(\"chartThemes\", modifiedThemes);\n  };\n\n  // update chart themes when example first loads\n  let initialSet = false;\n  const maxTries = 5;\n  let tries = 0;\n  const trySetInitial = (delay) => {\n    if (gridApi) {\n      initialSet = true;\n      updateChartThemes(isInitialModeDark);\n    } else {\n      if (tries < maxTries) {\n        setTimeout(() => trySetInitial(), 250);\n        tries++;\n      }\n    }\n  };\n  trySetInitial(0);\n\n  const handleColorSchemeChange = (event) => {\n    const { darkMode } = event.detail;\n    updateChartThemes(darkMode);\n  };\n\n  // listen for user-triggered dark mode changes (not removing listener is fine here!)\n  document.addEventListener(\"color-scheme-change\", handleColorSchemeChange);\n  /** DARK INTEGRATED END **/\n});\n","index.html":"<div class=\"wrapper\">\n    <div class=\"button-container\">\n        <button onclick=\"updateChart('radarLine')\">Radar Line</button>\n        <button onclick=\"updateChart('radarArea')\">Radar Area</button>\n        <button onclick=\"updateChart('nightingale')\">Nightingale</button>\n        <button onclick=\"updateChart('radialColumn')\">Radial Column</button>\n        <button onclick=\"updateChart('radialBar')\">Radial Bar</button>\n    </div>\n    <div id=\"myGrid\"></div>\n    <div id=\"myChart\"></div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0","ag-charts-community":"latest","ag-charts-enterprise":"latest"}}}