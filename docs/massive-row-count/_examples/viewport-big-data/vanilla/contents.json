{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":[],"files":{"main.js":"const columnDefs = [\n  {\n    headerName: \"ID\",\n    field: \"id\",\n  },\n  {\n    headerName: \"Expected Position\",\n    valueGetter: '\"translateY(\" + node.rowIndex * 100 + \"px)\"',\n  },\n\n  {\n    field: \"a\",\n  },\n  {\n    field: \"b\",\n  },\n  {\n    field: \"c\",\n  },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n  // debug: true,\n  rowHeight: 100,\n  columnDefs: columnDefs,\n  rowModelType: \"viewport\",\n  viewportDatasource: createViewportDatasource(),\n};\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n});\n\nfunction createViewportDatasource() {\n  let initParams;\n  return {\n    init: (params) => {\n      initParams = params;\n      const oneMillion = 1000 * 1000;\n      params.setRowCount(oneMillion);\n    },\n    setViewportRange(firstRow, lastRow) {\n      const rowData = {};\n\n      for (let rowIndex = firstRow; rowIndex <= lastRow; rowIndex++) {\n        const item = {};\n        item.id = rowIndex;\n        item.a = \"A-\" + rowIndex;\n        item.b = \"B-\" + rowIndex;\n        item.c = \"C-\" + rowIndex;\n        rowData[rowIndex] = item;\n      }\n\n      initParams.setRowData(rowData);\n    },\n    destroy: () => {},\n  };\n}\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}