{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":[],"files":{"main.js":"const columnDefs = [\n  { headerName: \"Athlete\", field: \"athlete\", width: 150 },\n  { headerName: \"Age\", field: \"age\", width: 90 },\n  { headerName: \"Country\", field: \"country\", width: 120 },\n  { headerName: \"Year\", field: \"year\", width: 90 },\n  { headerName: \"Date\", field: \"date\", width: 110 },\n  { headerName: \"Sport\", field: \"sport\", width: 110 },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n  defaultColDef: {\n    editable: true,\n  },\n  columnDefs,\n  rowSelection: {\n    mode: \"multiRow\",\n    checkboxes: false,\n    headerCheckbox: false,\n    enableClickSelection: true,\n    copySelectedRows: true,\n  },\n  processDataFromClipboard,\n};\n\nfunction processDataFromClipboard(params) {\n  const data = [...params.data];\n  const emptyLastRow =\n    data[data.length - 1][0] === \"\" && data[data.length - 1].length === 1;\n\n  if (emptyLastRow) {\n    data.splice(data.length - 1, 1);\n  }\n\n  const lastIndex = params.api.getDisplayedRowCount() - 1;\n  const focusedCell = params.api.getFocusedCell();\n  const focusedIndex = focusedCell.rowIndex;\n\n  if (focusedIndex + data.length - 1 > lastIndex) {\n    const resultLastIndex = focusedIndex + (data.length - 1);\n    const numRowsToAdd = resultLastIndex - lastIndex;\n\n    const rowsToAdd = [];\n    for (let i = 0; i < numRowsToAdd; i++) {\n      const index = data.length - 1;\n      const row = data.slice(index, index + 1)[0];\n\n      // Create row object\n      const rowObject = {};\n      let currentColumn = focusedCell.column;\n      row.forEach((item) => {\n        if (!currentColumn) {\n          return;\n        }\n        rowObject[currentColumn.colDef.field] = item;\n        currentColumn = params.api.getDisplayedColAfter(currentColumn);\n      });\n\n      rowsToAdd.push(rowObject);\n    }\n\n    params.api.applyTransaction({ add: rowsToAdd });\n  }\n\n  return data;\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then((data) => gridApi.setGridOption(\"rowData\", data.slice(0, 8)));\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}