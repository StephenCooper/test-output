{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":[],"files":{"main.js":"let gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    { field: \"athlete\", minWidth: 160 },\n    { field: \"age\" },\n    { field: \"country\", minWidth: 140 },\n    { field: \"year\" },\n    { field: \"date\", minWidth: 140 },\n    { field: \"sport\", minWidth: 160 },\n    { field: \"gold\" },\n    { field: \"silver\" },\n    { field: \"bronze\" },\n    { field: \"total\" },\n  ],\n  defaultColDef: {\n    flex: 1,\n    minWidth: 100,\n    editable: true,\n  },\n  getRowId: (params) => String(params.data.id),\n\n  cellSelection: true,\n  readOnlyEdit: true,\n  onCellEditRequest: onCellEditRequest,\n};\n\nlet rowImmutableStore;\n\nfunction onCellEditRequest(event) {\n  const data = event.data;\n  const field = event.colDef.field;\n  const newValue = event.newValue;\n\n  const oldItem = rowImmutableStore.find((row) => row.id === data.id);\n\n  if (!oldItem || !field) {\n    return;\n  }\n\n  const newItem = { ...oldItem };\n\n  newItem[field] = newValue;\n\n  console.log(\"onCellEditRequest, updating \" + field + \" to \" + newValue);\n\n  rowImmutableStore = rowImmutableStore.map((oldItem) =>\n    oldItem.id == newItem.id ? newItem : oldItem,\n  );\n  gridApi.setGridOption(\"rowData\", rowImmutableStore);\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then((data) => {\n      data.forEach((item, index) => (item.id = index));\n      rowImmutableStore = data;\n      gridApi.setGridOption(\"rowData\", rowImmutableStore);\n    });\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n","interfaces.ts":"\nexport interface IOlympicDataWithId extends IOlympicData {\n    id: number;\n}\n\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}