{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":[],"files":{"main.js":"let gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    { field: \"athlete\", minWidth: 220 },\n    { field: \"country\", minWidth: 200 },\n    { field: \"year\" },\n    { field: \"sport\", minWidth: 200 },\n    { field: \"gold\" },\n    { field: \"silver\" },\n    { field: \"bronze\" },\n  ],\n\n  defaultColDef: {\n    flex: 1,\n    minWidth: 100,\n    sortable: false,\n  },\n\n  // use the server-side row model instead of the default 'client-side'\n  rowModelType: \"serverSide\",\n};\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then(function (data) {\n      // setup the fake server with entire dataset\n      const fakeServer = createFakeServer(data);\n\n      // create datasource with a reference to the fake server\n      const datasource = createServerSideDatasource(fakeServer);\n\n      // register the datasource with the grid\n      gridApi.setGridOption(\"serverSideDatasource\", datasource);\n    });\n});\n\nfunction createServerSideDatasource(server) {\n  return {\n    getRows: (params) => {\n      console.log(\"[Datasource] - rows requested by grid: \", params.request);\n\n      // get data for request from our fake server\n      const response = server.getData(params.request);\n\n      // simulating real server call with a 500ms delay\n      setTimeout(() => {\n        if (response.success) {\n          // supply rows for requested block to grid\n          params.success({ rowData: response.rows });\n        } else {\n          params.fail();\n        }\n      }, 500);\n    },\n  };\n}\n\nfunction createFakeServer(allData) {\n  return {\n    getData: (request) => {\n      // in this simplified fake server all rows are contained in an array\n      const requestedRows = allData.slice(request.startRow, request.endRow);\n\n      return {\n        success: true,\n        rows: requestedRows,\n      };\n    },\n  };\n}\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}