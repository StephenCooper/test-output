{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["fakeServer.js","main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n","fakeServer.js":"// This fake server uses http://alasql.org/ to mimic how a real server\n// might generate sql queries from the Server-Side Row Model request.\n// To keep things simple it does the bare minimum to support the example.\nfunction FakeServer(allData) {\n    alasql.options.cache = false;\n\n    return {\n        getData: function (request) {\n            const results = executeQuery(request);\n\n            return {\n                success: true,\n                rows: results,\n                lastRow: getLastRowIndex(request),\n            };\n        },\n    };\n\n    function executeQuery(request) {\n        const sql = buildSql(request);\n\n        console.log('[FakeServer] - about to execute query:', sql);\n\n        return alasql(sql, [allData]);\n    }\n\n    function buildSql(request) {\n        return (\n            selectSql(request) +\n            ' FROM ?' +\n            whereSql(request) +\n            groupBySql(request) +\n            orderBySql(request) +\n            limitSql(request)\n        );\n    }\n\n    function selectSql(request) {\n        const rowGroupCols = request.rowGroupCols;\n        const valueCols = request.valueCols;\n        const groupKeys = request.groupKeys;\n\n        if (isDoingGrouping(rowGroupCols, groupKeys)) {\n            const rowGroupCol = rowGroupCols[groupKeys.length];\n            const colsToSelect = [rowGroupCol.id];\n\n            valueCols.forEach(function (valueCol) {\n                colsToSelect.push(valueCol.aggFunc + '(' + valueCol.id + ') AS ' + valueCol.id);\n            });\n\n            return 'SELECT ' + colsToSelect.join(', ');\n        }\n\n        return 'SELECT *';\n    }\n\n    function whereSql(request) {\n        const rowGroups = request.rowGroupCols;\n        const groupKeys = request.groupKeys;\n        const whereParts = [];\n\n        if (groupKeys) {\n            groupKeys.forEach(function (key, i) {\n                const value = typeof key === 'string' ? \"'\" + key + \"'\" : key;\n\n                whereParts.push(rowGroups[i].id + ' = ' + value);\n            });\n        }\n\n        const filterModel = request.filterModel;\n\n        if (filterModel) {\n            Object.keys(filterModel).forEach(function (key) {\n                const item = filterModel[key];\n\n                switch (item.filterType) {\n                    case 'text':\n                        whereParts.push(createFilterSql(textFilterMapper, key, item));\n                        break;\n                    case 'number':\n                        whereParts.push(createFilterSql(numberFilterMapper, key, item));\n                        break;\n                    default:\n                        console.log('unknown filter type: ' + item.filterType);\n                        break;\n                }\n            });\n        }\n\n        if (whereParts.length > 0) {\n            return ' WHERE ' + whereParts.join(' AND ');\n        }\n\n        return '';\n    }\n\n    function createFilterSql(mapper, key, item) {\n        if (item.operator) {\n            const condition1 = mapper(key, item.condition1);\n            const condition2 = mapper(key, item.condition2);\n\n            return '(' + condition1 + ' ' + item.operator + ' ' + condition2 + ')';\n        }\n\n        return mapper(key, item);\n    }\n\n    function textFilterMapper(key, item) {\n        switch (item.type) {\n            case 'equals':\n                return key + \" = '\" + item.filter + \"'\";\n            case 'notEqual':\n                return key + \" != '\" + item.filter + \"'\";\n            case 'contains':\n                return key + \" LIKE '%\" + item.filter + \"%'\";\n            case 'notContains':\n                return key + \" NOT LIKE '%\" + item.filter + \"%'\";\n            case 'startsWith':\n                return key + \" LIKE '\" + item.filter + \"%'\";\n            case 'endsWith':\n                return key + \" LIKE '%\" + item.filter + \"'\";\n            case 'blank':\n                return key + ' IS NULL or ' + key + \" = ''\";\n            case 'notBlank':\n                return key + ' IS NOT NULL and ' + key + \" != ''\";\n            default:\n                console.log('unknown text filter type: ' + item.type);\n        }\n    }\n\n    function numberFilterMapper(key, item) {\n        switch (item.type) {\n            case 'equals':\n                return key + ' = ' + item.filter;\n            case 'notEqual':\n                return key + ' != ' + item.filter;\n            case 'greaterThan':\n                return key + ' > ' + item.filter;\n            case 'greaterThanOrEqual':\n                return key + ' >= ' + item.filter;\n            case 'lessThan':\n                return key + ' < ' + item.filter;\n            case 'lessThanOrEqual':\n                return key + ' <= ' + item.filter;\n            case 'inRange':\n                return '(' + key + ' >= ' + item.filter + ' and ' + key + ' <= ' + item.filterTo + ')';\n            case 'blank':\n                return key + ' IS NULL';\n            case 'notBlank':\n                return key + ' IS NOT NULL';\n            default:\n                console.log('unknown number filter type: ' + item.type);\n        }\n    }\n\n    function groupBySql(request) {\n        const rowGroupCols = request.rowGroupCols;\n        const groupKeys = request.groupKeys;\n\n        if (isDoingGrouping(rowGroupCols, groupKeys)) {\n            const rowGroupCol = rowGroupCols[groupKeys.length];\n\n            return ' GROUP BY ' + rowGroupCol.id + ' HAVING count(*) > 0';\n        }\n\n        return '';\n    }\n\n    function orderBySql(request) {\n        const sortModel = request.sortModel;\n\n        if (sortModel.length === 0) return '';\n\n        const sorts = sortModel.map(function (s) {\n            return s.colId + ' ' + s.sort.toUpperCase();\n        });\n\n        return ' ORDER BY ' + sorts.join(', ');\n    }\n\n    function limitSql(request) {\n        if (request.endRow == undefined || request.startRow == undefined) {\n            return '';\n        }\n        const blockSize = request.endRow - request.startRow;\n\n        return ' LIMIT ' + blockSize + ' OFFSET ' + request.startRow;\n    }\n\n    function isDoingGrouping(rowGroupCols, groupKeys) {\n        // we are not doing grouping if at the lowest level\n        return rowGroupCols.length > groupKeys.length;\n    }\n\n    function getLastRowIndex(request) {\n        return executeQuery({ ...request, startRow: undefined, endRow: undefined }).length;\n    }\n}\n","main.js":"let gridApi;\nconst gridOptions = {\n  columnDefs: [\n    { field: \"country\", enableRowGroup: true, rowGroup: true, hide: true },\n    { field: \"year\", enableRowGroup: true, rowGroup: true, hide: true },\n    { field: \"athlete\", hide: true },\n    { field: \"sport\", enableRowGroup: true, filter: \"agTextColumnFilter\" },\n    { field: \"gold\", aggFunc: \"sum\", filter: \"agNumberColumnFilter\" },\n    { field: \"silver\", aggFunc: \"sum\", filter: \"agNumberColumnFilter\" },\n    { field: \"bronze\", aggFunc: \"sum\", filter: \"agNumberColumnFilter\" },\n  ],\n  defaultColDef: {\n    floatingFilter: true,\n    flex: 1,\n    minWidth: 120,\n  },\n  getRowId: (params) => {\n    if (params.data.id != null) {\n      return \"leaf-\" + params.data.id;\n    }\n    const rowGroupCols = params.api.getRowGroupColumns();\n    const rowGroupColIds = rowGroupCols.map((col) => col.getId()).join(\"-\");\n    const thisGroupCol = rowGroupCols[params.level];\n    return (\n      \"group-\" +\n      rowGroupColIds +\n      \"-\" +\n      (params.parentKeys || []).join(\"-\") +\n      params.data[thisGroupCol.getColDef().field]\n    );\n  },\n  isServerSideGroupOpenByDefault: (params) => {\n    return (\n      params.rowNode.key === \"United States\" ||\n      String(params.rowNode.key) === \"2004\"\n    );\n  },\n  onFirstDataRendered: (params) => {\n    params.api.setServerSideSelectionState({\n      selectAllChildren: true,\n      toggledNodes: [\n        {\n          nodeId: \"group-country-year-United States\",\n          selectAllChildren: false,\n          toggledNodes: [\n            {\n              nodeId: \"group-country-year-United States2004\",\n              selectAllChildren: true,\n            },\n          ],\n        },\n      ],\n    });\n  },\n  autoGroupColumnDef: {\n    field: \"athlete\",\n    flex: 1,\n    minWidth: 240,\n  },\n\n  // use the server-side row model\n  rowModelType: \"serverSide\",\n\n  // allow multiple row selections\n  rowSelection: {\n    mode: \"multiRow\",\n    groupSelects: \"descendants\",\n  },\n  rowGroupPanelShow: \"always\",\n\n  suppressAggFuncInHeader: true,\n};\n\nlet selectionState = {\n  selectAllChildren: false,\n  toggledNodes: [],\n};\n\nfunction saveSelectionState() {\n  selectionState = gridApi.getServerSideSelectionState();\n  console.log(JSON.stringify(selectionState, null, 2));\n}\n\nfunction loadSelectionState() {\n  gridApi.setServerSideSelectionState(selectionState);\n}\n\nfunction clearSelectionState() {\n  gridApi.setServerSideSelectionState({\n    selectAllChildren: false,\n    toggledNodes: [],\n  });\n}\n\nfunction getServerSideDatasource(server) {\n  return {\n    getRows: (params) => {\n      console.log(\"[Datasource] - rows requested by grid: \", params.request);\n\n      const response = server.getData(params.request);\n\n      // adding delay to simulate real server call\n      setTimeout(() => {\n        if (response.success) {\n          // call the success callback\n          params.success({\n            rowData: response.rows,\n            rowCount: response.lastRow,\n          });\n        } else {\n          // inform the grid request failed\n          params.fail();\n        }\n      }, 200);\n    },\n  };\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then(function (data) {\n      // assign a unique ID to each data item\n      data.forEach(function (item, index) {\n        item.id = index;\n      });\n\n      // setup the fake server with entire dataset\n      const fakeServer = new FakeServer(data);\n\n      // create datasource with a reference to the fake server\n      const datasource = getServerSideDatasource(fakeServer);\n\n      // register the datasource with the grid\n      gridApi.setGridOption(\"serverSideDatasource\", datasource);\n    });\n});\n","index.html":"<div class=\"example-wrapper\">\n    <div style=\"margin-bottom: 5px\">\n        <button onclick=\"saveSelectionState()\">Save Selection</button>\n        <button onclick=\"loadSelectionState()\">Load Selection</button>\n        <button onclick=\"clearSelectionState()\">Clear Selection</button>\n    </div>\n    <div id=\"myGrid\"></div>\n</div>\n","interfaces.ts":"\nexport interface IOlympicDataWithId extends IOlympicData {\n    id: number;\n}\n\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}},"extras":["alasql"]}