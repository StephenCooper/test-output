{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["data.js","fakeServer.js","main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n","data.js":"const data = [\n    {\n        product: 'Palm Oil',\n        portfolio: 'Aggressive',\n        book: 'GL-62472',\n        tradeId: 0,\n        current: 23558,\n        previous: 27014,\n    },\n    {\n        product: 'Palm Oil',\n        portfolio: 'Aggressive',\n        book: 'GL-62472',\n        tradeId: 1,\n        current: 92080,\n        previous: 97460,\n    },\n    {\n        product: 'Palm Oil',\n        portfolio: 'Hybrid',\n        book: 'GL-62473',\n        tradeId: 2,\n        current: 1352,\n        previous: 5835,\n    },\n    {\n        product: 'Palm Oil',\n        portfolio: 'Hybrid',\n        book: 'GL-62473',\n        tradeId: 3,\n        current: 87685,\n        previous: 91535,\n    },\n    {\n        product: 'Palm Oil',\n        portfolio: 'Defensive',\n        book: 'GL-62474',\n        tradeId: 4,\n        current: 25263,\n        previous: 26374,\n    },\n    {\n        product: 'Palm Oil',\n        portfolio: 'Defensive',\n        book: 'GL-62474',\n        tradeId: 5,\n        current: 65201,\n        previous: 69745,\n    },\n    {\n        product: 'Palm Oil',\n        portfolio: 'Income',\n        book: 'GL-62475',\n        tradeId: 6,\n        current: 48405,\n        previous: 50367,\n    },\n    {\n        product: 'Palm Oil',\n        portfolio: 'Income',\n        book: 'GL-62475',\n        tradeId: 7,\n        current: 65361,\n        previous: 64564,\n    },\n    {\n        product: 'Palm Oil',\n        portfolio: 'Speculative',\n        book: 'GL-62476',\n        tradeId: 8,\n        current: 94747,\n        previous: 94067,\n    },\n    {\n        product: 'Palm Oil',\n        portfolio: 'Speculative',\n        book: 'GL-62476',\n        tradeId: 9,\n        current: 28967,\n        previous: 32447,\n    },\n];\n\nlet currentServerRecordId = data.length;\nfunction createRowOnServer(portfolio, product, book) {\n    const groupDidExist = data.some((record) => record.portfolio === 'Aggressive');\n    const newRecord = {\n        tradeId: ++currentServerRecordId,\n        portfolio: portfolio,\n        product: product,\n        book: book,\n        current: 0,\n        previous: 0,\n    };\n    data.push(newRecord);\n\n    return {\n        success: true,\n        newGroupCreated: !groupDidExist,\n        newRecord: newRecord,\n    };\n}\n","fakeServer.js":"function FakeServer(data) {\n    alasql.options.cache = false;\n\n    return {\n        getData: function (request) {\n            const results = executeQuery(request);\n\n            return {\n                success: true,\n                rows: results,\n            };\n        },\n    };\n\n    function executeQuery(request) {\n        const groupByResult = executeRowGroupQuery(request);\n\n        return groupByResult;\n    }\n\n    function executeRowGroupQuery(request) {\n        const groupByQuery = buildGroupBySql(request);\n\n        console.log('[FakeServer] - about to execute row group query:', groupByQuery);\n\n        return alasql(groupByQuery, [data]);\n    }\n\n    function buildGroupBySql(request) {\n        return (\n            selectSql(request) +\n            ' FROM ?' +\n            whereSql(request) +\n            groupBySql(request) +\n            orderBySql(request) +\n            limitSql(request)\n        );\n    }\n\n    function selectSql(request) {\n        const rowGroupCols = request.rowGroupCols;\n        const valueCols = request.valueCols;\n        const groupKeys = request.groupKeys;\n\n        if (isDoingGrouping(rowGroupCols, groupKeys)) {\n            const rowGroupCol = rowGroupCols[groupKeys.length];\n            const colsToSelect = [rowGroupCol.id];\n\n            valueCols.forEach(function (valueCol) {\n                colsToSelect.push(valueCol.aggFunc + '(' + valueCol.id + ') AS ' + valueCol.id);\n            });\n\n            return 'SELECT ' + colsToSelect.join(', ');\n        }\n\n        return 'SELECT *';\n    }\n\n    function whereSql(request) {\n        const rowGroups = request.rowGroupCols;\n        const groupKeys = request.groupKeys;\n        const whereParts = [];\n\n        if (groupKeys) {\n            groupKeys.forEach(function (key, i) {\n                const value = typeof key === 'string' ? \"'\" + key + \"'\" : key;\n\n                whereParts.push(rowGroups[i].id + ' = ' + value);\n            });\n        }\n\n        if (whereParts.length > 0) {\n            return ' WHERE ' + whereParts.join(' AND ');\n        }\n\n        return '';\n    }\n\n    function groupBySql(request) {\n        const rowGroupCols = request.rowGroupCols;\n        const groupKeys = request.groupKeys;\n\n        if (isDoingGrouping(rowGroupCols, groupKeys)) {\n            const rowGroupCol = rowGroupCols[groupKeys.length];\n\n            return ' GROUP BY ' + rowGroupCol.id + ' HAVING count(*) > 0';\n        }\n\n        return '';\n    }\n\n    function orderBySql(request) {\n        const sortModel = request.sortModel;\n\n        if (sortModel.length === 0) return '';\n\n        const sorts = sortModel.map(function (s) {\n            return s.colId + ' ' + s.sort.toUpperCase();\n        });\n\n        return ' ORDER BY ' + sorts.join(', ');\n    }\n\n    function limitSql(request) {\n        if (request.endRow == undefined || request.startRow == undefined) {\n            return '';\n        }\n        const blockSize = request.endRow - request.startRow;\n\n        return ' LIMIT ' + blockSize + ' OFFSET ' + request.startRow;\n    }\n\n    function isDoingGrouping(rowGroupCols, groupKeys) {\n        // we are not doing grouping if at the lowest level\n        return rowGroupCols.length > groupKeys.length;\n    }\n\n    function getLastRowIndex(request, results) {\n        if (!results || results.length === 0) {\n            return null;\n        }\n        if (request.endRow == undefined || request.startRow == undefined) {\n            return results.length;\n        }\n        const currentLastRow = request.startRow + results.length;\n\n        return currentLastRow <= request.endRow ? currentLastRow : -1;\n    }\n}\n\n// IE Workaround - as templates literals are not supported\nfunction interpolate(str, o) {\n    return str.replace(/{([^{}]*)}/g, function (a, b) {\n        const r = o[b];\n        return typeof r === 'string' || typeof r === 'number' ? r : a;\n    });\n}\n","main.js":"let gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    { field: \"portfolio\", hide: true, rowGroup: true },\n    { field: \"book\" },\n    { field: \"previous\" },\n    { field: \"current\" },\n  ],\n  defaultColDef: {\n    flex: 1,\n    minWidth: 100,\n    enableCellChangeFlash: true,\n  },\n  autoGroupColumnDef: {\n    minWidth: 220,\n    field: \"tradeId\",\n  },\n  isServerSideGroupOpenByDefault: (params) => {\n    return (\n      params.rowNode.key === \"Aggressive\" || params.rowNode.key === \"Hybrid\"\n    );\n  },\n  getRowId: (params) => {\n    if (params.level === 0) {\n      return params.data.portfolio;\n    }\n    return String(params.data.tradeId);\n  },\n  onGridReady: (params) => {\n    // setup the fake server\n    const server = FakeServer(data);\n\n    // create datasource with a reference to the fake server\n    const datasource = getServerSideDatasource(server);\n\n    // register the datasource with the grid\n    params.api.setGridOption(\"serverSideDatasource\", datasource);\n  },\n\n  rowModelType: \"serverSide\",\n\n  rowSelection: {\n    mode: \"multiRow\",\n    groupSelects: \"descendants\",\n  },\n};\n\nfunction getServerSideDatasource(server) {\n  return {\n    getRows: (params) => {\n      const response = server.getData(params.request);\n\n      // adding delay to simulate real server call\n      setTimeout(() => {\n        if (response.success) {\n          // call the success callback\n          params.success({\n            rowData: response.rows,\n            rowCount: response.lastRow,\n          });\n        } else {\n          // inform the grid request failed\n          params.fail();\n        }\n      }, 300);\n    },\n  };\n}\n\nfunction logResults(transaction, result) {\n  console.log(\n    \"[Example] - Applied transaction:\",\n    transaction,\n    \"Result:\",\n    result,\n  );\n}\n\nfunction createOneAggressive() {\n  // NOTE: real applications would be better served listening to a stream of changes from the server instead\n  const serverResponse = createRowOnServer(\"Aggressive\", \"Aluminium\", \"GL-1\");\n  if (!serverResponse.success) {\n    console.warn(\"Nothing has changed on the server\");\n    return;\n  }\n\n  if (serverResponse.newGroupCreated) {\n    // if a new group had to be created, reflect in the grid\n    const transaction = {\n      route: [],\n      add: [{ portfolio: \"Aggressive\" }],\n    };\n    const result = gridApi.applyServerSideTransaction(transaction);\n    logResults(transaction, result);\n  } else {\n    // if the group already existed, add rows to it\n    const transaction = {\n      route: [\"Aggressive\"],\n      add: [serverResponse.newRecord],\n    };\n    const result = gridApi.applyServerSideTransaction(transaction);\n    logResults(transaction, result);\n  }\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n});\n","index.html":"<div class=\"example-wrapper\">\n    <div style=\"margin-bottom: 5px\">\n        <button onClick=\"createOneAggressive()\">Add new 'Aggressive'</button>\n    </div>\n    <div id=\"myGrid\"></div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}},"extras":["alasql"]}