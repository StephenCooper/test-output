{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"main.ts","styleFiles":[],"files":{"styles.css":".test-container {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\n.test-header {\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\n    font-size: 13px;\n    margin-bottom: 0.5rem;\n}\n\n.test-header .example-section {\n    margin-bottom: 0.5rem;\n}\n\n.test-button-group {\n    display: inline-block;\n    margin-right: 20px;\n    margin-bottom: 10px;\n}\n\n.test-button-group button {\n    margin: 4px;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n}\n","main.ts":"import {\n  createApp,\n  defineComponent,\n  onBeforeMount,\n  ref,\n  shallowRef,\n} from \"vue\";\nimport { AgGridVue } from \"ag-grid-vue3\";\nimport \"./styles.css\";\nimport {\n  ClientSideRowModelModule,\n  ColDef,\n  ColGroupDef,\n  ColumnApiModule,\n  ColumnMovedEvent,\n  ColumnPinnedEvent,\n  ColumnPivotChangedEvent,\n  ColumnResizedEvent,\n  ColumnRowGroupChangedEvent,\n  ColumnValueChangedEvent,\n  ColumnVisibleEvent,\n  GridApi,\n  GridOptions,\n  GridReadyEvent,\n  ModuleRegistry,\n  SortChangedEvent,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\nimport { PivotModule } from \"ag-grid-enterprise\";\nimport { IOlympicData } from \"./interfaces\";\nModuleRegistry.registerModules([\n  ColumnApiModule,\n  ClientSideRowModelModule,\n  PivotModule,\n  ValidationModule /* Development Only */,\n]);\n\nfunction getColumnDefs(): ColDef[] {\n  return [\n    { field: \"athlete\" },\n    { field: \"age\" },\n    { field: \"country\" },\n    { field: \"sport\" },\n    { field: \"gold\" },\n    { field: \"silver\" },\n    { field: \"bronze\" },\n  ];\n}\n\nconst VueExample = defineComponent({\n  template: `\n        <div style=\"height: 100%\">\n                <div class=\"test-container\">\n      <div class=\"test-header\">\n        <div class=\"test-button-row\">\n          <div class=\"test-button-group\">\n            <button v-on:click=\"onBtSortOn()\">Sort On</button>\n            <br />\n            <button v-on:click=\"onBtSortOff()\">Sort Off</button>\n          </div>\n          <div class=\"test-button-group\">\n            <button v-on:click=\"onBtWidthNarrow()\">Width Narrow</button>\n            <br />\n            <button v-on:click=\"onBtWidthNormal()\">Width Normal</button>\n          </div>\n          <div class=\"test-button-group\">\n            <button v-on:click=\"onBtHide()\">Hide Cols</button>\n            <br />\n            <button v-on:click=\"onBtShow()\">Show Cols</button>\n          </div>\n          <div class=\"test-button-group\">\n            <button v-on:click=\"onBtPivotOn()\">Pivot On</button>\n            <br />\n            <button v-on:click=\"onBtPivotOff()\">Pivot Off</button>\n          </div>\n          <div class=\"test-button-group\">\n            <button v-on:click=\"onBtRowGroupOn()\">Row Group On</button>\n            <br />\n            <button v-on:click=\"onBtRowGroupOff()\">Row Group Off</button>\n          </div>\n          <div class=\"test-button-group\">\n            <button v-on:click=\"onBtAggFuncOn()\">Agg Func On</button>\n            <br />\n            <button v-on:click=\"onBtAggFuncOff()\">Agg Func Off</button>\n          </div>\n          <div class=\"test-button-group\">\n            <button v-on:click=\"onBtPinnedOn()\">Pinned On</button>\n            <br />\n            <button v-on:click=\"onBtPinnedOff()\">Pinned Off</button>\n          </div>\n        </div>\n      </div>\n      <ag-grid-vue\n        style=\"width: 100%; height: 100%;\"\n        @grid-ready=\"onGridReady\"\n        :defaultColDef=\"defaultColDef\"\n        :columnDefs=\"columnDefs\"\n        :rowData=\"rowData\"\n        @sort-changed=\"onSortChanged\"\n        @column-resized=\"onColumnResized\"\n        @column-visible=\"onColumnVisible\"\n        @column-pivot-changed=\"onColumnPivotChanged\"\n        @column-row-group-changed=\"onColumnRowGroupChanged\"\n        @column-value-changed=\"onColumnValueChanged\"\n        @column-moved=\"onColumnMoved\"\n        @column-pinned=\"onColumnPinned\"></ag-grid-vue>\n      </div>\n        </div>\n    `,\n  components: {\n    \"ag-grid-vue\": AgGridVue,\n  },\n  setup(props) {\n    const gridApi = shallowRef<GridApi<IOlympicData> | null>(null);\n    const defaultColDef = ref<ColDef>({\n      width: 150,\n      enableRowGroup: true,\n      enablePivot: true,\n      enableValue: true,\n    });\n    const columnDefs = ref<ColDef[]>(getColumnDefs());\n    const rowData = ref<IOlympicData[]>(null);\n\n    function onSortChanged(e: SortChangedEvent) {\n      console.log(\"Event Sort Changed\", e);\n    }\n    function onColumnResized(e: ColumnResizedEvent) {\n      console.log(\"Event Column Resized\", e);\n    }\n    function onColumnVisible(e: ColumnVisibleEvent) {\n      console.log(\"Event Column Visible\", e);\n    }\n    function onColumnPivotChanged(e: ColumnPivotChangedEvent) {\n      console.log(\"Event Pivot Changed\", e);\n    }\n    function onColumnRowGroupChanged(e: ColumnRowGroupChangedEvent) {\n      console.log(\"Event Row Group Changed\", e);\n    }\n    function onColumnValueChanged(e: ColumnValueChangedEvent) {\n      console.log(\"Event Value Changed\", e);\n    }\n    function onColumnMoved(e: ColumnMovedEvent) {\n      console.log(\"Event Column Moved\", e);\n    }\n    function onColumnPinned(e: ColumnPinnedEvent) {\n      console.log(\"Event Column Pinned\", e);\n    }\n    function onBtSortOn() {\n      const columnDefs: ColDef[] = getColumnDefs();\n      columnDefs.forEach((colDef) => {\n        if (colDef.field === \"age\") {\n          colDef.sort = \"desc\";\n        }\n        if (colDef.field === \"athlete\") {\n          colDef.sort = \"asc\";\n        }\n      });\n      gridApi.value!.setGridOption(\"columnDefs\", columnDefs);\n    }\n    function onBtSortOff() {\n      const columnDefs: ColDef[] = getColumnDefs();\n      columnDefs.forEach((colDef) => {\n        colDef.sort = null;\n      });\n      gridApi.value!.setGridOption(\"columnDefs\", columnDefs);\n    }\n    function onBtWidthNarrow() {\n      const columnDefs: ColDef[] = getColumnDefs();\n      columnDefs.forEach((colDef) => {\n        if (colDef.field === \"age\" || colDef.field === \"athlete\") {\n          colDef.width = 100;\n        }\n      });\n      gridApi.value!.setGridOption(\"columnDefs\", columnDefs);\n    }\n    function onBtWidthNormal() {\n      const columnDefs: ColDef[] = getColumnDefs();\n      columnDefs.forEach((colDef) => {\n        colDef.width = 200;\n      });\n      gridApi.value!.setGridOption(\"columnDefs\", columnDefs);\n    }\n    function onBtHide() {\n      const columnDefs: ColDef[] = getColumnDefs();\n      columnDefs.forEach((colDef) => {\n        if (colDef.field === \"age\" || colDef.field === \"athlete\") {\n          colDef.hide = true;\n        }\n      });\n      gridApi.value!.setGridOption(\"columnDefs\", columnDefs);\n    }\n    function onBtShow() {\n      const columnDefs: ColDef[] = getColumnDefs();\n      columnDefs.forEach((colDef) => {\n        colDef.hide = false;\n      });\n      gridApi.value!.setGridOption(\"columnDefs\", columnDefs);\n    }\n    function onBtPivotOn() {\n      gridApi.value!.setGridOption(\"pivotMode\", true);\n      const columnDefs: ColDef[] = getColumnDefs();\n      columnDefs.forEach((colDef) => {\n        if (colDef.field === \"country\") {\n          colDef.pivot = true;\n        }\n      });\n      gridApi.value!.setGridOption(\"columnDefs\", columnDefs);\n    }\n    function onBtPivotOff() {\n      gridApi.value!.setGridOption(\"pivotMode\", false);\n      const columnDefs: ColDef[] = getColumnDefs();\n      columnDefs.forEach((colDef) => {\n        colDef.pivot = false;\n      });\n      gridApi.value!.setGridOption(\"columnDefs\", columnDefs);\n    }\n    function onBtRowGroupOn() {\n      const columnDefs: ColDef[] = getColumnDefs();\n      columnDefs.forEach((colDef) => {\n        if (colDef.field === \"sport\") {\n          colDef.rowGroup = true;\n        }\n      });\n      gridApi.value!.setGridOption(\"columnDefs\", columnDefs);\n    }\n    function onBtRowGroupOff() {\n      const columnDefs: ColDef[] = getColumnDefs();\n      columnDefs.forEach((colDef) => {\n        colDef.rowGroup = false;\n      });\n      gridApi.value!.setGridOption(\"columnDefs\", columnDefs);\n    }\n    function onBtAggFuncOn() {\n      const columnDefs: ColDef[] = getColumnDefs();\n      columnDefs.forEach((colDef) => {\n        if (\n          colDef.field === \"gold\" ||\n          colDef.field === \"silver\" ||\n          colDef.field === \"bronze\"\n        ) {\n          colDef.aggFunc = \"sum\";\n        }\n      });\n      gridApi.value!.setGridOption(\"columnDefs\", columnDefs);\n    }\n    function onBtAggFuncOff() {\n      const columnDefs: ColDef[] = getColumnDefs();\n      columnDefs.forEach((colDef) => {\n        colDef.aggFunc = null;\n      });\n      gridApi.value!.setGridOption(\"columnDefs\", columnDefs);\n    }\n    function onBtPinnedOn() {\n      const columnDefs: ColDef[] = getColumnDefs();\n      columnDefs.forEach((colDef) => {\n        if (colDef.field === \"athlete\") {\n          colDef.pinned = \"left\";\n        }\n        if (colDef.field === \"age\") {\n          colDef.pinned = \"right\";\n        }\n      });\n      gridApi.value!.setGridOption(\"columnDefs\", columnDefs);\n    }\n    function onBtPinnedOff() {\n      const columnDefs: ColDef[] = getColumnDefs();\n      columnDefs.forEach((colDef) => {\n        colDef.pinned = null;\n      });\n      gridApi.value!.setGridOption(\"columnDefs\", columnDefs);\n    }\n    const onGridReady = (params: GridReadyEvent) => {\n      gridApi.value = params.api;\n\n      const updateData = (data) => (rowData.value = data);\n\n      fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n        .then((resp) => resp.json())\n        .then((data) => updateData(data));\n    };\n\n    return {\n      gridApi,\n      defaultColDef,\n      columnDefs,\n      rowData,\n      onGridReady,\n      onSortChanged,\n      onColumnResized,\n      onColumnVisible,\n      onColumnPivotChanged,\n      onColumnRowGroupChanged,\n      onColumnValueChanged,\n      onColumnMoved,\n      onColumnPinned,\n      onBtSortOn,\n      onBtSortOff,\n      onBtWidthNarrow,\n      onBtWidthNormal,\n      onBtHide,\n      onBtShow,\n      onBtPivotOn,\n      onBtPivotOff,\n      onBtRowGroupOn,\n      onBtRowGroupOff,\n      onBtAggFuncOn,\n      onBtAggFuncOff,\n      onBtPinnedOn,\n      onBtPinnedOff,\n    };\n  },\n});\n\ncreateApp(VueExample).mount(\"#app\");\n","index.html":"<div class=\"test-container\">\n    <div class=\"test-header\">\n        <div class=\"test-button-row\">\n            <div class=\"test-button-group\">\n                <button onclick=\"onBtSortOn()\">Sort On</button>\n                <br />\n                <button onclick=\"onBtSortOff()\">Sort Off</button>\n            </div>\n            <div class=\"test-button-group\">\n                <button onclick=\"onBtWidthNarrow()\">Width Narrow</button>\n                <br />\n                <button onclick=\"onBtWidthNormal()\">Width Normal</button>\n            </div>\n            <div class=\"test-button-group\">\n                <button onclick=\"onBtHide()\">Hide Cols</button>\n                <br />\n                <button onclick=\"onBtShow()\">Show Cols</button>\n            </div>\n            <div class=\"test-button-group\">\n                <button onclick=\"onBtPivotOn()\">Pivot On</button>\n                <br />\n                <button onclick=\"onBtPivotOff()\">Pivot Off</button>\n            </div>\n            <div class=\"test-button-group\">\n                <button onclick=\"onBtRowGroupOn()\">Row Group On</button>\n                <br />\n                <button onclick=\"onBtRowGroupOff()\">Row Group Off</button>\n            </div>\n            <div class=\"test-button-group\">\n                <button onclick=\"onBtAggFuncOn()\">Agg Func On</button>\n                <br />\n                <button onclick=\"onBtAggFuncOff()\">Agg Func Off</button>\n            </div>\n            <div class=\"test-button-group\">\n                <button onclick=\"onBtPinnedOn()\">Pinned On</button>\n                <br />\n                <button onclick=\"onBtPinnedOff()\">Pinned Off</button>\n            </div>\n        </div>\n    </div>\n    <div id=\"myGrid\"></div>\n</div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        defaultExtension: 'js',\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            vue: 'npm:vue@3.5.0/dist/vue.esm-browser.js',\n            '@vue/reactivity': 'npm:@vue/reactivity@3.0.0/dist/reactivity.esm-browser.prod.js',\n\n            // vue class component\n            'vue-class-component': 'npm:vue-class-component@^8.0.0-beta.3/dist/vue-class-component.cjs.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            'css.js': {\n                defaultExtension: 'js',\n            },\n            vue: {\n                defaultExtension: 'js',\n            },\n            app: {\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-vue3': {\n                main: './dist/main.umd.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"vue":"^3.5.0","ag-grid-vue3":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}