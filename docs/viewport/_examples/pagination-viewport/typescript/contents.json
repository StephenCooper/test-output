{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"main.ts","styleFiles":[],"files":{"mock-server.ts":"export function createMockServer() {\n    class MockServer {\n        constructor() {\n            this.connections = {};\n            this.nextConnectionId = 0;\n            setInterval(this.periodicallyUpdateData.bind(this), 100);\n        }\n\n        periodicallyUpdateData() {\n            // keep a record of all the items that changed\n            const changes = [];\n\n            // make some mock changes to the data\n            this.makeSomePriceChanges(changes);\n            this.makeSomeVolumeChanges(changes);\n\n            // inform the connections of the changes where appropriate\n            this.informConnectionsOfChanges(changes);\n        }\n\n        informConnectionsOfChanges(changes) {\n            const that = this;\n            // go through each connection\n            Object.keys(this.connections).forEach(function (connectionId) {\n                const connection = that.connections[connectionId];\n                // create a list of changes that are applicable to this connection only\n                const changesThisConnection = [];\n                changes.forEach(function (change) {\n                    // see if the index of this change is within the connections viewport\n                    const changeInRange =\n                        change.rowIndex >= connection.firstRow && change.rowIndex <= connection.lastRow;\n                    if (changeInRange) {\n                        changesThisConnection.push(change);\n                    }\n                });\n                // send msg to this connection if one or more changes\n                if (changesThisConnection.length > 0) {\n                    that.sendEventAsync(connectionId, {\n                        eventType: 'dataUpdated',\n                        changes: changesThisConnection,\n                    });\n                }\n            });\n        }\n\n        makeSomeVolumeChanges(changes) {\n            for (let i = 0; i < 10; i++) {\n                // pick a data item at random\n                const index = Math.floor(this.allData.length * Math.random());\n                const dataItem = this.allData[index];\n\n                // change by a value between -5 and 5\n                const move = Math.floor(10 * Math.random()) - 5;\n                const newValue = dataItem.volume + move;\n                dataItem.volume = newValue;\n\n                changes.push({\n                    rowIndex: index,\n                    columnId: 'volume',\n                    newValue: dataItem.volume,\n                });\n            }\n        }\n\n        makeSomePriceChanges(changes) {\n            // randomly update data for some rows\n            for (let i = 0; i < 10; i++) {\n                const index = Math.floor(this.allData.length * Math.random());\n\n                const dataItem = this.allData[index];\n                // change by a value between -1 and 2 with one decimal place\n                const move = Math.floor(30 * Math.random()) / 10 - 1;\n                const newValue = dataItem.mid + move;\n                dataItem.mid = newValue;\n\n                this.setBidAndAsk(dataItem);\n\n                changes.push({\n                    rowIndex: index,\n                    columnId: 'mid',\n                    newValue: dataItem.mid,\n                });\n                changes.push({\n                    rowIndex: index,\n                    columnId: 'bid',\n                    newValue: dataItem.bid,\n                });\n                changes.push({\n                    rowIndex: index,\n                    columnId: 'ask',\n                    newValue: dataItem.ask,\n                });\n            }\n        }\n\n        init(allData) {\n            this.allData = allData;\n\n            // the sample data has just name and code, we need to add in dummy figures\n            const that = this;\n            this.allData.forEach(function (dataItem) {\n                // have volume a random between 100 and 10,000\n                dataItem.volume = Math.floor(Math.random() * 10000 + 100);\n\n                // have mid random from 20 to 300\n                dataItem.mid = Math.random() * 300 + 20;\n\n                that.setBidAndAsk(dataItem);\n            });\n        }\n\n        setBidAndAsk(dataItem) {\n            dataItem.bid = dataItem.mid * 0.98;\n            dataItem.ask = dataItem.mid * 1.02;\n        }\n\n        connect(listener) {\n            const connectionId = this.nextConnectionId;\n            this.nextConnectionId++;\n            // keep a record of the connection\n            this.connections[connectionId] = {\n                // the client callback that receives the events\n                listener: listener,\n                // we keep track of the rows in the client, so when the viewport changes,\n                // we only send rows that are new, eg if viewport is length 10, and moves 2\n                // positions, we only send the 2 new rows, as the client already has 8 of them\n                rowsInClient: {},\n                // keep track of range, so when data items change, we know what to send\n                firstRow: 0,\n                lastRow: -1, // first row after last row, range doesn't exist\n            };\n\n            this.sendEventAsync(connectionId, {\n                eventType: 'rowCountChanged',\n                rowCount: this.allData.length,\n            });\n\n            return connectionId;\n        }\n\n        // pretend we are on a network, send message to client after 20ms\n        sendEventAsync(connectionId, event) {\n            const listener = this.connections[connectionId].listener;\n            setTimeout(function () {\n                listener(event);\n            }, 20);\n        }\n\n        disconnect(connectionId) {\n            delete this.connections[connectionId];\n        }\n\n        setViewportRange(connectionId, firstRow, lastRow) {\n            const connection = this.connections[connectionId];\n            connection.firstRow = firstRow;\n            connection.lastRow = lastRow;\n\n            // because the client has moved its viewport, it will have disregarded rows outside the range\n            this.purgeFromClientRows(connection.rowsInClient, firstRow, lastRow);\n            // send rows newly in the range\n            this.sendResultsToClient(connectionId, firstRow, lastRow);\n        }\n\n        // removes any entries outside the viewport (firstRow to lastRow)\n        purgeFromClientRows(rowsInClient, firstRow, lastRow) {\n            Object.keys(rowsInClient).forEach(function (rowIndexStr) {\n                const rowIndex = parseInt(rowIndexStr);\n                if (rowIndex < firstRow || rowIndex > lastRow) {\n                    delete rowsInClient[rowIndex];\n                }\n            });\n        }\n\n        sendResultsToClient(connectionId, firstRow, lastRow) {\n            if (firstRow < 0 || lastRow < firstRow) {\n                console.warn('start or end is not valid');\n                return;\n            }\n\n            // we want to keep track of what rows the client has\n            const rowsInClient = this.connections[connectionId].rowsInClient;\n\n            // the map contains row indexes mapped to rows\n            const rowDataMap = {};\n            for (let i = firstRow; i <= lastRow; i++) {\n                // if client already has this row, don't send it again\n                if (rowsInClient[i]) {\n                    continue;\n                }\n                // otherwise send the row. we send a copy of the row to mimic\n                // going over network, so any further changes to the row in\n                // the mock server is not reflected in the grid's copy\n                rowDataMap[i] = JSON.parse(JSON.stringify(this.allData[i]));\n                // and record that the client has this row\n                rowsInClient[i] = true;\n            }\n\n            this.sendEventAsync(connectionId, {\n                eventType: 'rowData',\n                rowDataMap: rowDataMap,\n            });\n        }\n\n        getRowCount() {\n            return this.allData.length;\n        }\n    }\n    return new MockServer();\n}\n","viewport-datasource.ts":"import type { IViewportDatasource } from 'ag-grid-community';\n\nexport function createViewportDatasource(mockServer): IViewportDatasource {\n    // client code (ie your code) will call this constructor, pass in whatever you need for the\n    // viewport to do its job\n    class ViewportDatasource {\n        constructor(mockServer) {\n            this.mockServer = mockServer;\n            this.connectionId = this.mockServer.connect(this.eventListener.bind(this));\n        }\n\n        // gets called by the grid, tells us what rows the grid is displaying, so time for\n        // us to tell the server to give us the rows for that displayed range\n        setViewportRange(firstRow, lastRow) {\n            console.log('setViewportRange: ' + firstRow + ' to ' + lastRow);\n            this.mockServer.setViewportRange(this.connectionId, firstRow, lastRow);\n        }\n\n        // gets called by the grid, provides us with the callbacks we need\n        init(params) {\n            this.params = params;\n        }\n\n        // gets called by grid, when grid is destroyed or this datasource is swapped out for another one\n        destroy() {\n            this.mockServer.disconnect(this.connectionId);\n        }\n\n        // manages events back from the server\n        eventListener(event) {\n            switch (event.eventType) {\n                case 'rowCountChanged':\n                    this.onRowCountChanged(event);\n                    break;\n                case 'rowData':\n                    this.onRowData(event);\n                    break;\n                case 'dataUpdated':\n                    this.onDataUpdated(event);\n                    break;\n            }\n        }\n\n        // process rowData event\n        onRowData(event) {\n            const rowDataFromServer = event.rowDataMap;\n            this.params.setRowData(rowDataFromServer);\n        }\n\n        // process dataUpdated event\n        onDataUpdated(event) {\n            const that = this;\n            event.changes.forEach(function (change) {\n                const rowNode = that.params.getRow(change.rowIndex);\n                // if the rowNode is missing, it means the grid is not displaying that row.\n                // if the data is missing, it means the rowNode is there, but that data has not\n                // loaded into it yet, so to early to set delta changes.\n                if (!rowNode || !rowNode.data) {\n                    return;\n                }\n                // rowNode.data[change.columnId] = change.newValue;\n                // this is a trick, it gets the row to refresh\n                rowNode.setDataValue(change.columnId, change.newValue);\n            });\n        }\n\n        // process rowCount event\n        onRowCountChanged(event) {\n            const rowCountFromServer = event.rowCount;\n            // this will get the grid to make set the height of the row container, so we can scroll vertically properly\n            this.params.setRowCount(rowCountFromServer);\n        }\n    }\n\n    return new ViewportDatasource(mockServer);\n}\n","main.ts":"import {\n  CellStyleModule,\n  ColDef,\n  ColGroupDef,\n  GetRowIdFunc,\n  GetRowIdParams,\n  GridApi,\n  GridOptions,\n  HighlightChangesModule,\n  ICellRendererComp,\n  ICellRendererParams,\n  ModuleRegistry,\n  PaginationModule,\n  RowModelType,\n  RowSelectionModule,\n  RowSelectionOptions,\n  ValidationModule,\n  ValueFormatterParams,\n  createGrid,\n} from \"ag-grid-community\";\nimport { ViewportRowModelModule } from \"ag-grid-enterprise\";\nimport { createMockServer } from \"./mock-server\";\nimport { createViewportDatasource } from \"./viewport-datasource\";\n\nModuleRegistry.registerModules([\n  RowSelectionModule,\n  PaginationModule,\n  CellStyleModule,\n  ViewportRowModelModule,\n  HighlightChangesModule,\n  ValidationModule /* Development Only */,\n]);\n\nclass RowIndexRenderer implements ICellRendererComp {\n  eGui!: HTMLDivElement;\n  init(params: ICellRendererParams) {\n    this.eGui = document.createElement(\"div\");\n    this.eGui.textContent = \"\" + params.node.rowIndex;\n  }\n  refresh(params: ICellRendererParams): boolean {\n    return false;\n  }\n  getGui(): HTMLElement {\n    return this.eGui;\n  }\n}\n\nconst columnDefs: ColDef[] = [\n  // this col shows the row index, doesn't use any data from the row\n  {\n    headerName: \"#\",\n    maxWidth: 80,\n    cellRenderer: RowIndexRenderer,\n  },\n  { field: \"code\", maxWidth: 90 },\n  { field: \"name\", minWidth: 220 },\n  {\n    field: \"bid\",\n    cellClass: \"cell-number\",\n    valueFormatter: numberFormatter,\n    cellRenderer: \"agAnimateShowChangeCellRenderer\",\n  },\n  {\n    field: \"mid\",\n    cellClass: \"cell-number\",\n    valueFormatter: numberFormatter,\n    cellRenderer: \"agAnimateShowChangeCellRenderer\",\n  },\n  {\n    field: \"ask\",\n    cellClass: \"cell-number\",\n    valueFormatter: numberFormatter,\n    cellRenderer: \"agAnimateShowChangeCellRenderer\",\n  },\n  {\n    field: \"volume\",\n    cellClass: \"cell-number\",\n    cellRenderer: \"agAnimateSlideCellRenderer\",\n  },\n];\n\nlet gridApi: GridApi;\n\nconst gridOptions: GridOptions = {\n  columnDefs: columnDefs,\n  defaultColDef: {\n    flex: 1,\n    minWidth: 140,\n    sortable: false,\n  },\n  rowModelType: \"viewport\",\n  pagination: true,\n  paginationAutoPageSize: true,\n  viewportRowModelPageSize: 1,\n  viewportRowModelBufferSize: 0,\n  // implement this so that we can do selection\n  getRowId: (params: GetRowIdParams) => {\n    // the code is unique, so perfect for the id\n    return params.data.code;\n  },\n  rowSelection: {\n    mode: \"multiRow\",\n    headerCheckbox: false,\n  },\n};\n\nfunction numberFormatter(params: ValueFormatterParams) {\n  if (typeof params.value === \"number\") {\n    return params.value.toFixed(2);\n  } else {\n    return params.value;\n  }\n}\n\n// setup the grid after the page has finished loading\nconst gridDiv = document.querySelector<HTMLElement>(\"#myGrid\")!;\ngridApi = createGrid(gridDiv, gridOptions);\n\nfetch(\"https://www.ag-grid.com/example-assets/stocks.json\")\n  .then((response) => response.json())\n  .then(function (data) {\n    // set up a mock server - real code will not do this, it will contact your\n    // real server to get what it needs\n    const mockServer = createMockServer();\n    mockServer.init(data);\n\n    const viewportDatasource = createViewportDatasource(mockServer);\n    gridApi!.setGridOption(\"viewportDatasource\", viewportDatasource);\n  });\n","index.html":"<style>\n    .cell-number {\n        text-align: right;\n    }\n</style>\n\n<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {},\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        // map tells the System loader where to look for things\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            // appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap,\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {},\n            app: {\n                main: './main.ts',\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}