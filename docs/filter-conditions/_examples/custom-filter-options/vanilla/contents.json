{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n\n.ag-header-cell-filtered {\n    background-color: #1b6d85;\n    color: #fff !important;\n}\n","main.js":"const filterParams = {\n  filterOptions: [\n    \"empty\",\n    {\n      displayKey: \"evenNumbers\",\n      displayName: \"Even Numbers\",\n      predicate: (_, cellValue) => cellValue != null && cellValue % 2 === 0,\n      numberOfInputs: 0,\n    },\n    {\n      displayKey: \"oddNumbers\",\n      displayName: \"Odd Numbers\",\n      predicate: (_, cellValue) => cellValue != null && cellValue % 2 !== 0,\n      numberOfInputs: 0,\n    },\n    {\n      displayKey: \"blanks\",\n      displayName: \"Blanks\",\n      predicate: (_, cellValue) => cellValue == null,\n      numberOfInputs: 0,\n    },\n    {\n      displayKey: \"age5YearsAgo\",\n      displayName: \"Age 5 Years Ago\",\n      predicate: ([fv1], cellValue) =>\n        cellValue == null || cellValue - 5 === fv1,\n      numberOfInputs: 1,\n    },\n    {\n      displayKey: \"betweenExclusive\",\n      displayName: \"Between (Exclusive)\",\n      predicate: ([fv1, fv2], cellValue) =>\n        cellValue == null || (fv1 < cellValue && fv2 > cellValue),\n      numberOfInputs: 2,\n    },\n  ],\n  maxNumConditions: 1,\n};\n\nconst containsFilterParams = {\n  filterOptions: [\n    \"contains\",\n    {\n      displayKey: \"startsA\",\n      displayName: 'Starts With \"A\"',\n      predicate: (_, cellValue) =>\n        cellValue != null && cellValue.indexOf(\"A\") === 0,\n      numberOfInputs: 0,\n    },\n    {\n      displayKey: \"startsN\",\n      displayName: 'Starts With \"N\"',\n      predicate: (_, cellValue) =>\n        cellValue != null && cellValue.indexOf(\"N\") === 0,\n      numberOfInputs: 0,\n    },\n    {\n      displayKey: \"regexp\",\n      displayName: \"Regular Expression\",\n      predicate: ([fv1], cellValue) =>\n        cellValue == null || new RegExp(fv1, \"gi\").test(cellValue),\n      numberOfInputs: 1,\n    },\n    {\n      displayKey: \"betweenExclusive\",\n      displayName: \"Between (Exclusive)\",\n      predicate: ([fv1, fv2], cellValue) =>\n        cellValue == null || (fv1 < cellValue && fv2 > cellValue),\n      numberOfInputs: 2,\n    },\n  ],\n};\n\nconst equalsFilterParams = {\n  filterOptions: [\n    \"equals\",\n    {\n      displayKey: \"equalsWithNulls\",\n      displayName: \"Equals (with Nulls)\",\n      predicate: ([filterValue], cellValue) => {\n        if (cellValue == null) return true;\n\n        const parts = cellValue.split(\"/\");\n        const cellDate = new Date(\n          Number(parts[2]),\n          Number(parts[1] - 1),\n          Number(parts[0]),\n        );\n\n        return cellDate.getTime() === filterValue.getTime();\n      },\n    },\n    {\n      displayKey: \"leapYear\",\n      displayName: \"Leap Year\",\n      predicate: (_, cellValue) => {\n        if (cellValue == null) return true;\n\n        const year = Number(cellValue.split(\"/\")[2]);\n\n        return year % 4 === 0 && year % 200 !== 0;\n      },\n      numberOfInputs: 0,\n    },\n    {\n      displayKey: \"betweenExclusive\",\n      displayName: \"Between (Exclusive)\",\n      predicate: ([fv1, fv2], cellValue) => {\n        if (cellValue == null) return true;\n\n        const parts = cellValue.split(\"/\");\n        const cellDate = new Date(\n          Number(parts[2]),\n          Number(parts[1] - 1),\n          Number(parts[0]),\n        );\n\n        return (\n          cellDate.getTime() > fv1.getTime() &&\n          cellDate.getTime() < fv2.getTime()\n        );\n      },\n      numberOfInputs: 2,\n    },\n  ],\n  comparator: (filterLocalDateAtMidnight, cellValue) => {\n    const dateAsString = cellValue;\n    if (dateAsString == null) return -1;\n    const dateParts = dateAsString.split(\"/\");\n    const cellDate = new Date(\n      Number(dateParts[2]),\n      Number(dateParts[1]) - 1,\n      Number(dateParts[0]),\n    );\n\n    if (filterLocalDateAtMidnight.getTime() === cellDate.getTime()) {\n      return 0;\n    }\n\n    if (cellDate < filterLocalDateAtMidnight) {\n      return -1;\n    }\n\n    if (cellDate > filterLocalDateAtMidnight) {\n      return 1;\n    }\n    return 0;\n  },\n};\n\nconst notEqualsFilterParams = {\n  filterOptions: [\n    \"notEqual\",\n    {\n      displayKey: \"notEqualNoNulls\",\n      displayName: \"Not Equals without Nulls\",\n      predicate: ([filterValue], cellValue) => {\n        if (cellValue == null) return false;\n\n        return cellValue.toLowerCase() !== filterValue.toLowerCase();\n      },\n    },\n  ],\n};\n\nconst columnDefs = [\n  {\n    field: \"athlete\",\n    filterParams: containsFilterParams,\n  },\n  {\n    field: \"age\",\n    minWidth: 120,\n    filter: \"agNumberColumnFilter\",\n    filterParams: filterParams,\n  },\n  {\n    field: \"date\",\n    filter: \"agDateColumnFilter\",\n    filterParams: equalsFilterParams,\n  },\n  {\n    field: \"country\",\n    filterParams: notEqualsFilterParams,\n  },\n  { field: \"gold\", filter: \"agNumberColumnFilter\" },\n  { field: \"silver\", filter: \"agNumberColumnFilter\" },\n  { field: \"bronze\", filter: \"agNumberColumnFilter\" },\n  { field: \"total\", filter: false },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n  columnDefs: columnDefs,\n  defaultColDef: {\n    flex: 1,\n    minWidth: 150,\n    filter: true,\n  },\n  getLocaleText: (params) => {\n    if (params.key === \"notEqualNoNulls\") {\n      return \"* Not Equals (No Nulls) *\";\n    }\n    return params.defaultValue;\n  },\n};\n\nfunction printState() {\n  const filterState = gridApi.getFilterModel();\n  console.log(\"filterState: \", filterState);\n}\n\nfunction saveState() {\n  window.filterState = gridApi.getFilterModel();\n  console.log(\"filter state saved\");\n}\n\nfunction restoreState() {\n  gridApi.setFilterModel(window.filterState);\n  console.log(\"filter state restored\");\n}\n\nfunction resetState() {\n  gridApi.setFilterModel(null);\n  console.log(\"column state reset\");\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/small-olympic-winners.json\")\n    .then((response) => response.json())\n    .then(function (data) {\n      gridApi.setGridOption(\"rowData\", data);\n    });\n});\n","index.html":"<div class=\"example-wrapper\">\n    <div style=\"margin-bottom: 5px\">\n        <button onclick=\"printState()\">Print State</button>\n        <button onclick=\"saveState()\">Save State</button>\n        <button onclick=\"restoreState()\">Restore State</button>\n        <button onclick=\"resetState()\">Reset State</button>\n    </div>\n\n    <div id=\"myGrid\" style=\"height: 100%\"></div>\n</div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}