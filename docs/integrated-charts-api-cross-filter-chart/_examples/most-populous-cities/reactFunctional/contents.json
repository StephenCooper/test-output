{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":true,"entryFileName":"index.jsx","mainFileName":"index.jsx","styleFiles":[],"files":{"style.css":"#wrapper {\n    height: 100%;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    box-sizing: border-box;\n}\n\n#barChart {\n    height: 400px;\n}\n\n#bubbleChart {\n    height: 300px;\n}\n\n#myGrid {\n    height: 400px;\n}\n","data.jsx":"export const getData = async (delay = 100) =>\n    new Promise((resolve) => setTimeout(() => resolve(data), delay));\n\nconst data = [\n    {\n        city: 'Tokyo',\n        latitude: 35.6897,\n        longitude: 139.6922,\n        country: 'Japan',\n        population: 37977000,\n    },\n    {\n        city: 'Jakarta',\n        latitude: -6.2146,\n        longitude: 106.8451,\n        country: 'Indonesia',\n        population: 34540000,\n    },\n    {\n        city: 'Delhi',\n        latitude: 28.66,\n        longitude: 77.23,\n        country: 'India',\n        population: 29617000,\n    },\n    {\n        city: 'Mumbai',\n        latitude: 18.9667,\n        longitude: 72.8333,\n        country: 'India',\n        population: 23355000,\n    },\n    {\n        city: 'Manila',\n        latitude: 14.5958,\n        longitude: 120.9772,\n        country: 'Philippines',\n        population: 23088000,\n    },\n    {\n        city: 'Shanghai',\n        latitude: 31.1667,\n        longitude: 121.4667,\n        country: 'China',\n        population: 22120000,\n    },\n    {\n        city: 'São Paulo',\n        latitude: -23.5504,\n        longitude: -46.6339,\n        country: 'Brazil',\n        population: 22046000,\n    },\n    {\n        city: 'Seoul',\n        latitude: 37.5833,\n        longitude: 127,\n        country: 'Korea, South',\n        population: 21794000,\n    },\n    {\n        city: 'Mexico City',\n        latitude: 19.4333,\n        longitude: -99.1333,\n        country: 'Mexico',\n        population: 20996000,\n    },\n    {\n        city: 'Guangzhou',\n        latitude: 23.1288,\n        longitude: 113.259,\n        country: 'China',\n        population: 20902000,\n    },\n    {\n        city: 'Beijing',\n        latitude: 39.905,\n        longitude: 116.3914,\n        country: 'China',\n        population: 19433000,\n    },\n    {\n        city: 'Cairo',\n        latitude: 30.0561,\n        longitude: 31.2394,\n        country: 'Egypt',\n        population: 19372000,\n    },\n    {\n        city: 'New York',\n        latitude: 40.6943,\n        longitude: -73.9249,\n        country: 'United States',\n        population: 18713220,\n    },\n    {\n        city: 'Kolkāta',\n        latitude: 22.5411,\n        longitude: 88.3378,\n        country: 'India',\n        population: 17560000,\n    },\n    {\n        city: 'Moscow',\n        latitude: 55.7558,\n        longitude: 37.6178,\n        country: 'Russia',\n        population: 17125000,\n    },\n    {\n        city: 'Bangkok',\n        latitude: 13.75,\n        longitude: 100.5167,\n        country: 'Thailand',\n        population: 17066000,\n    },\n    {\n        city: 'Buenos Aires',\n        latitude: -34.5997,\n        longitude: -58.3819,\n        country: 'Argentina',\n        population: 16157000,\n    },\n    {\n        city: 'Shenzhen',\n        latitude: 22.535,\n        longitude: 114.054,\n        country: 'China',\n        population: 15929000,\n    },\n    {\n        city: 'Dhaka',\n        latitude: 23.7161,\n        longitude: 90.3961,\n        country: 'Bangladesh',\n        population: 15443000,\n    },\n    {\n        city: 'Lagos',\n        latitude: 6.45,\n        longitude: 3.4,\n        country: 'Nigeria',\n        population: 15279000,\n    },\n    {\n        city: 'Istanbul',\n        latitude: 41.01,\n        longitude: 28.9603,\n        country: 'Turkey',\n        population: 15154000,\n    },\n    {\n        city: 'Ōsaka',\n        latitude: 34.6936,\n        longitude: 135.5019,\n        country: 'Japan',\n        population: 14977000,\n    },\n    {\n        city: 'Karachi',\n        latitude: 24.86,\n        longitude: 67.01,\n        country: 'Pakistan',\n        population: 14835000,\n    },\n    {\n        city: 'Bangalore',\n        latitude: 12.9699,\n        longitude: 77.598,\n        country: 'India',\n        population: 13707000,\n    },\n    {\n        city: 'Tehran',\n        latitude: 35.7,\n        longitude: 51.4167,\n        country: 'Iran',\n        population: 13633000,\n    },\n    {\n        city: 'Ho Chi Minh City',\n        latitude: 10.8167,\n        longitude: 106.6333,\n        country: 'Vietnam',\n        population: 13312000,\n    },\n    {\n        city: 'Los Angeles',\n        latitude: 34.1139,\n        longitude: -118.4068,\n        country: 'United States',\n        population: 12750807,\n    },\n    {\n        city: 'Rio de Janeiro',\n        latitude: -22.9083,\n        longitude: -43.1964,\n        country: 'Brazil',\n        population: 12272000,\n    },\n    {\n        city: 'Nanyang',\n        latitude: 32.9987,\n        longitude: 112.5292,\n        country: 'China',\n        population: 12010000,\n    },\n    {\n        city: 'Chennai',\n        latitude: 13.0825,\n        longitude: 80.275,\n        country: 'India',\n        population: 11324000,\n    },\n    {\n        city: 'Chengdu',\n        latitude: 30.6636,\n        longitude: 104.0667,\n        country: 'China',\n        population: 11309000,\n    },\n    {\n        city: 'Lahore',\n        latitude: 31.5497,\n        longitude: 74.3436,\n        country: 'Pakistan',\n        population: 11021000,\n    },\n    {\n        city: 'Paris',\n        latitude: 48.8566,\n        longitude: 2.3522,\n        country: 'France',\n        population: 11020000,\n    },\n    {\n        city: 'London',\n        latitude: 51.5072,\n        longitude: -0.1275,\n        country: 'United Kingdom',\n        population: 10979000,\n    },\n    {\n        city: 'Linyi',\n        latitude: 35.0606,\n        longitude: 118.3425,\n        country: 'China',\n        population: 10820000,\n    },\n    {\n        city: 'Tianjin',\n        latitude: 39.1467,\n        longitude: 117.2056,\n        country: 'China',\n        population: 10800000,\n    },\n    {\n        city: 'Shijiazhuang',\n        latitude: 38.0422,\n        longitude: 114.5086,\n        country: 'China',\n        population: 10784600,\n    },\n    {\n        city: 'Baoding',\n        latitude: 38.8671,\n        longitude: 115.4845,\n        country: 'China',\n        population: 10700000,\n    },\n    {\n        city: 'Zhoukou',\n        latitude: 33.625,\n        longitude: 114.6418,\n        country: 'China',\n        population: 9901000,\n    },\n    {\n        city: 'Hyderābād',\n        latitude: 17.3667,\n        longitude: 78.4667,\n        country: 'India',\n        population: 9746000,\n    },\n    {\n        city: 'Weifang',\n        latitude: 36.7167,\n        longitude: 119.1,\n        country: 'China',\n        population: 9373000,\n    },\n    {\n        city: 'Nagoya',\n        latitude: 35.1167,\n        longitude: 136.9333,\n        country: 'Japan',\n        population: 9113000,\n    },\n    {\n        city: 'Wuhan',\n        latitude: 30.5872,\n        longitude: 114.2881,\n        country: 'China',\n        population: 8962000,\n    },\n    {\n        city: 'Heze',\n        latitude: 35.2333,\n        longitude: 115.4333,\n        country: 'China',\n        population: 8750000,\n    },\n    {\n        city: 'Ganzhou',\n        latitude: 25.8292,\n        longitude: 114.9336,\n        country: 'China',\n        population: 8677600,\n    },\n    {\n        city: 'Tongshan',\n        latitude: 34.261,\n        longitude: 117.1859,\n        country: 'China',\n        population: 8669000,\n    },\n    {\n        city: 'Chicago',\n        latitude: 41.8373,\n        longitude: -87.6862,\n        country: 'United States',\n        population: 8604203,\n    },\n    {\n        city: 'Fuyang',\n        latitude: 32.8986,\n        longitude: 115.8045,\n        country: 'China',\n        population: 8360000,\n    },\n    {\n        city: 'Jining',\n        latitude: 35.4,\n        longitude: 116.5667,\n        country: 'China',\n        population: 8023000,\n    },\n    {\n        city: 'Dongguan',\n        latitude: 23.0475,\n        longitude: 113.7493,\n        country: 'China',\n        population: 7981000,\n    },\n    {\n        city: 'Hanoi',\n        latitude: 21.0245,\n        longitude: 105.8412,\n        country: 'Vietnam',\n        population: 7785000,\n    },\n    {\n        city: 'Pune',\n        latitude: 18.5196,\n        longitude: 73.8553,\n        country: 'India',\n        population: 7764000,\n    },\n    {\n        city: 'Chongqing',\n        latitude: 29.55,\n        longitude: 106.5069,\n        country: 'China',\n        population: 7739000,\n    },\n    {\n        city: 'Changchun',\n        latitude: 43.9,\n        longitude: 125.2,\n        country: 'China',\n        population: 7674439,\n    },\n    {\n        city: 'Zhumadian',\n        latitude: 32.9773,\n        longitude: 114.0253,\n        country: 'China',\n        population: 7640000,\n    },\n    {\n        city: 'Ningbo',\n        latitude: 29.875,\n        longitude: 121.5492,\n        country: 'China',\n        population: 7639000,\n    },\n    {\n        city: 'Onitsha',\n        latitude: 6.1667,\n        longitude: 6.7833,\n        country: 'Nigeria',\n        population: 7635000,\n    },\n    {\n        city: 'Hefei',\n        latitude: 31.8639,\n        longitude: 117.2808,\n        country: 'China',\n        population: 7457027,\n    },\n    {\n        city: 'Ahmadābād',\n        latitude: 23.03,\n        longitude: 72.58,\n        country: 'India',\n        population: 7410000,\n    },\n    {\n        city: 'Nantong',\n        latitude: 31.9829,\n        longitude: 120.8873,\n        country: 'China',\n        population: 7282835,\n    },\n    {\n        city: 'Foshan',\n        latitude: 23.0292,\n        longitude: 113.1056,\n        country: 'China',\n        population: 7194311,\n    },\n    {\n        city: 'Hengyang',\n        latitude: 26.8968,\n        longitude: 112.5857,\n        country: 'China',\n        population: 7148344,\n    },\n    {\n        city: 'Xi’an',\n        latitude: 34.2667,\n        longitude: 108.9,\n        country: 'China',\n        population: 7135000,\n    },\n    {\n        city: 'Shenyang',\n        latitude: 41.8039,\n        longitude: 123.4258,\n        country: 'China',\n        population: 7105000,\n    },\n    {\n        city: 'Tangshan',\n        latitude: 39.6292,\n        longitude: 118.1742,\n        country: 'China',\n        population: 7100000,\n    },\n    {\n        city: 'Shaoyang',\n        latitude: 27.2418,\n        longitude: 111.4725,\n        country: 'China',\n        population: 7071000,\n    },\n    {\n        city: 'Changsha',\n        latitude: 28.1987,\n        longitude: 112.9709,\n        country: 'China',\n        population: 7044118,\n    },\n    {\n        city: 'Cangzhou',\n        latitude: 38.3037,\n        longitude: 116.8452,\n        country: 'China',\n        population: 6800000,\n    },\n    {\n        city: 'Maoming',\n        latitude: 21.6618,\n        longitude: 110.9178,\n        country: 'China',\n        population: 6706000,\n    },\n    {\n        city: 'Huanggang',\n        latitude: 30.45,\n        longitude: 114.875,\n        country: 'China',\n        population: 6667000,\n    },\n    {\n        city: 'Miami',\n        latitude: 25.7839,\n        longitude: -80.2102,\n        country: 'United States',\n        population: 6445545,\n    },\n    {\n        city: 'Sūrat',\n        latitude: 21.17,\n        longitude: 72.83,\n        country: 'India',\n        population: 5807000,\n    },\n    {\n        city: 'Dallas',\n        latitude: 32.7936,\n        longitude: -96.7662,\n        country: 'United States',\n        population: 5743938,\n    },\n];\n","index.jsx":"\"use client\";\n\nimport React, {\n  useCallback,\n  useMemo,\n  useRef,\n  useState,\n  useEffect,\n  StrictMode,\n} from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"./style.css\";\nimport { getData } from \"./data.jsx\";\nimport { AgChartsEnterpriseModule } from \"ag-charts-enterprise\";\nimport {\n  ClientSideRowModelModule,\n  ModuleRegistry,\n  NumberEditorModule,\n  TextEditorModule,\n  TextFilterModule,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\nimport {\n  ColumnMenuModule,\n  ColumnsToolPanelModule,\n  ContextMenuModule,\n  FiltersToolPanelModule,\n  IntegratedChartsModule,\n  MultiFilterModule,\n  RowGroupingModule,\n  SetFilterModule,\n} from \"ag-grid-enterprise\";\nModuleRegistry.registerModules([\n  ClientSideRowModelModule,\n  IntegratedChartsModule.with(AgChartsEnterpriseModule),\n  ColumnsToolPanelModule,\n  FiltersToolPanelModule,\n  ColumnMenuModule,\n  ContextMenuModule,\n  MultiFilterModule,\n  SetFilterModule,\n  RowGroupingModule,\n  TextFilterModule,\n  TextEditorModule,\n  NumberEditorModule,\n  ValidationModule /* Development Only */,\n]);\n\nconst createColumnChart = (api) => {\n  api.createCrossFilterChart({\n    chartType: \"column\",\n    cellRange: {\n      columns: [\"country\", \"population\"],\n    },\n    aggFunc: \"count\",\n    chartThemeOverrides: {\n      common: {\n        title: {\n          enabled: true,\n          text: \"Number of Most Populous Cities by Country\",\n        },\n        legend: {\n          enabled: false,\n        },\n      },\n      bar: {\n        axes: {\n          category: {\n            label: {\n              rotation: 325,\n            },\n          },\n        },\n      },\n    },\n    chartContainer: document.querySelector(\"#barChart\"),\n  });\n};\n\nconst createBubbleChart = (api) => {\n  api.createCrossFilterChart({\n    chartType: \"bubble\",\n    cellRange: {\n      columns: [\"longitude\", \"latitude\", \"population\"],\n    },\n    chartThemeOverrides: {\n      common: {\n        title: {\n          enabled: true,\n          text: \"Latitude vs Longitude of Most Populous Cities\",\n        },\n        legend: {\n          enabled: false,\n        },\n      },\n    },\n    chartContainer: document.querySelector(\"#bubbleChart\"),\n  });\n};\n\nconst GridExample = () => {\n  const gridRef = useRef();\n  const containerStyle = useMemo(() => ({ width: \"100%\", height: \"100%\" }), []);\n  const gridStyle = useMemo(() => ({ height: \"100%\", width: \"100%\" }), []);\n\n  const [columnDefs, setColumnDefs] = useState([\n    { field: \"city\", chartDataType: \"category\" },\n    { field: \"country\", chartDataType: \"category\" },\n    { field: \"longitude\", chartDataType: \"series\" },\n    { field: \"latitude\", chartDataType: \"series\" },\n    { field: \"population\", chartDataType: \"series\" },\n  ]);\n  const defaultColDef = useMemo(() => {\n    return {\n      flex: 1,\n      editable: true,\n      filter: \"agMultiColumnFilter\",\n      floatingFilter: true,\n    };\n  }, []);\n\n  const onGridReady = useCallback((params) => {\n    getData().then((rowData) => params.api.setGridOption(\"rowData\", rowData));\n  }, []);\n  /** DARK INTEGRATED START **/ const [tick, setTick] = useState(0);\n  useEffect(() => {\n    setTick(1);\n    const isInitialModeDark =\n      document.documentElement.dataset.agThemeMode?.includes(\"dark\");\n\n    const updateChartThemes = (isDark) => {\n      const themes = [\n        \"ag-default\",\n        \"ag-material\",\n        \"ag-sheets\",\n        \"ag-polychroma\",\n        \"ag-vivid\",\n      ];\n      const currentThemes = gridRef.current?.api.getGridOption(\"chartThemes\");\n      const customTheme =\n        currentThemes &&\n        currentThemes.some((theme) => theme.startsWith(\"my-custom-theme\"));\n\n      let modifiedThemes = customTheme\n        ? isDark\n          ? [\"my-custom-theme-dark\", \"my-custom-theme-light\"]\n          : [\"my-custom-theme-light\", \"my-custom-theme-dark\"]\n        : Array.from(\n            new Set(themes.map((theme) => theme + (isDark ? \"-dark\" : \"\"))),\n          );\n\n      // updating the 'chartThemes' grid option will cause the chart to reactively update!\n      gridRef.current?.api.setGridOption(\"chartThemes\", modifiedThemes);\n    };\n\n    // update chart themes when example first loads\n    let initialSet = false;\n    const maxTries = 5;\n    let tries = 0;\n    const trySetInitial = (delay) => {\n      if (gridRef.current?.api) {\n        initialSet = true;\n        updateChartThemes(isInitialModeDark);\n      } else {\n        if (tries < maxTries) {\n          setTimeout(() => trySetInitial(), 250);\n          tries++;\n        }\n      }\n    };\n    trySetInitial(0);\n\n    const handleColorSchemeChange = (event) => {\n      const { darkMode } = event.detail;\n      updateChartThemes(darkMode);\n    };\n\n    // listen for user-triggered dark mode changes (not removing listener is fine here!)\n    document.addEventListener(\"color-scheme-change\", handleColorSchemeChange);\n  }, [gridRef.current]); /** DARK INTEGRATED END **/\n\n  const onFirstDataRendered = useCallback((params) => {\n    createColumnChart(params.api);\n    createBubbleChart(params.api);\n  }, []);\n\n  return (\n    <div style={containerStyle}>\n      <div id=\"wrapper\">\n        <div id=\"barChart\"></div>\n        <div id=\"bubbleChart\"></div>\n\n        <div style={gridStyle}>\n          <AgGridReact\n            ref={gridRef}\n            columnDefs={columnDefs}\n            defaultColDef={defaultColDef}\n            enableCharts={true}\n            onGridReady={onGridReady}\n            onFirstDataRendered={onFirstDataRendered}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst root = createRoot(document.getElementById(\"root\"));\nroot.render(\n  <StrictMode>\n    <GridExample />\n  </StrictMode>,\n);\nwindow.tearDownExample = () => root.unmount();\n","index.html":"<div id=\"wrapper\">\n    <div id=\"barChart\"></div>\n    <div id=\"bubbleChart\"></div>\n    <div id=\"myGrid\"></div>\n</div>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            jsx: 'react',\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            // react\n            react: 'npm:react@18.2.0',\n            'react-dom': 'npm:react-dom@18.2.0',\n            'react-dom/client': 'npm:react-dom@18.2.0',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            css: {},\n            react: {\n                main: './umd/react.production.min.js',\n            },\n            'react-dom': {\n                main: './umd/react-dom.production.min.js',\n            },\n            'react-dom/server': {\n                main: '../umd/react-dom-server.browser.production.min.js',\n            },\n            app: {\n                main: './index.jsx',\n                defaultExtension: 'jsx',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"react":"18","react-dom":"18","@types/react":"18","@types/react-dom":"18","ag-grid-react":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0","ag-charts-community":"latest","ag-charts-enterprise":"latest"}}}