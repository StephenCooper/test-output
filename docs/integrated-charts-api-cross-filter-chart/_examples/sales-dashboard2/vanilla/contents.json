{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":true,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["data.js","main.js"],"styleFiles":["style.css"],"files":{"style.css":"#wrapper {\n    height: 100%;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    padding: 10px;\n    box-sizing: border-box;\n}\n\n#top {\n    display: flex;\n    gap: 10px;\n    min-height: 300px;\n    max-height: 300px;\n}\n\n#lineChart {\n    width: 50%;\n    height: 100%;\n}\n\n#donutChart {\n    width: 50%;\n    height: 100%;\n}\n\n#areaChart {\n    min-height: 250px;\n    max-height: 250px;\n}\n\n#myGrid {\n    height: 25%;\n}\n","data.js":"const getData = async (delay = 100) =>\n    new Promise((resolve) => setTimeout(() => resolve(generateData()), delay));\n\nconst generateData = () => {\n    const numRows = 500;\n    const names = [\n        'Aden Moreno',\n        'Alton Watson',\n        'Caleb Scott',\n        'Cathy Wilkins',\n        'Charlie Dodd',\n        'Jermaine Price',\n        'Reis Vasquez',\n    ];\n    const phones = [\n        { handset: 'Huawei P40', price: 599 },\n        { handset: 'Google Pixel 5', price: 589 },\n        { handset: 'Apple iPhone 12', price: 849 },\n        { handset: 'Samsung Galaxy S10', price: 499 },\n        { handset: 'Motorola Edge', price: 549 },\n        { handset: 'Sony Xperia', price: 279 },\n    ];\n\n    return Array.from({ length: numRows }, () => {\n        const phone = phones[getRandomNumber(0, phones.length - 1)];\n        const saleDate = randomDate(new Date(2020, 0, 1), new Date(2020, 11, 31));\n        const quarter = `Q${Math.floor((saleDate.getMonth() + 3) / 3)}`;\n\n        return {\n            salesRep: names[getRandomNumber(0, names.length - 1)],\n            handset: phone.handset,\n            sale: phone.price,\n            saleDate,\n            quarter,\n        };\n    });\n};\n\nconst getRandomNumber = (min, max) => Math.floor(Math.random() * (max - min + 1) + min);\n\nconst randomDate = (start, end) =>\n    new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\n","main.js":"let gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    { field: \"salesRep\", chartDataType: \"category\" },\n    { field: \"handset\", chartDataType: \"category\" },\n    {\n      headerName: \"Sale Price\",\n      field: \"sale\",\n      maxWidth: 160,\n      aggFunc: \"sum\",\n      filter: \"agNumberColumnFilter\",\n      chartDataType: \"series\",\n    },\n    {\n      field: \"saleDate\",\n      chartDataType: \"category\",\n      filter: \"agSetColumnFilter\",\n      filterParams: {\n        valueFormatter: (params) => `${params.value}`,\n      },\n      sort: \"asc\",\n    },\n    {\n      field: \"quarter\",\n      maxWidth: 160,\n      filter: \"agSetColumnFilter\",\n      chartDataType: \"category\",\n    },\n  ],\n  defaultColDef: {\n    flex: 1,\n    editable: true,\n    filter: \"agMultiColumnFilter\",\n    floatingFilter: true,\n  },\n  enableCharts: true,\n  chartThemeOverrides: {\n    bar: {\n      axes: {\n        category: {\n          label: {\n            rotation: 0,\n          },\n        },\n      },\n    },\n  },\n  onGridReady: (params) => {\n    getData().then((rowData) => params.api.setGridOption(\"rowData\", rowData));\n  },\n  onFirstDataRendered,\n};\n\nfunction onFirstDataRendered(params) {\n  createQuarterlySalesChart(params.api);\n  createSalesByRefChart(params.api);\n  createHandsetSalesChart(params.api);\n}\n\nfunction createQuarterlySalesChart(api) {\n  api.createCrossFilterChart({\n    chartType: \"line\",\n    cellRange: {\n      columns: [\"quarter\", \"sale\"],\n    },\n    aggFunc: \"sum\",\n    chartThemeOverrides: {\n      common: {\n        title: {\n          enabled: true,\n          text: \"Quarterly Sales ($)\",\n        },\n        axes: {\n          category: {\n            label: {\n              rotation: 0,\n            },\n          },\n          number: {\n            label: {\n              formatter: (params) => {\n                return params.value / 1000 + \"k\";\n              },\n            },\n          },\n        },\n      },\n    },\n    chartContainer: document.querySelector(\"#lineChart\"),\n  });\n}\n\nfunction createSalesByRefChart(api) {\n  api.createCrossFilterChart({\n    chartType: \"donut\",\n    cellRange: {\n      columns: [\"salesRep\", \"sale\"],\n    },\n    aggFunc: \"sum\",\n    chartThemeOverrides: {\n      common: {\n        title: {\n          enabled: true,\n          text: \"Sales by Representative ($)\",\n        },\n      },\n      pie: {\n        legend: {\n          position: \"right\",\n        },\n        series: {\n          title: {\n            enabled: false,\n          },\n          calloutLabel: {\n            enabled: false,\n          },\n        },\n      },\n    },\n    chartContainer: document.querySelector(\"#donutChart\"),\n  });\n}\n\nfunction createHandsetSalesChart(api) {\n  api.createCrossFilterChart({\n    chartType: \"area\",\n    cellRange: {\n      columns: [\"handset\", \"sale\"],\n    },\n    aggFunc: \"count\",\n    chartThemeOverrides: {\n      common: {\n        title: {\n          enabled: true,\n          text: \"Handsets Sold (Units)\",\n        },\n        padding: { left: 47, right: 80 },\n      },\n    },\n    chartContainer: document.querySelector(\"#areaChart\"),\n  });\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  gridApi = agGrid.createGrid(\n    document.querySelector(\"#myGrid\"),\n    gridOptions,\n  ); /** DARK INTEGRATED START **/\n  const isInitialModeDark =\n    document.documentElement.dataset.agThemeMode?.includes(\"dark\");\n\n  const updateChartThemes = (isDark) => {\n    const themes = [\n      \"ag-default\",\n      \"ag-material\",\n      \"ag-sheets\",\n      \"ag-polychroma\",\n      \"ag-vivid\",\n    ];\n    const currentThemes = gridApi.getGridOption(\"chartThemes\");\n    const customTheme =\n      currentThemes &&\n      currentThemes.some((theme) => theme.startsWith(\"my-custom-theme\"));\n\n    let modifiedThemes = customTheme\n      ? isDark\n        ? [\"my-custom-theme-dark\", \"my-custom-theme-light\"]\n        : [\"my-custom-theme-light\", \"my-custom-theme-dark\"]\n      : Array.from(\n          new Set(themes.map((theme) => theme + (isDark ? \"-dark\" : \"\"))),\n        );\n\n    // updating the 'chartThemes' grid option will cause the chart to reactively update!\n    gridApi.setGridOption(\"chartThemes\", modifiedThemes);\n  };\n\n  // update chart themes when example first loads\n  let initialSet = false;\n  const maxTries = 5;\n  let tries = 0;\n  const trySetInitial = (delay) => {\n    if (gridApi) {\n      initialSet = true;\n      updateChartThemes(isInitialModeDark);\n    } else {\n      if (tries < maxTries) {\n        setTimeout(() => trySetInitial(), 250);\n        tries++;\n      }\n    }\n  };\n  trySetInitial(0);\n\n  const handleColorSchemeChange = (event) => {\n    const { darkMode } = event.detail;\n    updateChartThemes(darkMode);\n  };\n\n  // listen for user-triggered dark mode changes (not removing listener is fine here!)\n  document.addEventListener(\"color-scheme-change\", handleColorSchemeChange);\n  /** DARK INTEGRATED END **/\n});\n","index.html":"<div id=\"wrapper\">\n    <div id=\"top\">\n        <div id=\"lineChart\"></div>\n        <div id=\"donutChart\"></div>\n    </div>\n    <div id=\"areaChart\"></div>\n    <div id=\"myGrid\"></div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0","ag-charts-community":"latest","ag-charts-enterprise":"latest"}}}