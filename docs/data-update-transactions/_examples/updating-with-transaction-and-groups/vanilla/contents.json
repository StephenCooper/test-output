{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["data.js","main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n\n.category-for-sale {\n    font-weight: bold;\n    background-color: #33cc3344;\n}\n.category-sold {\n    font-weight: bold;\n    background-color: #2244cc44;\n}\n.category-in-workshop {\n    font-weight: bold;\n    background-color: #ccaa22a9;\n}\n.bt-action {\n    margin: 0px;\n}\n","data.js":"function getData() {\n    const rowData = [];\n\n    for (let i = 0; i < 10; i++) {\n        const category = categories[i % categories.length];\n        rowData.push(createNewRowData(category));\n    }\n    return rowData;\n}\n\n// make the data three 10 times bigger\nconst names = ['Elly', 'Shane', 'Niall', 'Rob', 'John', 'Sean', 'Dicky', 'Willy', 'Shaggy', 'Spud', 'Sugar', 'Spice'];\nconst models = [\n    'Mondeo',\n    'Celica',\n    'Boxster',\n    'Minty',\n    'Snacky',\n    'FastCar',\n    'Biscuit',\n    'Whoooper',\n    'Scoooper',\n    'Jet Blaster',\n];\nvar categories = ['Sold', 'For Sale', 'In Workshop'];\n\nfunction createNewRowData(category) {\n    const newData = {\n        // use make if provided, otherwise select random make\n        category: category,\n        model: models[Math.floor(Math.random() * models.length)],\n        price: Math.floor(Math.random() * 800000) + 20000,\n        zombies: names[Math.floor(Math.random() * names.length)],\n        style: 'Smooth',\n        clothes: 'Jeans',\n    };\n    return newData;\n}\n","main.js":"function poundFormatter(params) {\n  return (\n    \"Â£\" +\n    Math.floor(params.value)\n      .toString()\n      .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\")\n  );\n}\n\nlet gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    { field: \"category\", rowGroupIndex: 1, hide: true },\n    { field: \"price\", aggFunc: \"sum\", valueFormatter: poundFormatter },\n    { field: \"zombies\" },\n    { field: \"style\" },\n    { field: \"clothes\" },\n  ],\n  defaultColDef: {\n    flex: 1,\n    width: 100,\n  },\n  autoGroupColumnDef: {\n    headerName: \"Group\",\n    minWidth: 250,\n    field: \"model\",\n    rowGroupIndex: 1,\n    cellRenderer: \"agGroupCellRenderer\",\n  },\n  groupDefaultExpanded: 1,\n  rowData: getData(),\n  rowSelection: {\n    mode: \"multiRow\",\n    groupSelects: \"descendants\",\n    headerCheckbox: false,\n    checkboxLocation: \"autoGroupColumn\",\n  },\n  suppressAggFuncInHeader: true,\n  // this allows the different colors per group, by assigning a different\n  // css class to each group level based on the key\n  getRowClass: (params) => {\n    const rowNode = params.node;\n    if (rowNode.group) {\n      switch (rowNode.key) {\n        case \"In Workshop\":\n          return \"category-in-workshop\";\n        case \"Sold\":\n          return \"category-sold\";\n        case \"For Sale\":\n          return \"category-for-sale\";\n        default:\n          return undefined;\n      }\n    } else {\n      // no extra classes for leaf rows\n      return undefined;\n    }\n  },\n};\n\nfunction getRowData() {\n  const rowData = [];\n  gridApi.forEachNode(function (node) {\n    rowData.push(node.data);\n  });\n  console.log(\"Row Data:\");\n  console.log(rowData);\n}\n\nfunction onAddRow(category) {\n  const rowDataItem = createNewRowData(category);\n  gridApi.applyTransaction({ add: [rowDataItem] });\n}\n\nfunction onMoveToGroup(category) {\n  const selectedRowData = gridApi.getSelectedRows();\n  selectedRowData.forEach((dataItem) => {\n    dataItem.category = category;\n  });\n  gridApi.applyTransaction({ update: selectedRowData });\n}\n\nfunction onRemoveSelected() {\n  const selectedRowData = gridApi.getSelectedRows();\n  gridApi.applyTransaction({ remove: selectedRowData });\n}\n\n// wait for the document to be loaded, otherwise\n// AG Grid will not find the div in the document.\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const eGridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(eGridDiv, gridOptions);\n});\n","index.html":"<div class=\"example-wrapper\">\n    <div style=\"margin-bottom: 5px\">\n        <div>\n            <button class=\"bt-action\" onclick=\"onAddRow('For Sale')\">Add For Sale</button>\n            <button class=\"bt-action\" onclick=\"onAddRow('In Workshop')\">Add In Workshop</button>\n            <button class=\"bt-action\" onclick=\"onRemoveSelected()\">Remove Selected</button>\n            <button class=\"bt-action\" onclick=\"getRowData()\">Get Row Data</button>\n        </div>\n        <div style=\"margin-top: 5px\">\n            <button class=\"bt-action\" onclick=\"onMoveToGroup('For Sale')\">Move to For Sale</button>\n            <button class=\"bt-action\" onclick=\"onMoveToGroup('In Workshop')\">Move to In Workshop</button>\n            <button class=\"bt-action\" onclick=\"onMoveToGroup('Sold')\">Move to Sold</button>\n        </div>\n    </div>\n\n    <div id=\"myGrid\"></div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}