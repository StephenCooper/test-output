{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"app.component.ts","styleFiles":[],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n\n.category-for-sale {\n    font-weight: bold;\n    background-color: #33cc3344;\n}\n.category-sold {\n    font-weight: bold;\n    background-color: #2244cc44;\n}\n.category-in-workshop {\n    font-weight: bold;\n    background-color: #ccaa22a9;\n}\n.bt-action {\n    margin: 0px;\n}\n","data.ts":"export function getData(): any[] {\n    const rowData = [];\n\n    for (let i = 0; i < 10; i++) {\n        const category = categories[i % categories.length];\n        rowData.push(createNewRowData(category));\n    }\n    return rowData;\n}\n\n// make the data three 10 times bigger\nconst names = ['Elly', 'Shane', 'Niall', 'Rob', 'John', 'Sean', 'Dicky', 'Willy', 'Shaggy', 'Spud', 'Sugar', 'Spice'];\nconst models = [\n    'Mondeo',\n    'Celica',\n    'Boxster',\n    'Minty',\n    'Snacky',\n    'FastCar',\n    'Biscuit',\n    'Whoooper',\n    'Scoooper',\n    'Jet Blaster',\n];\nvar categories = ['Sold', 'For Sale', 'In Workshop'];\n\nexport function createNewRowData(category: string) {\n    const newData = {\n        // use make if provided, otherwise select random make\n        category: category,\n        model: models[Math.floor(Math.random() * models.length)],\n        price: Math.floor(Math.random() * 800000) + 20000,\n        zombies: names[Math.floor(Math.random() * names.length)],\n        style: 'Smooth',\n        clothes: 'Jeans',\n    };\n    return newData;\n}\n","main.ts":"import '@angular/compiler';\nimport { provideHttpClient } from '@angular/common/http';\nimport { enableProdMode } from '@angular/core';\nimport { bootstrapApplication } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\nif ((window as any).ENABLE_PROD_MODE) {\n    enableProdMode();\n}\n\nbootstrapApplication(AppComponent, {\n    providers: [provideHttpClient()],\n});\n","app.component.ts":"import { Component } from \"@angular/core\";\nimport { AgGridAngular } from \"ag-grid-angular\";\nimport \"./styles.css\";\nimport {\n  ClientSideRowModelApiModule,\n  ClientSideRowModelModule,\n  ColDef,\n  ColGroupDef,\n  GridApi,\n  GridOptions,\n  GridReadyEvent,\n  ModuleRegistry,\n  RowApiModule,\n  RowClassParams,\n  RowSelectionModule,\n  RowSelectionOptions,\n  RowStyleModule,\n  ValidationModule,\n  ValueFormatterParams,\n  createGrid,\n} from \"ag-grid-community\";\nimport { RowGroupingModule } from \"ag-grid-enterprise\";\nimport { createNewRowData, getData } from \"./data\";\nModuleRegistry.registerModules([\n  ClientSideRowModelApiModule,\n  RowSelectionModule,\n  RowApiModule,\n  RowStyleModule,\n  ClientSideRowModelModule,\n  RowGroupingModule,\n  ValidationModule /* Development Only */,\n]);\n\n@Component({\n  selector: \"my-app\",\n  standalone: true,\n  imports: [AgGridAngular],\n  template: `<div class=\"example-wrapper\">\n    <div style=\"margin-bottom: 5px\">\n      <div>\n        <button class=\"bt-action\" (click)=\"onAddRow('For Sale')\">\n          Add For Sale\n        </button>\n        <button class=\"bt-action\" (click)=\"onAddRow('In Workshop')\">\n          Add In Workshop\n        </button>\n        <button class=\"bt-action\" (click)=\"onRemoveSelected()\">\n          Remove Selected\n        </button>\n        <button class=\"bt-action\" (click)=\"getRowData()\">Get Row Data</button>\n      </div>\n      <div style=\"margin-top: 5px\">\n        <button class=\"bt-action\" (click)=\"onMoveToGroup('For Sale')\">\n          Move to For Sale\n        </button>\n        <button class=\"bt-action\" (click)=\"onMoveToGroup('In Workshop')\">\n          Move to In Workshop\n        </button>\n        <button class=\"bt-action\" (click)=\"onMoveToGroup('Sold')\">\n          Move to Sold\n        </button>\n      </div>\n    </div>\n\n    <ag-grid-angular\n      style=\"width: 100%; height: 100%;\"\n      [columnDefs]=\"columnDefs\"\n      [defaultColDef]=\"defaultColDef\"\n      [autoGroupColumnDef]=\"autoGroupColumnDef\"\n      [groupDefaultExpanded]=\"groupDefaultExpanded\"\n      [rowData]=\"rowData\"\n      [rowSelection]=\"rowSelection\"\n      [suppressAggFuncInHeader]=\"true\"\n      [getRowClass]=\"getRowClass\"\n      (gridReady)=\"onGridReady($event)\"\n    />\n  </div> `,\n})\nexport class AppComponent {\n  private gridApi!: GridApi;\n\n  columnDefs: ColDef[] = [\n    { field: \"category\", rowGroupIndex: 1, hide: true },\n    { field: \"price\", aggFunc: \"sum\", valueFormatter: poundFormatter },\n    { field: \"zombies\" },\n    { field: \"style\" },\n    { field: \"clothes\" },\n  ];\n  defaultColDef: ColDef = {\n    flex: 1,\n    width: 100,\n  };\n  autoGroupColumnDef: ColDef = {\n    headerName: \"Group\",\n    minWidth: 250,\n    field: \"model\",\n    rowGroupIndex: 1,\n    cellRenderer: \"agGroupCellRenderer\",\n  };\n  groupDefaultExpanded = 1;\n  rowData: any[] | null = getData();\n  rowSelection: RowSelectionOptions | \"single\" | \"multiple\" = {\n    mode: \"multiRow\",\n    groupSelects: \"descendants\",\n    headerCheckbox: false,\n    checkboxLocation: \"autoGroupColumn\",\n  };\n  getRowClass: (params: RowClassParams) => string | string[] | undefined = (\n    params: RowClassParams,\n  ) => {\n    const rowNode = params.node;\n    if (rowNode.group) {\n      switch (rowNode.key) {\n        case \"In Workshop\":\n          return \"category-in-workshop\";\n        case \"Sold\":\n          return \"category-sold\";\n        case \"For Sale\":\n          return \"category-for-sale\";\n        default:\n          return undefined;\n      }\n    } else {\n      // no extra classes for leaf rows\n      return undefined;\n    }\n  };\n\n  getRowData() {\n    const rowData: any[] = [];\n    this.gridApi.forEachNode(function (node) {\n      rowData.push(node.data);\n    });\n    console.log(\"Row Data:\");\n    console.log(rowData);\n  }\n\n  onAddRow(category: string) {\n    const rowDataItem = createNewRowData(category);\n    this.gridApi.applyTransaction({ add: [rowDataItem] });\n  }\n\n  onMoveToGroup(category: string) {\n    const selectedRowData = this.gridApi.getSelectedRows();\n    selectedRowData.forEach((dataItem) => {\n      dataItem.category = category;\n    });\n    this.gridApi.applyTransaction({ update: selectedRowData });\n  }\n\n  onRemoveSelected() {\n    const selectedRowData = this.gridApi.getSelectedRows();\n    this.gridApi.applyTransaction({ remove: selectedRowData });\n  }\n\n  onGridReady(params: GridReadyEvent) {\n    this.gridApi = params.api;\n  }\n}\n\nfunction poundFormatter(params: ValueFormatterParams) {\n  return (\n    \"Â£\" +\n    Math.floor(params.value)\n      .toString()\n      .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\")\n  );\n}\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","main.ts":"import '@angular/compiler';\nimport { provideHttpClient } from '@angular/common/http';\nimport { enableProdMode } from '@angular/core';\nimport { bootstrapApplication } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\nif ((window as any).ENABLE_PROD_MODE) {\n    enableProdMode();\n}\n\nbootstrapApplication(AppComponent, {\n    providers: [provideHttpClient()],\n});\n","systemjs.config.js":"(function (global) {\n    var ANGULAR_VERSION = '^19';\n    window.ENABLE_PROD_MODE = true;\n\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true,\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        // map tells the System loader where to look for things\n        map: {\n            '@angular/compiler': 'npm:@angular/compiler@' + ANGULAR_VERSION + '/fesm2022/compiler.mjs',\n            '@angular/platform-browser-dynamic':\n                'npm:@angular/platform-browser-dynamic@' + ANGULAR_VERSION + '/fesm2022/platform-browser-dynamic.mjs',\n\n            '@angular/core': 'npm:@angular/core@' + ANGULAR_VERSION + '/fesm2022/core.mjs',\n            '@angular/core/primitives/signals':\n                'npm:@angular/core@' + ANGULAR_VERSION + '/fesm2022/primitives/signals.mjs',\n            '@angular/core/primitives/event-dispatch':\n                'npm:@angular/core@' + ANGULAR_VERSION + '/fesm2022/primitives/event-dispatch.mjs',\n            '@angular/common': 'npm:@angular/common@' + ANGULAR_VERSION + '/fesm2022/common.mjs',\n            '@angular/common/http': 'npm:@angular/common@' + ANGULAR_VERSION + '/fesm2022/http.mjs',\n\n            '@angular/platform-browser':\n                'npm:@angular/platform-browser@' + ANGULAR_VERSION + '/fesm2022/platform-browser.mjs',\n            '@angular/platform-browser/animations':\n                'npm:@angular/platform-browser@' + ANGULAR_VERSION + '/fesm2022/animations.mjs',\n\n            '@angular/forms': 'npm:@angular/forms@' + ANGULAR_VERSION + '/fesm2022/forms.mjs',\n            '@angular/animations': 'npm:@angular/animations@' + ANGULAR_VERSION + '/fesm2022/animations.mjs',\n            '@angular/animations/browser': 'npm:@angular/animations@' + ANGULAR_VERSION + '/fesm2022/browser.mjs',\n\n            rxjs: 'npm:rxjs@7.8.1/dist/bundles/rxjs.umd.min.js',\n            'rxjs/operators': 'npm:rxjs@7.8.1/dist/bundles/rxjs.umd.min.js',\n\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@4.4/lib/typescript.min.js',\n\n            // our app is within the app folder, appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap,\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {}, // Stop css.js from defaulting to apps .ts extension\n            app: {\n                main: './main.ts',\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-angular': {\n                main: './fesm2022/ag-grid-angular.mjs',\n                defaultExtension: 'mjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"@angular/core":"^19","@angular/common":"^19","@angular/forms":"^19","@angular/platform-browser":"^19","ag-grid-angular":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}