{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["data.js","main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".test-grid {\n    height: 1px;\n    min-height: 1px;\n    flex-grow: 1;\n}\n\n.test-container {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\n.test-header {\n    margin-bottom: 1rem;\n}\n\n.test-header button:not(:first-child) {\n    margin-left: 5px;\n}\n","data.js":"const LAPTOPS = ['Hewlett Packard', 'Lenovo', 'Dell', 'Asus', 'Apple', 'Acer', 'Microsoft', 'Razer'];\n\nlet idCounter = 0;\n\nfunction letter(i) {\n    return 'abcdefghijklmnopqrstuvwxyz'.substring(i, i + 1);\n}\n\nfunction randomLetter() {\n    return letter(Math.floor(Math.random() * 26 + 1));\n}\n\nfunction getData() {\n    const myRowData = [];\n    for (let i = 0; i < 20; i++) {\n        const name = 'Mr ' + randomLetter().toUpperCase();\n        const fixed = Boolean(Math.round(Math.random()));\n        const laptop = LAPTOPS[i % LAPTOPS.length];\n        const value = Math.floor(Math.random() * 100) + 10; // between 10 and 110\n\n        myRowData.push(createDataItem(name, laptop, fixed, value));\n    }\n    return myRowData;\n}\n\nfunction createDataItem(\n    name,\n    laptop,\n    fixed,\n    value,\n    idToUse = undefined\n) {\n    const id = idToUse != null ? idToUse : idCounter++;\n    return {\n        id: id,\n        name: name,\n        fixed: fixed,\n        laptop: laptop,\n        value: value,\n    };\n}\n","main.js":"function getRowId(params) {\n  return String(params.data.id);\n}\n\nlet gridApi;\nconst columnDefs = [\n  { field: \"name\" },\n  { field: \"laptop\" },\n  {\n    field: \"fixed\",\n    enableCellChangeFlash: true,\n  },\n  {\n    field: \"value\",\n    enableCellChangeFlash: true,\n    sort: \"desc\",\n  },\n];\n\nfunction onBtnApply() {\n  const updatedItems = [];\n  gridApi.forEachNode((rowNode) => {\n    const newValue = Math.floor(Math.random() * 100) + 10;\n    const newBoolean = Boolean(Math.round(Math.random()));\n    const newItem = createDataItem(\n      rowNode.data.name,\n      rowNode.data.laptop,\n      newBoolean,\n      newValue,\n      rowNode.data.id,\n    );\n    updatedItems.push(newItem);\n  });\n\n  gridApi.applyTransaction({ update: updatedItems });\n}\n\nfunction onBtnRefreshModel() {\n  gridApi.refreshClientSideRowModel(\"filter\");\n}\n\nconst gridOptions = {\n  columnDefs: columnDefs,\n  defaultColDef: {\n    flex: 1,\n    filter: true,\n    floatingFilter: true,\n  },\n  getRowId: getRowId,\n  suppressModelUpdateAfterUpdateTransaction: true,\n  onGridReady: (params) => {\n    params.api\n      .setColumnFilterModel(\"fixed\", {\n        filterType: \"set\",\n        values: [\"true\"],\n      })\n      .then(() => {\n        gridApi.onFilterChanged();\n      });\n    params.api.setGridOption(\"rowData\", getData());\n  },\n};\n\n// wait for the document to be loaded, otherwise\n// AG Grid will not find the div in the document.\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const eGridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(eGridDiv, gridOptions);\n});\n","index.html":"<div class=\"test-container\">\n    <div class=\"test-header\">\n        <button onclick=\"onBtnApply()\">Apply Transaction</button>\n        <button onclick=\"onBtnRefreshModel()\">Refresh Model</button>\n    </div>\n    <div id=\"myGrid\" class=\"test-grid\"></div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}