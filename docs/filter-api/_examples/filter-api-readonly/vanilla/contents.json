{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n\n.example-header {\n    padding-bottom: 1rem;\n}\n\n.button-group {\n    padding-bottom: 4px;\n    display: block;\n}\n","main.js":"const defaultFilterParams = { readOnly: true };\n\nconst columnDefs = [\n  {\n    field: \"athlete\",\n    filter: \"agTextColumnFilter\",\n    filterParams: defaultFilterParams,\n  },\n  {\n    field: \"age\",\n    filter: \"agNumberColumnFilter\",\n    filterParams: defaultFilterParams,\n  },\n  {\n    field: \"country\",\n    filter: \"agSetColumnFilter\",\n    filterParams: defaultFilterParams,\n  },\n  {\n    field: \"year\",\n    maxWidth: 120,\n    filter: \"agNumberColumnFilter\",\n    filterParams: defaultFilterParams,\n  },\n  {\n    field: \"date\",\n    minWidth: 215,\n    filter: \"agDateColumnFilter\",\n    filterParams: {\n      readOnly: true,\n      comparator: dateComparator,\n    },\n    suppressHeaderMenuButton: true,\n  },\n  {\n    field: \"sport\",\n    suppressHeaderMenuButton: true,\n    filter: \"agMultiColumnFilter\",\n    filterParams: {\n      filters: [\n        { filter: \"agTextColumnFilter\", filterParams: { readOnly: true } },\n        { filter: \"agSetColumnFilter\", filterParams: { readOnly: true } },\n      ],\n      readOnly: true,\n    },\n  },\n  { field: \"gold\", filterParams: defaultFilterParams },\n  { field: \"silver\", filterParams: defaultFilterParams },\n  { field: \"bronze\", filterParams: defaultFilterParams },\n  { field: \"total\", filter: false },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n  columnDefs: columnDefs,\n  defaultColDef: {\n    flex: 1,\n    minWidth: 150,\n    filter: true,\n    floatingFilter: true,\n  },\n};\n\nfunction irelandAndUk() {\n  gridApi\n    .setColumnFilterModel(\"country\", { values: [\"Ireland\", \"Great Britain\"] })\n    .then(() => {\n      gridApi.onFilterChanged();\n    });\n}\n\nfunction clearCountryFilter() {\n  gridApi.setColumnFilterModel(\"country\", null).then(() => {\n    gridApi.onFilterChanged();\n  });\n}\n\nfunction destroyCountryFilter() {\n  gridApi.destroyFilter(\"country\");\n}\n\nfunction endingStan() {\n  gridApi.getColumnFilterInstance(\"country\").then((countryFilterComponent) => {\n    const countriesEndingWithStan = countryFilterComponent\n      .getFilterKeys()\n      .filter(function (value) {\n        return value.indexOf(\"stan\") === value.length - 4;\n      });\n\n    gridApi\n      .setColumnFilterModel(\"country\", { values: countriesEndingWithStan })\n      .then(() => {\n        gridApi.onFilterChanged();\n      });\n  });\n}\n\nfunction printCountryModel() {\n  const model = gridApi.getColumnFilterModel(\"country\");\n\n  if (model) {\n    console.log(\"Country model is: \" + JSON.stringify(model));\n  } else {\n    console.log(\"Country model filter is not active\");\n  }\n}\n\nfunction sportStartsWithS() {\n  gridApi\n    .setColumnFilterModel(\"sport\", {\n      filterModels: [\n        {\n          type: \"startsWith\",\n          filter: \"s\",\n        },\n      ],\n    })\n    .then(() => {\n      gridApi.onFilterChanged();\n    });\n}\n\nfunction sportEndsWithG() {\n  gridApi\n    .setColumnFilterModel(\"sport\", {\n      filterModels: [\n        {\n          type: \"endsWith\",\n          filter: \"g\",\n        },\n      ],\n    })\n    .then(() => {\n      gridApi.onFilterChanged();\n    });\n}\n\nfunction sportsCombined() {\n  gridApi\n    .setColumnFilterModel(\"sport\", {\n      filterModels: [\n        {\n          conditions: [\n            {\n              type: \"endsWith\",\n              filter: \"g\",\n            },\n            {\n              type: \"startsWith\",\n              filter: \"s\",\n            },\n          ],\n          operator: \"AND\",\n        },\n      ],\n    })\n    .then(() => {\n      gridApi.onFilterChanged();\n    });\n}\n\nfunction ageBelow25() {\n  gridApi\n    .setColumnFilterModel(\"age\", {\n      type: \"lessThan\",\n      filter: 25,\n      filterTo: null,\n    })\n    .then(() => {\n      gridApi.onFilterChanged();\n    });\n}\n\nfunction ageAbove30() {\n  gridApi\n    .setColumnFilterModel(\"age\", {\n      type: \"greaterThan\",\n      filter: 30,\n      filterTo: null,\n    })\n    .then(() => {\n      gridApi.onFilterChanged();\n    });\n}\n\nfunction ageBelow25OrAbove30() {\n  gridApi\n    .setColumnFilterModel(\"age\", {\n      conditions: [\n        {\n          type: \"greaterThan\",\n          filter: 30,\n          filterTo: null,\n        },\n        {\n          type: \"lessThan\",\n          filter: 25,\n          filterTo: null,\n        },\n      ],\n      operator: \"OR\",\n    })\n    .then(() => {\n      gridApi.onFilterChanged();\n    });\n}\n\nfunction ageBetween25And30() {\n  gridApi\n    .setColumnFilterModel(\"age\", {\n      type: \"inRange\",\n      filter: 25,\n      filterTo: 30,\n    })\n    .then(() => {\n      gridApi.onFilterChanged();\n    });\n}\n\nfunction clearAgeFilter() {\n  gridApi.setColumnFilterModel(\"age\", null).then(() => {\n    gridApi.onFilterChanged();\n  });\n}\n\nfunction after2010() {\n  gridApi\n    .setColumnFilterModel(\"date\", {\n      type: \"greaterThan\",\n      dateFrom: \"2010-01-01\",\n      dateTo: null,\n    })\n    .then(() => {\n      gridApi.onFilterChanged();\n    });\n}\n\nfunction before2012() {\n  gridApi\n    .setColumnFilterModel(\"date\", {\n      type: \"lessThan\",\n      dateFrom: \"2012-01-01\",\n      dateTo: null,\n    })\n    .then(() => {\n      gridApi.onFilterChanged();\n    });\n}\n\nfunction dateCombined() {\n  gridApi\n    .setColumnFilterModel(\"date\", {\n      conditions: [\n        {\n          type: \"lessThan\",\n          dateFrom: \"2012-01-01\",\n          dateTo: null,\n        },\n        {\n          type: \"greaterThan\",\n          dateFrom: \"2010-01-01\",\n          dateTo: null,\n        },\n      ],\n      operator: \"OR\",\n    })\n    .then(() => {\n      gridApi.onFilterChanged();\n    });\n}\n\nfunction clearDateFilter() {\n  gridApi.setColumnFilterModel(\"date\", null).then(() => {\n    gridApi.onFilterChanged();\n  });\n}\n\nfunction clearSportFilter() {\n  gridApi.setColumnFilterModel(\"sport\", null).then(() => {\n    gridApi.onFilterChanged();\n  });\n}\n\nfunction dateComparator(filterLocalDateAtMidnight, cellValue) {\n  const dateAsString = cellValue;\n  if (dateAsString == null) return -1;\n  const dateParts = dateAsString.split(\"/\");\n  const cellDate = new Date(\n    Number(dateParts[2]),\n    Number(dateParts[1]) - 1,\n    Number(dateParts[0]),\n  );\n\n  if (filterLocalDateAtMidnight.getTime() === cellDate.getTime()) {\n    return 0;\n  }\n\n  if (cellDate < filterLocalDateAtMidnight) {\n    return -1;\n  }\n\n  if (cellDate > filterLocalDateAtMidnight) {\n    return 1;\n  }\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then((data) => gridApi.setGridOption(\"rowData\", data));\n});\n","index.html":"<div class=\"example-wrapper\">\n    <div class=\"example-header\">\n        <span class=\"button-group\">\n            <button onclick=\"irelandAndUk()\">Ireland &#x26; UK</button>\n            <button onclick=\"endingStan()\">Countries Ending 'stan'</button>\n            <button onclick=\"printCountryModel()\">Print Country</button>\n            <button onclick=\"clearCountryFilter()\">Clear Country</button>\n            <button onclick=\"destroyCountryFilter()\">Destroy Country</button>\n        </span>\n        <span class=\"button-group\">\n            <button onclick=\"ageBelow25()\">Age Below 25</button>\n            <button onclick=\"ageAbove30()\">Age Above 30</button>\n            <button onclick=\"ageBelow25OrAbove30()\">Age Below 25 or Above 30</button>\n            <button onclick=\"ageBetween25And30()\">Age Between 25 and 30</button>\n            <button onclick=\"clearAgeFilter()\">Clear Age Filter</button>\n        </span>\n        <span class=\"button-group\">\n            <button onclick=\"after2010()\">Date after 01/01/2010</button>\n            <button onclick=\"before2012()\">Date before 01/01/2012</button>\n            <button onclick=\"dateCombined()\">Date combined</button>\n            <button onclick=\"clearDateFilter()\">Clear Date Filter</button>\n        </span>\n        <span class=\"button-group\">\n            <button onclick=\"sportStartsWithS()\">Sport starts with S</button>\n            <button onclick=\"sportEndsWithG()\">Sport ends with G</button>\n            <button onclick=\"sportsCombined()\">Sport starts with S and ends with G</button>\n            <button onclick=\"clearSportFilter()\">Clear Sport Filter</button>\n        </span>\n    </div>\n    <div id=\"myGrid\" style=\"height: 100%\"></div>\n</div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}