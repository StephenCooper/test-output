{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"app.component.ts","styleFiles":[],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n\n.example-header {\n    padding-bottom: 1rem;\n}\n\n.button-group {\n    padding-bottom: 4px;\n    display: block;\n}\n","main.ts":"import '@angular/compiler';\nimport { provideHttpClient } from '@angular/common/http';\nimport { enableProdMode } from '@angular/core';\nimport { bootstrapApplication } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\nif ((window as any).ENABLE_PROD_MODE) {\n    enableProdMode();\n}\n\nbootstrapApplication(AppComponent, {\n    providers: [provideHttpClient()],\n});\n","app.component.ts":"import { Component } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { AgGridAngular } from \"ag-grid-angular\";\nimport \"./styles.css\";\nimport {\n  ClientSideRowModelModule,\n  ColDef,\n  ColGroupDef,\n  DateFilterModule,\n  GridApi,\n  GridOptions,\n  GridReadyEvent,\n  IDateFilterParams,\n  IMultiFilterParams,\n  IProvidedFilterParams,\n  ISetFilter,\n  ISetFilterParams,\n  ITextFilterParams,\n  ModuleRegistry,\n  NumberFilterModule,\n  TextFilterModule,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\nimport {\n  ColumnMenuModule,\n  ColumnsToolPanelModule,\n  ContextMenuModule,\n  MultiFilterModule,\n  SetFilterModule,\n} from \"ag-grid-enterprise\";\nModuleRegistry.registerModules([\n  ClientSideRowModelModule,\n  ColumnsToolPanelModule,\n  ColumnMenuModule,\n  ContextMenuModule,\n  MultiFilterModule,\n  SetFilterModule,\n  TextFilterModule,\n  NumberFilterModule,\n  DateFilterModule,\n  ValidationModule /* Development Only */,\n]);\nimport { IOlympicData } from \"./interfaces\";\n\n@Component({\n  selector: \"my-app\",\n  standalone: true,\n  imports: [AgGridAngular],\n  template: `<div class=\"example-wrapper\">\n    <div class=\"example-header\">\n      <span class=\"button-group\">\n        <button (click)=\"irelandAndUk()\">Ireland &amp; UK</button>\n        <button (click)=\"endingStan()\">Countries Ending 'stan'</button>\n        <button (click)=\"printCountryModel()\">Print Country</button>\n        <button (click)=\"clearCountryFilter()\">Clear Country</button>\n        <button (click)=\"destroyCountryFilter()\">Destroy Country</button>\n      </span>\n      <span class=\"button-group\">\n        <button (click)=\"ageBelow25()\">Age Below 25</button>\n        <button (click)=\"ageAbove30()\">Age Above 30</button>\n        <button (click)=\"ageBelow25OrAbove30()\">\n          Age Below 25 or Above 30\n        </button>\n        <button (click)=\"ageBetween25And30()\">Age Between 25 and 30</button>\n        <button (click)=\"clearAgeFilter()\">Clear Age Filter</button>\n      </span>\n      <span class=\"button-group\">\n        <button (click)=\"after2010()\">Date after 01/01/2010</button>\n        <button (click)=\"before2012()\">Date before 01/01/2012</button>\n        <button (click)=\"dateCombined()\">Date combined</button>\n        <button (click)=\"clearDateFilter()\">Clear Date Filter</button>\n      </span>\n      <span class=\"button-group\">\n        <button (click)=\"sportStartsWithS()\">Sport starts with S</button>\n        <button (click)=\"sportEndsWithG()\">Sport ends with G</button>\n        <button (click)=\"sportsCombined()\">\n          Sport starts with S and ends with G\n        </button>\n        <button (click)=\"clearSportFilter()\">Clear Sport Filter</button>\n      </span>\n    </div>\n    <ag-grid-angular\n      style=\"width: 100%; height: 100%;\"\n      [columnDefs]=\"columnDefs\"\n      [defaultColDef]=\"defaultColDef\"\n      [rowData]=\"rowData\"\n      (gridReady)=\"onGridReady($event)\"\n    />\n  </div> `,\n})\nexport class AppComponent {\n  private gridApi!: GridApi<IOlympicData>;\n\n  columnDefs: ColDef[] = [\n    {\n      field: \"athlete\",\n      filter: \"agTextColumnFilter\",\n      filterParams: defaultFilterParams,\n    },\n    {\n      field: \"age\",\n      filter: \"agNumberColumnFilter\",\n      filterParams: defaultFilterParams,\n    },\n    {\n      field: \"country\",\n      filter: \"agSetColumnFilter\",\n      filterParams: defaultFilterParams,\n    },\n    {\n      field: \"year\",\n      maxWidth: 120,\n      filter: \"agNumberColumnFilter\",\n      filterParams: defaultFilterParams,\n    },\n    {\n      field: \"date\",\n      minWidth: 215,\n      filter: \"agDateColumnFilter\",\n      filterParams: {\n        readOnly: true,\n        comparator: dateComparator,\n      } as IDateFilterParams,\n      suppressHeaderMenuButton: true,\n    },\n    {\n      field: \"sport\",\n      suppressHeaderMenuButton: true,\n      filter: \"agMultiColumnFilter\",\n      filterParams: {\n        filters: [\n          {\n            filter: \"agTextColumnFilter\",\n            filterParams: { readOnly: true } as ITextFilterParams,\n          },\n          {\n            filter: \"agSetColumnFilter\",\n            filterParams: { readOnly: true } as ISetFilterParams,\n          },\n        ],\n        readOnly: true,\n      } as IMultiFilterParams,\n    },\n    { field: \"gold\", filterParams: defaultFilterParams },\n    { field: \"silver\", filterParams: defaultFilterParams },\n    { field: \"bronze\", filterParams: defaultFilterParams },\n    { field: \"total\", filter: false },\n  ];\n  defaultColDef: ColDef = {\n    flex: 1,\n    minWidth: 150,\n    filter: true,\n    floatingFilter: true,\n  };\n  rowData!: IOlympicData[];\n\n  constructor(private http: HttpClient) {}\n\n  irelandAndUk() {\n    this.gridApi\n      .setColumnFilterModel(\"country\", { values: [\"Ireland\", \"Great Britain\"] })\n      .then(() => {\n        this.gridApi.onFilterChanged();\n      });\n  }\n\n  clearCountryFilter() {\n    this.gridApi.setColumnFilterModel(\"country\", null).then(() => {\n      this.gridApi.onFilterChanged();\n    });\n  }\n\n  destroyCountryFilter() {\n    this.gridApi.destroyFilter(\"country\");\n  }\n\n  endingStan() {\n    this.gridApi\n      .getColumnFilterInstance<ISetFilter>(\"country\")\n      .then((countryFilterComponent) => {\n        const countriesEndingWithStan = countryFilterComponent!\n          .getFilterKeys()\n          .filter(function (value: any) {\n            return value.indexOf(\"stan\") === value.length - 4;\n          });\n        this.gridApi\n          .setColumnFilterModel(\"country\", { values: countriesEndingWithStan })\n          .then(() => {\n            this.gridApi.onFilterChanged();\n          });\n      });\n  }\n\n  printCountryModel() {\n    const model = this.gridApi.getColumnFilterModel(\"country\");\n    if (model) {\n      console.log(\"Country model is: \" + JSON.stringify(model));\n    } else {\n      console.log(\"Country model filter is not active\");\n    }\n  }\n\n  sportStartsWithS() {\n    this.gridApi\n      .setColumnFilterModel(\"sport\", {\n        filterModels: [\n          {\n            type: \"startsWith\",\n            filter: \"s\",\n          },\n        ],\n      })\n      .then(() => {\n        this.gridApi.onFilterChanged();\n      });\n  }\n\n  sportEndsWithG() {\n    this.gridApi\n      .setColumnFilterModel(\"sport\", {\n        filterModels: [\n          {\n            type: \"endsWith\",\n            filter: \"g\",\n          },\n        ],\n      })\n      .then(() => {\n        this.gridApi.onFilterChanged();\n      });\n  }\n\n  sportsCombined() {\n    this.gridApi\n      .setColumnFilterModel(\"sport\", {\n        filterModels: [\n          {\n            conditions: [\n              {\n                type: \"endsWith\",\n                filter: \"g\",\n              },\n              {\n                type: \"startsWith\",\n                filter: \"s\",\n              },\n            ],\n            operator: \"AND\",\n          },\n        ],\n      })\n      .then(() => {\n        this.gridApi.onFilterChanged();\n      });\n  }\n\n  ageBelow25() {\n    this.gridApi\n      .setColumnFilterModel(\"age\", {\n        type: \"lessThan\",\n        filter: 25,\n        filterTo: null,\n      })\n      .then(() => {\n        this.gridApi.onFilterChanged();\n      });\n  }\n\n  ageAbove30() {\n    this.gridApi\n      .setColumnFilterModel(\"age\", {\n        type: \"greaterThan\",\n        filter: 30,\n        filterTo: null,\n      })\n      .then(() => {\n        this.gridApi.onFilterChanged();\n      });\n  }\n\n  ageBelow25OrAbove30() {\n    this.gridApi\n      .setColumnFilterModel(\"age\", {\n        conditions: [\n          {\n            type: \"greaterThan\",\n            filter: 30,\n            filterTo: null,\n          },\n          {\n            type: \"lessThan\",\n            filter: 25,\n            filterTo: null,\n          },\n        ],\n        operator: \"OR\",\n      })\n      .then(() => {\n        this.gridApi.onFilterChanged();\n      });\n  }\n\n  ageBetween25And30() {\n    this.gridApi\n      .setColumnFilterModel(\"age\", {\n        type: \"inRange\",\n        filter: 25,\n        filterTo: 30,\n      })\n      .then(() => {\n        this.gridApi.onFilterChanged();\n      });\n  }\n\n  clearAgeFilter() {\n    this.gridApi.setColumnFilterModel(\"age\", null).then(() => {\n      this.gridApi.onFilterChanged();\n    });\n  }\n\n  after2010() {\n    this.gridApi\n      .setColumnFilterModel(\"date\", {\n        type: \"greaterThan\",\n        dateFrom: \"2010-01-01\",\n        dateTo: null,\n      })\n      .then(() => {\n        this.gridApi.onFilterChanged();\n      });\n  }\n\n  before2012() {\n    this.gridApi\n      .setColumnFilterModel(\"date\", {\n        type: \"lessThan\",\n        dateFrom: \"2012-01-01\",\n        dateTo: null,\n      })\n      .then(() => {\n        this.gridApi.onFilterChanged();\n      });\n  }\n\n  dateCombined() {\n    this.gridApi\n      .setColumnFilterModel(\"date\", {\n        conditions: [\n          {\n            type: \"lessThan\",\n            dateFrom: \"2012-01-01\",\n            dateTo: null,\n          },\n          {\n            type: \"greaterThan\",\n            dateFrom: \"2010-01-01\",\n            dateTo: null,\n          },\n        ],\n        operator: \"OR\",\n      })\n      .then(() => {\n        this.gridApi.onFilterChanged();\n      });\n  }\n\n  clearDateFilter() {\n    this.gridApi.setColumnFilterModel(\"date\", null).then(() => {\n      this.gridApi.onFilterChanged();\n    });\n  }\n\n  clearSportFilter() {\n    this.gridApi.setColumnFilterModel(\"sport\", null).then(() => {\n      this.gridApi.onFilterChanged();\n    });\n  }\n\n  onGridReady(params: GridReadyEvent<IOlympicData>) {\n    this.gridApi = params.api;\n\n    this.http\n      .get<\n        IOlympicData[]\n      >(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n      .subscribe((data) => (this.rowData = data));\n  }\n}\n\nconst defaultFilterParams: IProvidedFilterParams = { readOnly: true };\nfunction dateComparator(filterLocalDateAtMidnight: Date, cellValue: Date) {\n  const dateAsString = cellValue;\n  if (dateAsString == null) return -1;\n  const dateParts = dateAsString.split(\"/\");\n  const cellDate = new Date(\n    Number(dateParts[2]),\n    Number(dateParts[1]) - 1,\n    Number(dateParts[0]),\n  );\n  if (filterLocalDateAtMidnight.getTime() === cellDate.getTime()) {\n    return 0;\n  }\n  if (cellDate < filterLocalDateAtMidnight) {\n    return -1;\n  }\n  if (cellDate > filterLocalDateAtMidnight) {\n    return 1;\n  }\n}\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","main.ts":"import '@angular/compiler';\nimport { provideHttpClient } from '@angular/common/http';\nimport { enableProdMode } from '@angular/core';\nimport { bootstrapApplication } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\nif ((window as any).ENABLE_PROD_MODE) {\n    enableProdMode();\n}\n\nbootstrapApplication(AppComponent, {\n    providers: [provideHttpClient()],\n});\n","systemjs.config.js":"(function (global) {\n    var ANGULAR_VERSION = '^19';\n    window.ENABLE_PROD_MODE = true;\n\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true,\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        // map tells the System loader where to look for things\n        map: {\n            '@angular/compiler': 'npm:@angular/compiler@' + ANGULAR_VERSION + '/fesm2022/compiler.mjs',\n            '@angular/platform-browser-dynamic':\n                'npm:@angular/platform-browser-dynamic@' + ANGULAR_VERSION + '/fesm2022/platform-browser-dynamic.mjs',\n\n            '@angular/core': 'npm:@angular/core@' + ANGULAR_VERSION + '/fesm2022/core.mjs',\n            '@angular/core/primitives/signals':\n                'npm:@angular/core@' + ANGULAR_VERSION + '/fesm2022/primitives/signals.mjs',\n            '@angular/core/primitives/event-dispatch':\n                'npm:@angular/core@' + ANGULAR_VERSION + '/fesm2022/primitives/event-dispatch.mjs',\n            '@angular/common': 'npm:@angular/common@' + ANGULAR_VERSION + '/fesm2022/common.mjs',\n            '@angular/common/http': 'npm:@angular/common@' + ANGULAR_VERSION + '/fesm2022/http.mjs',\n\n            '@angular/platform-browser':\n                'npm:@angular/platform-browser@' + ANGULAR_VERSION + '/fesm2022/platform-browser.mjs',\n            '@angular/platform-browser/animations':\n                'npm:@angular/platform-browser@' + ANGULAR_VERSION + '/fesm2022/animations.mjs',\n\n            '@angular/forms': 'npm:@angular/forms@' + ANGULAR_VERSION + '/fesm2022/forms.mjs',\n            '@angular/animations': 'npm:@angular/animations@' + ANGULAR_VERSION + '/fesm2022/animations.mjs',\n            '@angular/animations/browser': 'npm:@angular/animations@' + ANGULAR_VERSION + '/fesm2022/browser.mjs',\n\n            rxjs: 'npm:rxjs@7.8.1/dist/bundles/rxjs.umd.min.js',\n            'rxjs/operators': 'npm:rxjs@7.8.1/dist/bundles/rxjs.umd.min.js',\n\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@4.4/lib/typescript.min.js',\n\n            // our app is within the app folder, appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap,\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {}, // Stop css.js from defaulting to apps .ts extension\n            app: {\n                main: './main.ts',\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-angular': {\n                main: './fesm2022/ag-grid-angular.mjs',\n                defaultExtension: 'mjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"@angular/core":"^19","@angular/common":"^19","@angular/forms":"^19","@angular/platform-browser":"^19","ag-grid-angular":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}