{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["numericCellEditor.js","main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n","numericCellEditor.js":"\nfunction isCharNumeric(charStr) {\n    return charStr != null && !!/^\\d+$/.test(charStr);\n}\n\nfunction isNumericKey(event) {\n    const charStr = event.key;\n    return isCharNumeric(charStr);\n}\n\nclass NumericCellEditor  {\n    focusAfterAttached;\n    eInput;\n    cancelBeforeStart;\n\n    init(params) {\n        // we only want to highlight this cell if it started the edit; it's possible\n        // another cell in this row started the edit\n        this.focusAfterAttached = params.cellStartedEdit;\n\n        this.eInput = document.createElement('input');\n        this.eInput.classList.add('ag-input-field-input');\n        this.eInput.style.width = '100%';\n\n        this.eInput.value = isCharNumeric(params.eventKey) ? params.eventKey : params.value;\n\n        this.eInput.addEventListener('keydown', (event) => {\n            if (!event.key || event.key.length !== 1 || isNumericKey(event)) {\n                return;\n            }\n            this.eInput.focus();\n\n            if (event.preventDefault) event.preventDefault();\n        });\n    }\n\n    getGui() {\n        return this.eInput;\n    }\n\n    afterGuiAttached() {\n        if (this.focusAfterAttached) {\n            this.eInput.focus();\n            this.eInput.select();\n        }\n    }\n\n    getValue() {\n        return this.eInput.value;\n    }\n\n    // when we tab into this editor, we want to focus the contents\n    focusIn() {\n        this.eInput.focus();\n        this.eInput.select();\n        console.log('NumericCellEditor.focusIn()');\n    }\n\n    // when we tab out of the editor, this gets called\n    focusOut() {\n        console.log('NumericCellEditor.focusOut()');\n    }\n}\n","main.js":"let gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    {\n      field: \"make\",\n      cellEditor: \"agSelectCellEditor\",\n      cellEditorParams: {\n        values: [\"Porsche\", \"Toyota\", \"Ford\", \"AAA\", \"BBB\", \"CCC\"],\n      },\n    },\n    { field: \"model\" },\n    { field: \"field4\", headerName: \"Read Only\", editable: false },\n    { field: \"price\", cellEditor: NumericCellEditor },\n    {\n      headerName: \"Suppress Navigable\",\n      field: \"field5\",\n      suppressNavigable: true,\n      minWidth: 200,\n    },\n    { headerName: \"Read Only\", field: \"field6\", editable: false },\n  ],\n  defaultColDef: {\n    flex: 1,\n    editable: true,\n    cellDataType: false,\n  },\n  editType: \"fullRow\",\n  rowData: getRowData(),\n\n  onCellValueChanged: onCellValueChanged,\n  onRowValueChanged: onRowValueChanged,\n};\n\nfunction onCellValueChanged(event) {\n  console.log(\n    \"onCellValueChanged: \" + event.colDef.field + \" = \" + event.newValue,\n  );\n}\n\nfunction onRowValueChanged(event) {\n  const data = event.data;\n  console.log(\n    \"onRowValueChanged: (\" +\n      data.make +\n      \", \" +\n      data.model +\n      \", \" +\n      data.price +\n      \", \" +\n      data.field5 +\n      \")\",\n  );\n}\n\nfunction getRowData() {\n  const rowData = [];\n  for (let i = 0; i < 10; i++) {\n    rowData.push({\n      make: \"Toyota\",\n      model: \"Celica\",\n      price: 35000 + i * 1000,\n      field4: \"Sample XX\",\n      field5: \"Sample 22\",\n      field6: \"Sample 23\",\n    });\n    rowData.push({\n      make: \"Ford\",\n      model: \"Mondeo\",\n      price: 32000 + i * 1000,\n      field4: \"Sample YY\",\n      field5: \"Sample 24\",\n      field6: \"Sample 25\",\n    });\n    rowData.push({\n      make: \"Porsche\",\n      model: \"Boxster\",\n      price: 72000 + i * 1000,\n      field4: \"Sample ZZ\",\n      field5: \"Sample 26\",\n      field6: \"Sample 27\",\n    });\n  }\n  return rowData;\n}\n\nfunction onBtStopEditing() {\n  gridApi.stopEditing();\n}\n\nfunction onBtStartEditing() {\n  gridApi.setFocusedCell(1, \"make\");\n  gridApi.startEditingCell({\n    rowIndex: 1,\n    colKey: \"make\",\n  });\n}\n\n// wait for the document to be loaded, otherwise\n// AG Grid will not find the div in the document.\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const eGridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(eGridDiv, gridOptions);\n});\n","index.html":"<div class=\"example-wrapper\">\n    <div style=\"margin-bottom: 5px\">\n        <button style=\"font-size: 12px\" onclick=\"onBtStartEditing()\">Start Editing Line 2</button>\n        <button style=\"font-size: 12px\" onclick=\"onBtStopEditing()\">Stop Editing</button>\n    </div>\n    <div id=\"myGrid\"></div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}