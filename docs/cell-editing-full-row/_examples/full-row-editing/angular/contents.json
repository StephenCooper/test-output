{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"app.component.ts","styleFiles":[],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n","numeric-cell-editor.component.ts":"import type { AfterViewInit } from '@angular/core';\nimport { Component, ViewChild, ViewContainerRef } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport type { ICellEditorAngularComp } from 'ag-grid-angular';\nimport type { ICellEditorParams } from 'ag-grid-community';\n\n@Component({\n    standalone: true,\n    imports: [FormsModule],\n    template: `<input #input (keydown)=\"onKeyDown($event)\" [(ngModel)]=\"value\" class=\"ag-input-field-input\" />`,\n})\nexport class NumericCellEditor implements ICellEditorAngularComp, AfterViewInit {\n    public value!: string;\n    private focusAfterAttached!: boolean;\n\n    @ViewChild('input', { read: ViewContainerRef }) public input!: ViewContainerRef;\n\n    agInit(params: ICellEditorParams): void {\n        // we only want to highlight this cell if it started the edit; it's possible\n        // another cell in this row started the edit\n        this.focusAfterAttached = params.cellStartedEdit;\n\n        this.value = this.isCharNumeric(params.eventKey) ? params.eventKey : params.value;\n    }\n\n    getValue(): number | null {\n        const value = this.value;\n        return value === '' || value == null ? null : parseInt(value);\n    }\n\n    onKeyDown(event: any): void {\n        if (!event.key || event.key.length !== 1 || this.isNumericKey(event)) {\n            return;\n        }\n        this.input.element.nativeElement.focus();\n\n        if (event.preventDefault) event.preventDefault();\n    }\n\n    ngAfterViewInit() {\n        window.setTimeout(() => {\n            if (this.focusAfterAttached) {\n                this.input.element.nativeElement.focus();\n                this.input.element.nativeElement.select();\n            }\n        });\n    }\n\n    // when we tab into this editor, we want to focus the contents\n    focusIn() {\n        this.input.element.nativeElement.focus();\n        this.input.element.nativeElement.select();\n        console.log('NumericCellEditor.focusIn()');\n    }\n\n    // when we tab out of the editor, this gets called\n    focusOut() {\n        console.log('NumericCellEditor.focusOut()');\n    }\n\n    private isCharNumeric(charStr: string | null): boolean {\n        return charStr != null && !!/^\\d+$/.test(charStr);\n    }\n\n    private isNumericKey(event: any): boolean {\n        const charStr = event.key;\n        return this.isCharNumeric(charStr);\n    }\n}\n","main.ts":"import '@angular/compiler';\nimport { provideHttpClient } from '@angular/common/http';\nimport { enableProdMode } from '@angular/core';\nimport { bootstrapApplication } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\nif ((window as any).ENABLE_PROD_MODE) {\n    enableProdMode();\n}\n\nbootstrapApplication(AppComponent, {\n    providers: [provideHttpClient()],\n});\n","app.component.ts":"import { Component } from \"@angular/core\";\nimport { AgGridAngular } from \"ag-grid-angular\";\nimport \"./styles.css\";\nimport {\n  CellValueChangedEvent,\n  ClientSideRowModelModule,\n  ColDef,\n  ColGroupDef,\n  CustomEditorModule,\n  GridApi,\n  GridOptions,\n  GridReadyEvent,\n  ModuleRegistry,\n  RowValueChangedEvent,\n  SelectEditorModule,\n  TextEditorModule,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\nimport {\n  ColumnMenuModule,\n  ColumnsToolPanelModule,\n  ContextMenuModule,\n} from \"ag-grid-enterprise\";\nModuleRegistry.registerModules([\n  ClientSideRowModelModule,\n  ColumnsToolPanelModule,\n  ColumnMenuModule,\n  ContextMenuModule,\n  SelectEditorModule,\n  TextEditorModule,\n  CustomEditorModule,\n  ValidationModule /* Development Only */,\n]);\nimport { NumericCellEditor } from \"./numeric-cell-editor.component\";\n\n@Component({\n  selector: \"my-app\",\n  standalone: true,\n  imports: [AgGridAngular, NumericCellEditor],\n  template: `<div class=\"example-wrapper\">\n    <div style=\"margin-bottom: 5px\">\n      <button style=\"font-size: 12px\" (click)=\"onBtStartEditing()\">\n        Start Editing Line 2\n      </button>\n      <button style=\"font-size: 12px\" (click)=\"onBtStopEditing()\">\n        Stop Editing\n      </button>\n    </div>\n    <ag-grid-angular\n      style=\"width: 100%; height: 100%;\"\n      [columnDefs]=\"columnDefs\"\n      [defaultColDef]=\"defaultColDef\"\n      [editType]=\"editType\"\n      [rowData]=\"rowData\"\n      (cellValueChanged)=\"onCellValueChanged($event)\"\n      (rowValueChanged)=\"onRowValueChanged($event)\"\n      (gridReady)=\"onGridReady($event)\"\n    />\n  </div> `,\n})\nexport class AppComponent {\n  private gridApi!: GridApi;\n\n  columnDefs: ColDef[] = [\n    {\n      field: \"make\",\n      cellEditor: \"agSelectCellEditor\",\n      cellEditorParams: {\n        values: [\"Porsche\", \"Toyota\", \"Ford\", \"AAA\", \"BBB\", \"CCC\"],\n      },\n    },\n    { field: \"model\" },\n    { field: \"field4\", headerName: \"Read Only\", editable: false },\n    { field: \"price\", cellEditor: NumericCellEditor },\n    {\n      headerName: \"Suppress Navigable\",\n      field: \"field5\",\n      suppressNavigable: true,\n      minWidth: 200,\n    },\n    { headerName: \"Read Only\", field: \"field6\", editable: false },\n  ];\n  defaultColDef: ColDef = {\n    flex: 1,\n    editable: true,\n    cellDataType: false,\n  };\n  editType: \"fullRow\" = \"fullRow\";\n  rowData: any[] | null = getRowData();\n\n  onCellValueChanged(event: CellValueChangedEvent) {\n    console.log(\n      \"onCellValueChanged: \" + event.colDef.field + \" = \" + event.newValue,\n    );\n  }\n\n  onRowValueChanged(event: RowValueChangedEvent) {\n    const data = event.data;\n    console.log(\n      \"onRowValueChanged: (\" +\n        data.make +\n        \", \" +\n        data.model +\n        \", \" +\n        data.price +\n        \", \" +\n        data.field5 +\n        \")\",\n    );\n  }\n\n  onBtStopEditing() {\n    this.gridApi.stopEditing();\n  }\n\n  onBtStartEditing() {\n    this.gridApi.setFocusedCell(1, \"make\");\n    this.gridApi.startEditingCell({\n      rowIndex: 1,\n      colKey: \"make\",\n    });\n  }\n\n  onGridReady(params: GridReadyEvent) {\n    this.gridApi = params.api;\n  }\n}\n\nfunction getRowData() {\n  const rowData = [];\n  for (let i = 0; i < 10; i++) {\n    rowData.push({\n      make: \"Toyota\",\n      model: \"Celica\",\n      price: 35000 + i * 1000,\n      field4: \"Sample XX\",\n      field5: \"Sample 22\",\n      field6: \"Sample 23\",\n    });\n    rowData.push({\n      make: \"Ford\",\n      model: \"Mondeo\",\n      price: 32000 + i * 1000,\n      field4: \"Sample YY\",\n      field5: \"Sample 24\",\n      field6: \"Sample 25\",\n    });\n    rowData.push({\n      make: \"Porsche\",\n      model: \"Boxster\",\n      price: 72000 + i * 1000,\n      field4: \"Sample ZZ\",\n      field5: \"Sample 26\",\n      field6: \"Sample 27\",\n    });\n  }\n  return rowData;\n}\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","main.ts":"import '@angular/compiler';\nimport { provideHttpClient } from '@angular/common/http';\nimport { enableProdMode } from '@angular/core';\nimport { bootstrapApplication } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\nif ((window as any).ENABLE_PROD_MODE) {\n    enableProdMode();\n}\n\nbootstrapApplication(AppComponent, {\n    providers: [provideHttpClient()],\n});\n","systemjs.config.js":"(function (global) {\n    var ANGULAR_VERSION = '^19';\n    window.ENABLE_PROD_MODE = true;\n\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true,\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        // map tells the System loader where to look for things\n        map: {\n            '@angular/compiler': 'npm:@angular/compiler@' + ANGULAR_VERSION + '/fesm2022/compiler.mjs',\n            '@angular/platform-browser-dynamic':\n                'npm:@angular/platform-browser-dynamic@' + ANGULAR_VERSION + '/fesm2022/platform-browser-dynamic.mjs',\n\n            '@angular/core': 'npm:@angular/core@' + ANGULAR_VERSION + '/fesm2022/core.mjs',\n            '@angular/core/primitives/signals':\n                'npm:@angular/core@' + ANGULAR_VERSION + '/fesm2022/primitives/signals.mjs',\n            '@angular/core/primitives/event-dispatch':\n                'npm:@angular/core@' + ANGULAR_VERSION + '/fesm2022/primitives/event-dispatch.mjs',\n            '@angular/common': 'npm:@angular/common@' + ANGULAR_VERSION + '/fesm2022/common.mjs',\n            '@angular/common/http': 'npm:@angular/common@' + ANGULAR_VERSION + '/fesm2022/http.mjs',\n\n            '@angular/platform-browser':\n                'npm:@angular/platform-browser@' + ANGULAR_VERSION + '/fesm2022/platform-browser.mjs',\n            '@angular/platform-browser/animations':\n                'npm:@angular/platform-browser@' + ANGULAR_VERSION + '/fesm2022/animations.mjs',\n\n            '@angular/forms': 'npm:@angular/forms@' + ANGULAR_VERSION + '/fesm2022/forms.mjs',\n            '@angular/animations': 'npm:@angular/animations@' + ANGULAR_VERSION + '/fesm2022/animations.mjs',\n            '@angular/animations/browser': 'npm:@angular/animations@' + ANGULAR_VERSION + '/fesm2022/browser.mjs',\n\n            rxjs: 'npm:rxjs@7.8.1/dist/bundles/rxjs.umd.min.js',\n            'rxjs/operators': 'npm:rxjs@7.8.1/dist/bundles/rxjs.umd.min.js',\n\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@4.4/lib/typescript.min.js',\n\n            // our app is within the app folder, appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap,\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {}, // Stop css.js from defaulting to apps .ts extension\n            app: {\n                main: './main.ts',\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-angular': {\n                main: './fesm2022/ag-grid-angular.mjs',\n                defaultExtension: 'mjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"@angular/core":"^19","@angular/common":"^19","@angular/forms":"^19","@angular/platform-browser":"^19","ag-grid-angular":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}