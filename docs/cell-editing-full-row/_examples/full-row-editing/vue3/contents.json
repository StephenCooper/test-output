{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"main.ts","styleFiles":[],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n","numericCellEditorVue.ts":"import { nextTick } from 'vue';\n\nexport default {\n    template: `<input :ref=\"'input'\" @keydown=\"onKeyDown($event)\" v-model=\"value\" class=\"ag-input-field-input\" />`,\n    data() {\n        return {\n            value: '',\n            focusAfterAttached: false,\n        };\n    },\n    methods: {\n        getValue() {\n            const value = this.value;\n            return value === '' || value == null ? null : parseInt(value);\n        },\n\n        onKeyDown(event) {\n            if (!event.key || event.key.length !== 1 || this.isNumericKey(event)) {\n                return;\n            }\n            this.$refs.input.focus();\n\n            if (event.preventDefault) event.preventDefault();\n        },\n\n        // when we tab into this editor, we want to focus the contents\n        focusIn() {\n            this.$refs.input.focus();\n            this.$refs.input.select();\n            console.log('NumericCellEditor.focusIn()');\n        },\n\n        // when we tab out of the editor, this gets called\n        focusOut() {\n            console.log('NumericCellEditor.focusOut()');\n        },\n\n        isCharNumeric(charStr) {\n            return charStr != null && !!/^\\d+$/.test(charStr);\n        },\n\n        isNumericKey(event) {\n            const charStr = event.key;\n            return this.isCharNumeric(charStr);\n        },\n    },\n\n    created() {\n        // we only want to highlight this cell if it started the edit; it's possible\n        // another cell in this row started the edit\n        this.focusAfterAttached = this.params.cellStartedEdit;\n\n        this.value = this.isCharNumeric(this.params.eventKey) ? this.params.eventKey : this.params.value;\n    },\n    mounted() {\n        nextTick(() => {\n            if (this.$refs.input) {\n                if (this.focusAfterAttached) {\n                    this.$refs.input.focus();\n                    this.$refs.input.select();\n                }\n            }\n        });\n    },\n};\n","main.ts":"import {\n  createApp,\n  defineComponent,\n  onBeforeMount,\n  ref,\n  shallowRef,\n} from \"vue\";\nimport { AgGridVue } from \"ag-grid-vue3\";\nimport \"./styles.css\";\nimport {\n  CellValueChangedEvent,\n  ClientSideRowModelModule,\n  ColDef,\n  ColGroupDef,\n  CustomEditorModule,\n  GridApi,\n  GridOptions,\n  GridReadyEvent,\n  ModuleRegistry,\n  RowValueChangedEvent,\n  SelectEditorModule,\n  TextEditorModule,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\nimport {\n  ColumnMenuModule,\n  ColumnsToolPanelModule,\n  ContextMenuModule,\n} from \"ag-grid-enterprise\";\nimport NumericCellEditor from \"./numericCellEditorVue\";\nModuleRegistry.registerModules([\n  ClientSideRowModelModule,\n  ColumnsToolPanelModule,\n  ColumnMenuModule,\n  ContextMenuModule,\n  SelectEditorModule,\n  TextEditorModule,\n  CustomEditorModule,\n  ValidationModule /* Development Only */,\n]);\n\nfunction getRowData() {\n  const rowData = [];\n  for (let i = 0; i < 10; i++) {\n    rowData.push({\n      make: \"Toyota\",\n      model: \"Celica\",\n      price: 35000 + i * 1000,\n      field4: \"Sample XX\",\n      field5: \"Sample 22\",\n      field6: \"Sample 23\",\n    });\n    rowData.push({\n      make: \"Ford\",\n      model: \"Mondeo\",\n      price: 32000 + i * 1000,\n      field4: \"Sample YY\",\n      field5: \"Sample 24\",\n      field6: \"Sample 25\",\n    });\n    rowData.push({\n      make: \"Porsche\",\n      model: \"Boxster\",\n      price: 72000 + i * 1000,\n      field4: \"Sample ZZ\",\n      field5: \"Sample 26\",\n      field6: \"Sample 27\",\n    });\n  }\n  return rowData;\n}\n\nconst VueExample = defineComponent({\n  template: `\n        <div style=\"height: 100%\">\n                <div class=\"example-wrapper\">\n      <div style=\"margin-bottom: 5px\">\n        <button style=\"font-size: 12px\" v-on:click=\"onBtStartEditing()\">Start Editing Line 2</button>\n        <button style=\"font-size: 12px\" v-on:click=\"onBtStopEditing()\">Stop Editing</button>\n      </div>\n      <ag-grid-vue\n        style=\"width: 100%; height: 100%;\"\n        @grid-ready=\"onGridReady\"\n        :columnDefs=\"columnDefs\"\n        :defaultColDef=\"defaultColDef\"\n        :editType=\"editType\"\n        :rowData=\"rowData\"\n        @cell-value-changed=\"onCellValueChanged\"\n        @row-value-changed=\"onRowValueChanged\"></ag-grid-vue>\n      </div>\n        </div>\n    `,\n  components: {\n    \"ag-grid-vue\": AgGridVue,\n    NumericCellEditor,\n  },\n  setup(props) {\n    const gridApi = shallowRef<GridApi | null>(null);\n    const columnDefs = ref<ColDef[]>([\n      {\n        field: \"make\",\n        cellEditor: \"agSelectCellEditor\",\n        cellEditorParams: {\n          values: [\"Porsche\", \"Toyota\", \"Ford\", \"AAA\", \"BBB\", \"CCC\"],\n        },\n      },\n      { field: \"model\" },\n      { field: \"field4\", headerName: \"Read Only\", editable: false },\n      { field: \"price\", cellEditor: \"NumericCellEditor\" },\n      {\n        headerName: \"Suppress Navigable\",\n        field: \"field5\",\n        suppressNavigable: true,\n        minWidth: 200,\n      },\n      { headerName: \"Read Only\", field: \"field6\", editable: false },\n    ]);\n    const defaultColDef = ref<ColDef>({\n      flex: 1,\n      editable: true,\n      cellDataType: false,\n    });\n    const editType = ref<\"fullRow\">(\"fullRow\");\n    const rowData = ref<any[] | null>(getRowData());\n\n    function onCellValueChanged(event: CellValueChangedEvent) {\n      console.log(\n        \"onCellValueChanged: \" + event.colDef.field + \" = \" + event.newValue,\n      );\n    }\n    function onRowValueChanged(event: RowValueChangedEvent) {\n      const data = event.data;\n      console.log(\n        \"onRowValueChanged: (\" +\n          data.make +\n          \", \" +\n          data.model +\n          \", \" +\n          data.price +\n          \", \" +\n          data.field5 +\n          \")\",\n      );\n    }\n    function onBtStopEditing() {\n      gridApi.value!.stopEditing();\n    }\n    function onBtStartEditing() {\n      gridApi.value!.setFocusedCell(1, \"make\");\n      gridApi.value!.startEditingCell({\n        rowIndex: 1,\n        colKey: \"make\",\n      });\n    }\n    const onGridReady = (params: GridReadyEvent) => {\n      gridApi.value = params.api;\n    };\n\n    return {\n      gridApi,\n      columnDefs,\n      defaultColDef,\n      editType,\n      rowData,\n      onGridReady,\n      onCellValueChanged,\n      onRowValueChanged,\n      onBtStopEditing,\n      onBtStartEditing,\n    };\n  },\n});\n\ncreateApp(VueExample).mount(\"#app\");\n","index.html":"<div class=\"example-wrapper\">\n    <div style=\"margin-bottom: 5px\">\n        <button style=\"font-size: 12px\" onclick=\"onBtStartEditing()\">Start Editing Line 2</button>\n        <button style=\"font-size: 12px\" onclick=\"onBtStopEditing()\">Stop Editing</button>\n    </div>\n    <div id=\"myGrid\"></div>\n</div>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        defaultExtension: 'js',\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            vue: 'npm:vue@3.5.0/dist/vue.esm-browser.js',\n            '@vue/reactivity': 'npm:@vue/reactivity@3.0.0/dist/reactivity.esm-browser.prod.js',\n\n            // vue class component\n            'vue-class-component': 'npm:vue-class-component@^8.0.0-beta.3/dist/vue-class-component.cjs.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            'css.js': {\n                defaultExtension: 'js',\n            },\n            vue: {\n                defaultExtension: 'js',\n            },\n            app: {\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-vue3': {\n                main: './dist/main.umd.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"vue":"^3.5.0","ag-grid-vue3":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}