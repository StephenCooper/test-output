{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"index.jsx","mainFileName":"index.jsx","scriptFiles":[],"styleFiles":[],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n","index.jsx":"'use client';\nimport React, { StrictMode, useCallback, useMemo, useRef, useState, } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { ClientSideRowModelModule, CustomEditorModule, ModuleRegistry, SelectEditorModule, TextEditorModule, ValidationModule, } from \"ag-grid-community\";\nimport { ColumnMenuModule, ColumnsToolPanelModule, ContextMenuModule, } from \"ag-grid-enterprise\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport NumericCellEditor from \"./numericCellEditor\";\nimport \"./styles.css\";\nModuleRegistry.registerModules([\n    SelectEditorModule,\n    ClientSideRowModelModule,\n    ColumnsToolPanelModule,\n    ColumnMenuModule,\n    ContextMenuModule,\n    CustomEditorModule,\n    TextEditorModule,\n    ValidationModule /* Development Only */,\n]);\nfunction getRowData() {\n    const rowData = [];\n    for (let i = 0; i < 10; i++) {\n        rowData.push({\n            make: \"Toyota\",\n            model: \"Celica\",\n            price: 35000 + i * 1000,\n            field4: \"Sample XX\",\n            field5: \"Sample 22\",\n            field6: \"Sample 23\",\n        });\n        rowData.push({\n            make: \"Ford\",\n            model: \"Mondeo\",\n            price: 32000 + i * 1000,\n            field4: \"Sample YY\",\n            field5: \"Sample 24\",\n            field6: \"Sample 25\",\n        });\n        rowData.push({\n            make: \"Porsche\",\n            model: \"Boxster\",\n            price: 72000 + i * 1000,\n            field4: \"Sample ZZ\",\n            field5: \"Sample 26\",\n            field6: \"Sample 27\",\n        });\n    }\n    return rowData;\n}\nconst GridExample = () => {\n    const gridRef = useRef(null);\n    const containerStyle = useMemo(() => ({ width: \"100%\", height: \"100%\" }), []);\n    const gridStyle = useMemo(() => ({ height: \"100%\", width: \"100%\" }), []);\n    const [rowData, setRowData] = useState(getRowData());\n    const [columnDefs, setColumnDefs] = useState([\n        {\n            field: \"make\",\n            cellEditor: \"agSelectCellEditor\",\n            cellEditorParams: {\n                values: [\"Porsche\", \"Toyota\", \"Ford\", \"AAA\", \"BBB\", \"CCC\"],\n            },\n        },\n        { field: \"model\" },\n        { field: \"field4\", headerName: \"Read Only\", editable: false },\n        { field: \"price\", cellEditor: NumericCellEditor },\n        {\n            headerName: \"Suppress Navigable\",\n            field: \"field5\",\n            suppressNavigable: true,\n            minWidth: 200,\n        },\n        { headerName: \"Read Only\", field: \"field6\", editable: false },\n    ]);\n    const defaultColDef = useMemo(() => {\n        return {\n            flex: 1,\n            editable: true,\n            cellDataType: false,\n        };\n    }, []);\n    const onCellValueChanged = useCallback((event) => {\n        console.log(\"onCellValueChanged: \" + event.colDef.field + \" = \" + event.newValue);\n    }, []);\n    const onRowValueChanged = useCallback((event) => {\n        const data = event.data;\n        console.log(\"onRowValueChanged: (\" +\n            data.make +\n            \", \" +\n            data.model +\n            \", \" +\n            data.price +\n            \", \" +\n            data.field5 +\n            \")\");\n    }, []);\n    const onBtStopEditing = useCallback(() => {\n        gridRef.current.api.stopEditing();\n    }, []);\n    const onBtStartEditing = useCallback(() => {\n        gridRef.current.api.setFocusedCell(1, \"make\");\n        gridRef.current.api.startEditingCell({\n            rowIndex: 1,\n            colKey: \"make\",\n        });\n    }, []);\n    return (<div style={containerStyle}>\n      <div className=\"example-wrapper\">\n        <div style={{ marginBottom: \"5px\" }}>\n          <button style={{ fontSize: \"12px\" }} onClick={onBtStartEditing}>\n            Start Editing Line 2\n          </button>\n          <button style={{ fontSize: \"12px\" }} onClick={onBtStopEditing}>\n            Stop Editing\n          </button>\n        </div>\n        <div style={gridStyle}>\n          <AgGridReact ref={gridRef} rowData={rowData} columnDefs={columnDefs} defaultColDef={defaultColDef} editType={\"fullRow\"} onCellValueChanged={onCellValueChanged} onRowValueChanged={onRowValueChanged}/>\n        </div>\n      </div>\n    </div>);\n};\nconst root = createRoot(document.getElementById(\"root\"));\nroot.render(<StrictMode>\n    <GridExample />\n  </StrictMode>);\n","numericCellEditor.jsx":"import React, { memo, useCallback, useEffect, useRef } from \"react\";\nimport { useGridCellEditor } from \"ag-grid-react\";\nexport default memo(({ value, onValueChange, eventKey, cellStartedEdit, }) => {\n    const refInput = useRef(null);\n    const updateValue = (val) => {\n        onValueChange(val === \"\" ? null : parseInt(val));\n    };\n    useEffect(() => {\n        updateValue(isCharNumeric(eventKey) ? eventKey : value);\n        // we only want to highlight this cell if it started the edit; it's possible\n        // another cell in this row started the edit\n        if (cellStartedEdit) {\n            refInput.current?.focus();\n            refInput.current?.select();\n        }\n    }, []);\n    const isCharNumeric = (charStr) => {\n        return charStr != null && !!/^\\d+$/.test(charStr);\n    };\n    const isNumericKey = (event) => {\n        const charStr = event.key;\n        return isCharNumeric(charStr);\n    };\n    const onKeyDown = (event) => {\n        if (!event.key || event.key.length !== 1 || isNumericKey(event)) {\n            return;\n        }\n        refInput.current?.focus();\n        if (event.preventDefault)\n            event.preventDefault();\n    };\n    // when we tab into this editor, we want to focus the contents\n    const focusIn = useCallback(() => {\n        refInput.current?.focus();\n        refInput.current?.select();\n        console.log(\"NumericCellEditor.focusIn()\");\n    }, []);\n    // when we tab out of the editor, this gets called\n    const focusOut = useCallback(() => {\n        console.log(\"NumericCellEditor.focusOut()\");\n    }, []);\n    useGridCellEditor({\n        focusIn,\n        focusOut,\n    });\n    return (<input ref={refInput} value={value == null ? \"\" : value} onChange={(event) => updateValue(event.target.value)} onKeyDown={(event) => onKeyDown(event)} className=\"ag-input-field-input\"/>);\n});\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            jsx: 'react',\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            // react\n            react: 'npm:react@18.2.0',\n            'react-dom': 'npm:react-dom@18.2.0',\n            'react-dom/client': 'npm:react-dom@18.2.0',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            css: {},\n            react: {\n                main: './umd/react.production.min.js',\n            },\n            'react-dom': {\n                main: './umd/react-dom.production.min.js',\n            },\n            'react-dom/server': {\n                main: '../umd/react-dom-server.browser.production.min.js',\n            },\n            app: {\n                main: './index.jsx',\n                defaultExtension: 'jsx',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"react":"18","react-dom":"18","@types/react":"18","@types/react-dom":"18","ag-grid-react":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}