{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":true,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".chart-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 410px;\n    overflow: hidden;\n    margin-top: 0.5rem;\n    border: 1px solid var(--ag-border-color);\n}\n\n.chart-wrapper-top {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 1rem;\n}\n\n.chart-wrapper-body {\n    border-top: 1px solid var(--ag-border-color);\n    height: 100%;\n}\n\n.chart-placeholder {\n    background-color: var(--ag-background-color);\n    color: var(--ag-foreground-color);\n    height: 100%;\n    text-align: center;\n    align-content: center;\n}\n","main.js":"let gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    { field: \"athlete\", width: 150, chartDataType: \"category\" },\n    { field: \"gold\", chartDataType: \"series\" },\n    { field: \"silver\", chartDataType: \"series\" },\n    { field: \"bronze\", chartDataType: \"series\" },\n    { field: \"total\", chartDataType: \"series\" },\n  ],\n  defaultColDef: { flex: 1 },\n  cellSelection: true,\n  enableCharts: true,\n  popupParent: document.body,\n  createChartContainer,\n};\n\nfunction updateChart(chartRef) {\n  const eParent = document.querySelector(\"#chartParent\");\n  eParent.innerHTML = \"\"; // Clear existing content\n  const placeHolder = `<div class=\"chart-placeholder\">Chart will be displayed here.</div>`;\n\n  if (chartRef) {\n    const chartWrapperHTML = `\n    <div class=\"chart-wrapper\">\n      <div class=\"chart-wrapper-top\">\n        <h2 class=\"chart-wrapper-title\">Chart created ${new Date().toLocaleString()}</h2>\n        <button class=\"chart-wrapper-close\">Destroy Chart</button>\n      </div>\n      <div class=\"chart-wrapper-body\"></div>\n    </div>\n  `;\n    eParent.insertAdjacentHTML(\"beforeend\", chartWrapperHTML);\n    const eChartWrapper = eParent.lastElementChild;\n\n    eChartWrapper\n      .querySelector(\".chart-wrapper-body\")\n      .appendChild(chartRef.chartElement);\n    eChartWrapper\n      .querySelector(\".chart-wrapper-close\")\n      .addEventListener(\"click\", () => {\n        chartRef.destroyChart();\n        eParent.innerHTML = placeHolder;\n      });\n  } else {\n    eParent.innerHTML = placeHolder;\n  }\n}\n\n// Function for creating the chart container\nfunction createChartContainer(chartRef) {\n  updateChart(chartRef);\n}\n\n// setup the grid after the page has finished loading\nconst gridDiv = document.querySelector(\"#myGrid\");\ngridApi = agGrid.createGrid(gridDiv, gridOptions); /** DARK INTEGRATED START **/\nconst isInitialModeDark =\n  document.documentElement.dataset.agThemeMode?.includes(\"dark\");\n\nconst updateChartThemes = (isDark) => {\n  const themes = [\n    \"ag-default\",\n    \"ag-material\",\n    \"ag-sheets\",\n    \"ag-polychroma\",\n    \"ag-vivid\",\n  ];\n  const currentThemes = gridApi.getGridOption(\"chartThemes\");\n  const customTheme =\n    currentThemes &&\n    currentThemes.some((theme) => theme.startsWith(\"my-custom-theme\"));\n\n  let modifiedThemes = customTheme\n    ? isDark\n      ? [\"my-custom-theme-dark\", \"my-custom-theme-light\"]\n      : [\"my-custom-theme-light\", \"my-custom-theme-dark\"]\n    : Array.from(\n        new Set(themes.map((theme) => theme + (isDark ? \"-dark\" : \"\"))),\n      );\n\n  // updating the 'chartThemes' grid option will cause the chart to reactively update!\n  gridApi.setGridOption(\"chartThemes\", modifiedThemes);\n};\n\n// update chart themes when example first loads\nlet initialSet = false;\nconst maxTries = 5;\nlet tries = 0;\nconst trySetInitial = (delay) => {\n  if (gridApi) {\n    initialSet = true;\n    updateChartThemes(isInitialModeDark);\n  } else {\n    if (tries < maxTries) {\n      setTimeout(() => trySetInitial(), 250);\n      tries++;\n    }\n  }\n};\ntrySetInitial(0);\n\nconst handleColorSchemeChange = (event) => {\n  const { darkMode } = event.detail;\n  updateChartThemes(darkMode);\n};\n\n// listen for user-triggered dark mode changes (not removing listener is fine here!)\ndocument.addEventListener(\"color-scheme-change\", handleColorSchemeChange);\n/** DARK INTEGRATED END **/\nupdateChart(undefined);\n\nfetch(\"https://www.ag-grid.com/example-assets/wide-spread-of-sports.json\")\n  .then((response) => response.json())\n  .then(function (data) {\n    gridApi.setGridOption(\"rowData\", data);\n  });\n","index.html":"<div id=\"container\">\n    <div id=\"myGrid\" style=\"height: 300px\"></div>\n    <div id=\"chartParent\" class=\"chart-wrapper\"></div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0","ag-charts-community":"latest","ag-charts-enterprise":"latest"}}}