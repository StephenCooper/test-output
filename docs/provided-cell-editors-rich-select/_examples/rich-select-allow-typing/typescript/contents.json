{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"main.ts","styleFiles":[],"files":{"colors.ts":"export const colors: string[] = [\n    'AliceBlue',\n    'AntiqueWhite',\n    'Aqua',\n    'Aquamarine',\n    'Azure',\n    'Beige',\n    'Bisque',\n    'Black',\n    'BlanchedAlmond',\n    'Blue',\n    'BlueViolet',\n    'Brown',\n    'BurlyWood',\n    'CadetBlue',\n    'Chartreuse',\n    'Chocolate',\n    'Coral',\n    'CornflowerBlue',\n    'Cornsilk',\n    'Crimson',\n    'Cyan',\n    'DarkBlue',\n    'DarkCyan',\n    'DarkGoldenrod',\n    'DarkGray',\n    'DarkGreen',\n    'DarkGrey',\n    'DarkKhaki',\n    'DarkMagenta',\n    'DarkOliveGreen',\n    'DarkOrange',\n    'DarkOrchid',\n    'DarkRed',\n    'DarkSalmon',\n    'DarkSeaGreen',\n    'DarkSlateBlue',\n    'DarkSlateGray',\n    'DarkSlateGrey',\n    'DarkTurquoise',\n    'DarkViolet',\n    'DeepPink',\n    'DeepSkyBlue',\n    'DimGray',\n    'DodgerBlue',\n    'FireBrick',\n    'FloralWhite',\n    'ForestGreen',\n    'Fuchsia',\n    'Gainsboro',\n    'GhostWhite',\n    'Gold',\n    'Goldenrod',\n    'Gray',\n    'Green',\n    'GreenYellow',\n    'Grey',\n    'Honeydew',\n    'HotPink',\n    'IndianRed',\n    'Indigo',\n    'Ivory',\n    'Khaki',\n    'Lavender',\n    'LavenderBlush',\n    'LawnGreen',\n    'LemonChiffon',\n    'LightBlue',\n    'LightCoral',\n    'LightCyan',\n    'LightGoldenrodYellow',\n    'LightGray',\n    'LightGreen',\n    'LightGrey',\n    'LightPink',\n    'LightSalmon',\n    'LightSeaGreen',\n    'LightSkyBlue',\n    'LightSlateGray',\n    'LightSlateGrey',\n    'LightSteelBlue',\n    'LightYellow',\n    'Lime',\n    'LimeGreen',\n    'Linen',\n    'Magenta',\n    'Maroon',\n    'MediumAquamarine',\n    'MediumBlue',\n    'MediumOrchid',\n    'MediumPurple',\n    'MediumSeaGreen',\n    'MediumSlateBlue',\n    'MediumSpringGreen',\n    'MediumTurquoise',\n    'MediumVioletRed',\n    'MidnightBlue',\n    'MintCream',\n    'MistyRose',\n    'Moccasin',\n    'NavajoWhite',\n    'Navy',\n    'OldLace',\n    'Olive',\n    'OliveDrab',\n    'Orange',\n    'OrangeRed',\n    'Orchid',\n    'PaleGoldenrod',\n    'PaleGreen',\n    'PaleTurquoise',\n    'PaleVioletRed',\n    'PapayaWhip',\n    'PeachPuff',\n    'Peru',\n    'Pink',\n    'Plum',\n    'PowderBlue',\n    'Purple',\n    'Rebeccapurple',\n    'Red',\n    'RosyBrown',\n    'RoyalBlue',\n    'SaddleBrown',\n    'Salmon',\n    'SandyBrown',\n    'SeaGreen',\n    'Seashell',\n    'Sienna',\n    'Silver',\n    'SkyBlue',\n    'SlateBlue',\n    'SlateGray',\n    'SlateGrey',\n    'Snow',\n    'SpringGreen',\n    'SteelBlue',\n    'Tan',\n    'Teal',\n    'Thistle',\n    'Tomato',\n    'Turquoise',\n    'Violet',\n    'Wheat',\n    'White',\n    'WhiteSmoke',\n    'Yellow',\n    'YellowGreen',\n];\n","colourCellRenderer.ts":"import type { ICellRendererComp, ICellRendererParams } from 'ag-grid-community';\n\nexport class ColourCellRenderer implements ICellRendererComp {\n    eGui!: HTMLDivElement;\n\n    init(params: ICellRendererParams) {\n        const eGui = (this.eGui = document.createElement('div'));\n        eGui.style.overflow = 'hidden';\n        eGui.style.textOverflow = 'ellipsis';\n\n        const { value } = params;\n        const colorSpan = document.createElement('span');\n        const text = document.createTextNode(value ?? '');\n\n        if (value != null) {\n            colorSpan.style.borderLeft = '10px solid ' + params.value;\n            colorSpan.style.paddingRight = '5px';\n        }\n\n        eGui.appendChild(colorSpan);\n        eGui.append(text);\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n\n    refresh() {\n        return false;\n    }\n}\n","main.ts":"import {\n  ClientSideRowModelModule,\n  ColDef,\n  ColGroupDef,\n  GridApi,\n  GridOptions,\n  IRichCellEditorParams,\n  ModuleRegistry,\n  TextEditorModule,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\nimport { RichSelectModule } from \"ag-grid-enterprise\";\nimport { colors } from \"./colors\";\nimport { ColourCellRenderer } from \"./colourCellRenderer\";\n\nModuleRegistry.registerModules([\n  TextEditorModule,\n  ClientSideRowModelModule,\n  RichSelectModule,\n  ValidationModule /* Development Only */,\n]);\n\nconst columnDefs: ColDef[] = [\n  {\n    headerName: \"Allow Typing (Match)\",\n    field: \"color\",\n    cellRenderer: ColourCellRenderer,\n    cellEditor: \"agRichSelectCellEditor\",\n    cellEditorParams: {\n      values: colors,\n      searchType: \"match\",\n      allowTyping: true,\n      filterList: true,\n      highlightMatch: true,\n      valueListMaxHeight: 220,\n    } as IRichCellEditorParams,\n  },\n  {\n    headerName: \"Allow Typing (MatchAny)\",\n    field: \"color\",\n    cellRenderer: ColourCellRenderer,\n    cellEditor: \"agRichSelectCellEditor\",\n    cellEditorParams: {\n      values: colors,\n      searchType: \"matchAny\",\n      allowTyping: true,\n      filterList: true,\n      highlightMatch: true,\n      valueListMaxHeight: 220,\n    } as IRichCellEditorParams,\n  },\n];\n\nfunction getRandomNumber(min: number, max: number) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nconst data = Array.from(Array(20).keys()).map(() => {\n  const color = colors[getRandomNumber(0, colors.length - 1)];\n  return { color };\n});\n\nlet gridApi: GridApi;\n\nconst gridOptions: GridOptions = {\n  defaultColDef: {\n    flex: 1,\n    editable: true,\n  },\n  columnDefs: columnDefs,\n  rowData: data,\n};\n\n// setup the grid after the page has finished loading\nconst gridDiv = document.querySelector<HTMLElement>(\"#myGrid\")!;\ngridApi = createGrid(gridDiv, gridOptions);\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {},\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        // map tells the System loader where to look for things\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            // appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap,\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {},\n            app: {\n                main: './main.ts',\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}