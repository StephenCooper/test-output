{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["colors.js","main.js"],"styleFiles":[],"files":{"colors.js":"const colors = [\n    { name: 'Pink', code: '#FFC0CB' },\n    { name: 'Purple', code: '#A020F0' },\n    { name: 'Blue', code: '#0000FF' },\n    { name: 'Green', code: '#008000' },\n];\n","main.js":"const columnDefs = [\n  {\n    headerName: \"Color (Column as String Type)\",\n    field: \"color\",\n    width: 250,\n    cellEditor: \"agRichSelectCellEditor\",\n    cellEditorParams: {\n      formatValue: (v) => v.name,\n      parseValue: (v) => v.name,\n      values: colors,\n      searchType: \"matchAny\",\n      allowTyping: true,\n      filterList: true,\n      valueListMaxHeight: 220,\n    },\n  },\n  {\n    headerName: \"Color (Column as Complex Object)\",\n    field: \"detailedColor\",\n    width: 290,\n    valueFormatter: (p) => `${p.value.name} (${p.value.code})`,\n    valueParser: (p) => p.newValue,\n    cellEditor: \"agRichSelectCellEditor\",\n    cellEditorParams: {\n      formatValue: (v) => v.name,\n      values: colors,\n      searchType: \"matchAny\",\n      allowTyping: true,\n      filterList: true,\n      valueListMaxHeight: 220,\n    },\n  },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n  defaultColDef: {\n    width: 200,\n    editable: true,\n  },\n  columnDefs: columnDefs,\n  rowData: colors.map((v) => ({ color: v.name, detailedColor: v })),\n};\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}