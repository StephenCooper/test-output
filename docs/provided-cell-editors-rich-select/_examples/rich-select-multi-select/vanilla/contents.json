{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["colors.js","colourCellRenderer.js","main.js"],"styleFiles":["style.css"],"files":{"style.css":".custom-color-cell-renderer.color-tag {\n    overflow: 'hidden';\n    text-overflow: 'ellipsis';\n}\n\n.custom-color-cell-renderer.color-tag span {\n    border-left-width: 10px;\n    border-left-style: solid;\n    padding-left: 5px;\n}\n\n.ag-picker-field-display .custom-color-cell-renderer.color-pill {\n    display: flex;\n}\n\n.custom-color-cell-renderer.color-pill span {\n    padding: 0 5px;\n    border-radius: 5px;\n    border: 1px solid transparent;\n}\n\n.custom-color-cell-renderer.color-pill span:not(:first-child) {\n    margin-left: 5px;\n}\n","colors.js":"const colors = [\n    'AliceBlue',\n    'AntiqueWhite',\n    'Aqua',\n    'Aquamarine',\n    'Azure',\n    'Beige',\n    'Bisque',\n    'Black',\n    'BlanchedAlmond',\n    'Blue',\n    'BlueViolet',\n    'Brown',\n    'BurlyWood',\n    'CadetBlue',\n    'Chartreuse',\n    'Chocolate',\n    'Coral',\n    'CornflowerBlue',\n    'Cornsilk',\n    'Crimson',\n    'Cyan',\n    'DarkBlue',\n    'DarkCyan',\n    'DarkGoldenrod',\n    'DarkGray',\n    'DarkGreen',\n    'DarkGrey',\n    'DarkKhaki',\n    'DarkMagenta',\n    'DarkOliveGreen',\n    'DarkOrange',\n    'DarkOrchid',\n    'DarkRed',\n    'DarkSalmon',\n    'DarkSeaGreen',\n    'DarkSlateBlue',\n    'DarkSlateGray',\n    'DarkSlateGrey',\n    'DarkTurquoise',\n    'DarkViolet',\n    'DeepPink',\n    'DeepSkyBlue',\n    'DimGray',\n    'DodgerBlue',\n    'FireBrick',\n    'FloralWhite',\n    'ForestGreen',\n    'Fuchsia',\n    'Gainsboro',\n    'GhostWhite',\n    'Gold',\n    'Goldenrod',\n    'Gray',\n    'Green',\n    'GreenYellow',\n    'Grey',\n    'Honeydew',\n    'HotPink',\n    'IndianRed',\n    'Indigo',\n    'Ivory',\n    'Khaki',\n    'Lavender',\n    'LavenderBlush',\n    'LawnGreen',\n    'LemonChiffon',\n    'LightBlue',\n    'LightCoral',\n    'LightCyan',\n    'LightGoldenrodYellow',\n    'LightGray',\n    'LightGreen',\n    'LightGrey',\n    'LightPink',\n    'LightSalmon',\n    'LightSeaGreen',\n    'LightSkyBlue',\n    'LightSlateGray',\n    'LightSlateGrey',\n    'LightSteelBlue',\n    'LightYellow',\n    'Lime',\n    'LimeGreen',\n    'Linen',\n    'Magenta',\n    'Maroon',\n    'MediumAquamarine',\n    'MediumBlue',\n    'MediumOrchid',\n    'MediumPurple',\n    'MediumSeaGreen',\n    'MediumSlateBlue',\n    'MediumSpringGreen',\n    'MediumTurquoise',\n    'MediumVioletRed',\n    'MidnightBlue',\n    'MintCream',\n    'MistyRose',\n    'Moccasin',\n    'NavajoWhite',\n    'Navy',\n    'OldLace',\n    'Olive',\n    'OliveDrab',\n    'Orange',\n    'OrangeRed',\n    'Orchid',\n    'PaleGoldenrod',\n    'PaleGreen',\n    'PaleTurquoise',\n    'PaleVioletRed',\n    'PapayaWhip',\n    'PeachPuff',\n    'Peru',\n    'Pink',\n    'Plum',\n    'PowderBlue',\n    'Purple',\n    'Rebeccapurple',\n    'Red',\n    'RosyBrown',\n    'RoyalBlue',\n    'SaddleBrown',\n    'Salmon',\n    'SandyBrown',\n    'SeaGreen',\n    'Seashell',\n    'Sienna',\n    'Silver',\n    'SkyBlue',\n    'SlateBlue',\n    'SlateGray',\n    'SlateGrey',\n    'Snow',\n    'SpringGreen',\n    'SteelBlue',\n    'Tan',\n    'Teal',\n    'Thistle',\n    'Tomato',\n    'Turquoise',\n    'Violet',\n    'Wheat',\n    'White',\n    'WhiteSmoke',\n    'Yellow',\n    'YellowGreen',\n];\n","colourCellRenderer.js":"\nconst createPill = (color) => {\n    const colorSpan = document.createElement('span');\n    const text = document.createTextNode(color);\n\n    colorSpan.style.backgroundColor = `color-mix(in srgb, transparent, ${color} 20%)`;\n    colorSpan.style.boxShadow = `0 0 0 1px color-mix(in srgb, transparent, ${color} 50%)`;\n    colorSpan.style.borderColor = color;\n    colorSpan.append(text);\n\n    return colorSpan;\n};\n\nconst createTag = (color) => {\n    const colorSpan = document.createElement('span');\n    const text = document.createTextNode(color);\n\n    colorSpan.style.borderColor = color;\n    colorSpan.appendChild(text);\n\n    return colorSpan;\n};\n\nclass ColourCellRenderer  {\n    eGui;\n\n    init(params) {\n        const eGui = (this.eGui = document.createElement('div'));\n        eGui.classList.add('custom-color-cell-renderer');\n\n        const { value } = params;\n\n        let values = [];\n\n        if (Array.isArray(value)) {\n            eGui.classList.add('color-pill');\n            values = value;\n        } else {\n            eGui.classList.add('color-tag');\n            values = [value];\n        }\n\n        const len = values.length;\n\n        for (let i = 0; i < len; i++) {\n            const currentValue = values[i];\n            if (currentValue == null || currentValue === '') {\n                continue;\n            }\n\n            const el = eGui.classList.contains('color-pill') ? createPill(currentValue) : createTag(currentValue);\n\n            eGui.appendChild(el);\n        }\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n\n    refresh() {\n        return false;\n    }\n}\n","main.js":"const valueFormatter = (params) => {\n  const { value } = params;\n  if (Array.isArray(value)) {\n    return value.join(\", \");\n  }\n\n  return value;\n};\n\nconst valueParser = (params) => {\n  const { newValue } = params;\n\n  if (newValue == null || newValue === \"\") {\n    return null;\n  }\n\n  if (Array.isArray(newValue)) {\n    return newValue;\n  }\n\n  return params.newValue.split(\",\");\n};\n\nconst columnDefs = [\n  {\n    headerName: \"Multi Select\",\n    field: \"colors\",\n    cellEditor: \"agRichSelectCellEditor\",\n    cellEditorParams: {\n      values: colors,\n      multiSelect: true,\n      searchType: \"matchAny\",\n      filterList: true,\n      highlightMatch: true,\n      valueListMaxHeight: 220,\n    },\n  },\n  {\n    headerName: \"Multi Select (No Pills)\",\n    field: \"colors\",\n    cellEditor: \"agRichSelectCellEditor\",\n    cellEditorParams: {\n      values: colors,\n      suppressMultiSelectPillRenderer: true,\n      multiSelect: true,\n      searchType: \"matchAny\",\n      filterList: true,\n      highlightMatch: true,\n      valueListMaxHeight: 220,\n    },\n  },\n  {\n    headerName: \"Multi Select (With Renderer)\",\n    field: \"colors\",\n    cellRenderer: ColourCellRenderer,\n    cellEditor: \"agRichSelectCellEditor\",\n    cellEditorParams: {\n      values: colors,\n      cellRenderer: ColourCellRenderer,\n      suppressMultiSelectPillRenderer: true,\n      multiSelect: true,\n      searchType: \"matchAny\",\n      filterList: true,\n      highlightMatch: true,\n      valueListMaxHeight: 220,\n    },\n  },\n];\n\nfunction getRandomNumber(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nconst data = Array.from(Array(20).keys()).map(() => {\n  const numberOfOptions = getRandomNumber(1, 4);\n\n  const selectedOptions = [];\n\n  for (let i = 0; i < numberOfOptions; i++) {\n    const color = colors[getRandomNumber(0, colors.length - 1)];\n    if (selectedOptions.indexOf(color) === -1) {\n      selectedOptions.push(color);\n    }\n  }\n\n  selectedOptions.sort();\n\n  return { colors: selectedOptions };\n});\n\nlet gridApi;\n\nconst gridOptions = {\n  defaultColDef: {\n    flex: 1,\n    editable: true,\n    valueFormatter: valueFormatter,\n    valueParser: valueParser,\n  },\n  columnDefs: columnDefs,\n  rowData: data,\n};\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}