{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":[],"files":{"main.js":"let gridApi;\n\nclass CustomButtonComponent {\n  eGui;\n  eButton;\n  eventListener;\n\n  init() {\n    this.eGui = document.createElement(\"div\");\n    const eButton = document.createElement(\"button\");\n    eButton.className = \"btn-simple\";\n    eButton.textContent = \"Push Me!\";\n    this.eventListener = () => alert(\"clicked\");\n    eButton.addEventListener(\"click\", this.eventListener);\n    this.eGui.appendChild(eButton);\n  }\n\n  getGui() {\n    return this.eGui;\n  }\n\n  refresh() {\n    return true;\n  }\n\n  destroy() {\n    if (this.eButton) {\n      this.eButton.removeEventListener(\"click\", this.eventListener);\n    }\n  }\n}\n\nconst gridOptions = {\n  // Data to be displayed\n  rowData: [\n    { make: \"Tesla\", model: \"Model Y\", price: 64950, electric: true },\n    { make: \"Ford\", model: \"F-Series\", price: 33850, electric: false },\n    { make: \"Toyota\", model: \"Corolla\", price: 29600, electric: false },\n    { make: \"Mercedes\", model: \"EQA\", price: 48890, electric: true },\n    { make: \"Fiat\", model: \"500\", price: 15774, electric: false },\n    { make: \"Nissan\", model: \"Juke\", price: 20675, electric: false },\n  ],\n  // Columns to be displayed (Should match rowData properties)\n  columnDefs: [\n    {\n      headerName: \"Make & Model\",\n      valueGetter: (p) => p.data.make + \" \" + p.data.model,\n      flex: 2,\n    },\n    {\n      field: \"price\",\n      valueFormatter: (p) => \"Â£\" + Math.floor(p.value).toLocaleString(),\n      flex: 1,\n    },\n    { field: \"electric\", flex: 1 },\n    { field: \"button\", cellRenderer: CustomButtonComponent, flex: 1 },\n  ],\n};\n\nconst gridDiv = document.querySelector(\"#myGrid\");\ngridApi = agGrid.createGrid(gridDiv, gridOptions); /** DARK INTEGRATED START **/\nconst isInitialModeDark =\n  document.documentElement.dataset.agThemeMode?.includes(\"dark\");\n\nconst updateChartThemes = (isDark) => {\n  const themes = [\n    \"ag-default\",\n    \"ag-material\",\n    \"ag-sheets\",\n    \"ag-polychroma\",\n    \"ag-vivid\",\n  ];\n  const currentThemes = gridApi.getGridOption(\"chartThemes\");\n  const customTheme =\n    currentThemes &&\n    currentThemes.some((theme) => theme.startsWith(\"my-custom-theme\"));\n\n  let modifiedThemes = customTheme\n    ? isDark\n      ? [\"my-custom-theme-dark\", \"my-custom-theme-light\"]\n      : [\"my-custom-theme-light\", \"my-custom-theme-dark\"]\n    : Array.from(\n        new Set(themes.map((theme) => theme + (isDark ? \"-dark\" : \"\"))),\n      );\n\n  // updating the 'chartThemes' grid option will cause the chart to reactively update!\n  gridApi.setGridOption(\"chartThemes\", modifiedThemes);\n};\n\n// update chart themes when example first loads\nlet initialSet = false;\nconst maxTries = 5;\nlet tries = 0;\nconst trySetInitial = (delay) => {\n  if (gridApi) {\n    initialSet = true;\n    updateChartThemes(isInitialModeDark);\n  } else {\n    if (tries < maxTries) {\n      setTimeout(() => trySetInitial(), 250);\n      tries++;\n    }\n  }\n};\ntrySetInitial(0);\n\nconst handleColorSchemeChange = (event) => {\n  const { darkMode } = event.detail;\n  updateChartThemes(darkMode);\n};\n\n// listen for user-triggered dark mode changes (not removing listener is fine here!)\ndocument.addEventListener(\"color-scheme-change\", handleColorSchemeChange);\n/** DARK INTEGRATED END **/\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}