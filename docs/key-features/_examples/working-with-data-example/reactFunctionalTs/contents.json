{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"index.tsx","mainFileName":"index.tsx","scriptFiles":[],"styleFiles":[],"files":{"index.tsx":"'use client';\nimport React, { StrictMode, useMemo, useState } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport type { ColDef, RowSelectionOptions } from \"ag-grid-community\";\nimport { AllCommunityModule, ModuleRegistry } from \"ag-grid-community\";\nimport { AgGridReact } from \"ag-grid-react\";\n\nModuleRegistry.registerModules([AllCommunityModule]);\n\nconst gridDiv = document.querySelector(\"#myGrid\");\n\nconst rowSelection: RowSelectionOptions = {\n  mode: \"multiRow\",\n  headerCheckbox: false,\n};\n\nconst GridExample = () => {\n  const [rowData, setRowData] = useState([\n    {\n      make: \"Tesla\",\n      model: \"Model Y\",\n      price: 64950,\n      electric: true,\n      month: \"June\",\n    },\n    {\n      make: \"Ford\",\n      model: \"F-Series\",\n      price: 33850,\n      electric: false,\n      month: \"October\",\n    },\n    {\n      make: \"Toyota\",\n      model: \"Corolla\",\n      price: 29600,\n      electric: false,\n      month: \"August\",\n    },\n    {\n      make: \"Mercedes\",\n      model: \"EQA\",\n      price: 48890,\n      electric: true,\n      month: \"February\",\n    },\n    {\n      make: \"Fiat\",\n      model: \"500\",\n      price: 15774,\n      electric: false,\n      month: \"January\",\n    },\n    {\n      make: \"Nissan\",\n      model: \"Juke\",\n      price: 20675,\n      electric: false,\n      month: \"March\",\n    },\n    {\n      make: \"Vauxhall\",\n      model: \"Corsa\",\n      price: 18460,\n      electric: false,\n      month: \"July\",\n    },\n    {\n      make: \"Volvo\",\n      model: \"EX30\",\n      price: 33795,\n      electric: true,\n      month: \"September\",\n    },\n    {\n      make: \"Mercedes\",\n      model: \"Maybach\",\n      price: 175720,\n      electric: false,\n      month: \"December\",\n    },\n    {\n      make: \"Vauxhall\",\n      model: \"Astra\",\n      price: 25795,\n      electric: false,\n      month: \"April\",\n    },\n    {\n      make: \"Fiat\",\n      model: \"Panda\",\n      price: 13724,\n      electric: false,\n      month: \"November\",\n    },\n    {\n      make: \"Jaguar\",\n      model: \"I-PACE\",\n      price: 69425,\n      electric: true,\n      month: \"May\",\n    },\n    {\n      make: \"Tesla\",\n      model: \"Model Y\",\n      price: 64950,\n      electric: true,\n      month: \"June\",\n    },\n    {\n      make: \"Ford\",\n      model: \"F-Series\",\n      price: 33850,\n      electric: false,\n      month: \"October\",\n    },\n    {\n      make: \"Toyota\",\n      model: \"Corolla\",\n      price: 29600,\n      electric: false,\n      month: \"August\",\n    },\n    {\n      make: \"Mercedes\",\n      model: \"EQA\",\n      price: 48890,\n      electric: true,\n      month: \"February\",\n    },\n    {\n      make: \"Fiat\",\n      model: \"500\",\n      price: 15774,\n      electric: false,\n      month: \"January\",\n    },\n    {\n      make: \"Nissan\",\n      model: \"Juke\",\n      price: 20675,\n      electric: false,\n      month: \"March\",\n    },\n    {\n      make: \"Vauxhall\",\n      model: \"Corsa\",\n      price: 18460,\n      electric: false,\n      month: \"July\",\n    },\n    {\n      make: \"Volvo\",\n      model: \"EX30\",\n      price: 33795,\n      electric: true,\n      month: \"September\",\n    },\n    {\n      make: \"Mercedes\",\n      model: \"Maybach\",\n      price: 175720,\n      electric: false,\n      month: \"December\",\n    },\n    {\n      make: \"Vauxhall\",\n      model: \"Astra\",\n      price: 25795,\n      electric: false,\n      month: \"April\",\n    },\n    {\n      make: \"Fiat\",\n      model: \"Panda\",\n      price: 13724,\n      electric: false,\n      month: \"November\",\n    },\n    {\n      make: \"Jaguar\",\n      model: \"I-PACE\",\n      price: 69425,\n      electric: true,\n      month: \"May\",\n    },\n    {\n      make: \"Tesla\",\n      model: \"Model Y\",\n      price: 64950,\n      electric: true,\n      month: \"June\",\n    },\n    {\n      make: \"Ford\",\n      model: \"F-Series\",\n      price: 33850,\n      electric: false,\n      month: \"October\",\n    },\n    {\n      make: \"Toyota\",\n      model: \"Corolla\",\n      price: 29600,\n      electric: false,\n      month: \"August\",\n    },\n    {\n      make: \"Mercedes\",\n      model: \"EQA\",\n      price: 48890,\n      electric: true,\n      month: \"February\",\n    },\n    {\n      make: \"Fiat\",\n      model: \"500\",\n      price: 15774,\n      electric: false,\n      month: \"January\",\n    },\n    {\n      make: \"Nissan\",\n      model: \"Juke\",\n      price: 20675,\n      electric: false,\n      month: \"March\",\n    },\n    {\n      make: \"Vauxhall\",\n      model: \"Corsa\",\n      price: 18460,\n      electric: false,\n      month: \"July\",\n    },\n    {\n      make: \"Volvo\",\n      model: \"EX30\",\n      price: 33795,\n      electric: true,\n      month: \"September\",\n    },\n    {\n      make: \"Mercedes\",\n      model: \"Maybach\",\n      price: 175720,\n      electric: false,\n      month: \"December\",\n    },\n    {\n      make: \"Vauxhall\",\n      model: \"Astra\",\n      price: 25795,\n      electric: false,\n      month: \"April\",\n    },\n    {\n      make: \"Fiat\",\n      model: \"Panda\",\n      price: 13724,\n      electric: false,\n      month: \"November\",\n    },\n    {\n      make: \"Jaguar\",\n      model: \"I-PACE\",\n      price: 69425,\n      electric: true,\n      month: \"May\",\n    },\n  ]);\n\n  const [columnDefs, setColumnDefs] = useState<ColDef[]>([\n    {\n      field: \"make\",\n      editable: true,\n      cellEditor: \"agSelectCellEditor\",\n      cellEditorParams: {\n        values: [\n          \"Tesla\",\n          \"Ford\",\n          \"Toyota\",\n          \"Mercedes\",\n          \"Fiat\",\n          \"Nissan\",\n          \"Vauxhall\",\n          \"Volvo\",\n          \"Jaguar\",\n        ],\n      },\n    },\n    { field: \"model\" },\n    { field: \"price\", filter: \"agNumberColumnFilter\" },\n    { field: \"electric\" },\n    {\n      field: \"month\",\n      comparator: (valueA: string, valueB: string) => {\n        const months = [\n          \"January\",\n          \"February\",\n          \"March\",\n          \"April\",\n          \"May\",\n          \"June\",\n          \"July\",\n          \"August\",\n          \"September\",\n          \"October\",\n          \"November\",\n          \"December\",\n        ];\n        const idxA = months.indexOf(valueA);\n        const idxB = months.indexOf(valueB);\n        return idxA - idxB;\n      },\n    },\n  ]);\n\n  const defaultColDef = useMemo(() => {\n    return {\n      filter: \"agTextColumnFilter\",\n      floatingFilter: true,\n    };\n  }, []);\n\n  return (\n    <div style={{ height: 500 }}>\n      <AgGridReact\n        rowData={rowData}\n        columnDefs={columnDefs}\n        defaultColDef={defaultColDef}\n        rowSelection={rowSelection}\n        pagination={true}\n        paginationPageSize={10}\n        paginationPageSizeSelector={[10, 25, 50]}\n      />\n    </div>\n  );\n};\n\nconst root = createRoot(document.getElementById(\"root\")!);\nroot.render(\n  <StrictMode>\n    <GridExample />\n  </StrictMode>,\n);\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            jsx: 'react',\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            // react\n            react: 'npm:react@18.2.0',\n            'react-dom': 'npm:react-dom@18.2.0',\n            'react-dom/client': 'npm:react-dom@18.2.0',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            css: {},\n            react: {\n                main: './umd/react.production.min.js',\n            },\n            'react-dom': {\n                main: './umd/react-dom.production.min.js',\n            },\n            'react-dom/server': {\n                main: '../umd/react-dom-server.browser.production.min.js',\n            },\n            app: {\n                main: './index.tsx',\n                defaultExtension: 'tsx',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"react":"18","react-dom":"18","@types/react":"18","@types/react-dom":"18","ag-grid-react":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}