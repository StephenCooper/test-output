{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".rag-red {\n    background-color: #cc222244;\n}\n.rag-green {\n    background-color: #33cc3344;\n}\n","main.js":"let gridApi;\n\nconst ragCellClassRules = {\n  // apply green to electric cars\n  \"rag-green\": (params) => params.value === true,\n};\n\nconst gridOptions = {\n  rowData: [\n    { make: \"Tesla\", model: \"Model Y\", price: 64950, electric: true },\n    { make: \"Ford\", model: \"F-Series\", price: 33850, electric: false },\n    { make: \"Toyota\", model: \"Corolla\", price: 29600, electric: false },\n    { make: \"Mercedes\", model: \"EQA\", price: 48890, electric: true },\n    { make: \"Fiat\", model: \"500\", price: 15774, electric: false },\n    { make: \"Nissan\", model: \"Juke\", price: 20675, electric: false },\n    { make: \"Vauxhall\", model: \"Corsa\", price: 18460, electric: false },\n    { make: \"Volvo\", model: \"EX30\", price: 33795, electric: true },\n    { make: \"Mercedes\", model: \"Maybach\", price: 175720, electric: false },\n    { make: \"Vauxhall\", model: \"Astra\", price: 25795, electric: false },\n    { make: \"Fiat\", model: \"Panda\", price: 13724, electric: false },\n    { make: \"Jaguar\", model: \"I-PACE\", price: 69425, electric: true },\n  ],\n  columnDefs: [\n    {\n      field: \"make\",\n    },\n    { field: \"model\" },\n    { field: \"price\", filter: \"agNumberColumnFilter\" },\n    {\n      field: \"electric\",\n      cellClassRules: ragCellClassRules,\n    },\n  ],\n  defaultColDef: {\n    filter: \"agTextColumnFilter\",\n    floatingFilter: true,\n    flex: 1,\n  },\n  rowClassRules: {\n    // apply red to Ford cars\n    \"rag-red\": (params) => params.data.make === \"Ford\",\n  },\n  rowSelection: {\n    mode: \"multiRow\",\n    headerCheckbox: false,\n  },\n};\n\nconst gridDiv = document.querySelector(\"#myGrid\");\ngridApi = agGrid.createGrid(gridDiv, gridOptions); /** DARK INTEGRATED START **/\nconst isInitialModeDark =\n  document.documentElement.dataset.agThemeMode?.includes(\"dark\");\n\nconst updateChartThemes = (isDark) => {\n  const themes = [\n    \"ag-default\",\n    \"ag-material\",\n    \"ag-sheets\",\n    \"ag-polychroma\",\n    \"ag-vivid\",\n  ];\n  const currentThemes = gridApi.getGridOption(\"chartThemes\");\n  const customTheme =\n    currentThemes &&\n    currentThemes.some((theme) => theme.startsWith(\"my-custom-theme\"));\n\n  let modifiedThemes = customTheme\n    ? isDark\n      ? [\"my-custom-theme-dark\", \"my-custom-theme-light\"]\n      : [\"my-custom-theme-light\", \"my-custom-theme-dark\"]\n    : Array.from(\n        new Set(themes.map((theme) => theme + (isDark ? \"-dark\" : \"\"))),\n      );\n\n  // updating the 'chartThemes' grid option will cause the chart to reactively update!\n  gridApi.setGridOption(\"chartThemes\", modifiedThemes);\n};\n\n// update chart themes when example first loads\nlet initialSet = false;\nconst maxTries = 5;\nlet tries = 0;\nconst trySetInitial = (delay) => {\n  if (gridApi) {\n    initialSet = true;\n    updateChartThemes(isInitialModeDark);\n  } else {\n    if (tries < maxTries) {\n      setTimeout(() => trySetInitial(), 250);\n      tries++;\n    }\n  }\n};\ntrySetInitial(0);\n\nconst handleColorSchemeChange = (event) => {\n  const { darkMode } = event.detail;\n  updateChartThemes(darkMode);\n};\n\n// listen for user-triggered dark mode changes (not removing listener is fine here!)\ndocument.addEventListener(\"color-scheme-change\", handleColorSchemeChange);\n/** DARK INTEGRATED END **/\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}