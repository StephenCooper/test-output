{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["customTooltip.js","main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".custom-tooltip {\n    padding: 5px;\n    color: var(--ag-foreground-color);\n    background-color: #5577cc;\n}\n\n.custom-tooltip p {\n    margin: 5px;\n    white-space: nowrap;\n}\n\n.custom-tooltip p:first-of-type {\n    font-weight: bold;\n}\n","customTooltip.js":"\nclass CustomTooltip  {\n    eGui;\n    init(params) {\n        const eGui = (this.eGui = document.createElement('div'));\n        const color = params.color || '#999';\n\n        eGui.classList.add('custom-tooltip');\n        //@ts-ignore\n        eGui.style['background-color'] = color;\n        eGui.innerHTML = `\n            <div><b>Custom Tooltip</b></div>\n            <div>${params.value}</div>\n        `;\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n}\n","main.js":"const columnDefs = [\n  {\n    headerName: \"Athlete\",\n    field: \"athlete\",\n    tooltipComponentParams: { color: \"#55AA77\" },\n    tooltipField: \"country\",\n    headerTooltip: \"Tooltip for Athlete Column Header\",\n  },\n  {\n    field: \"age\",\n    tooltipValueGetter: (p) =>\n      \"Create any fixed message, e.g. This is the Athleteâ€™s Age \",\n    headerTooltip: \"Tooltip for Age Column Header\",\n  },\n  {\n    field: \"year\",\n    tooltipValueGetter: (p) =>\n      \"This is a dynamic tooltip using the value of \" + p.value,\n    headerTooltip: \"Tooltip for Year Column Header\",\n  },\n  {\n    field: \"sport\",\n    tooltipValueGetter: () => \"Tooltip text about Sport should go here\",\n    headerTooltip: \"Tooltip for Sport Column Header\",\n  },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n  defaultColDef: {\n    flex: 1,\n    minWidth: 100,\n    tooltipComponent: CustomTooltip,\n  },\n\n  tooltipShowDelay: 0,\n  tooltipHideDelay: 2000,\n\n  // set rowData to null or undefined to show loading panel by default\n  columnDefs: columnDefs,\n};\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then((data) => {\n      gridApi.setGridOption(\"rowData\", data);\n    });\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}