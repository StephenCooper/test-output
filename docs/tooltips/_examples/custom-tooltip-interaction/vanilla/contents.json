{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["customTooltip.js","main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".custom-tooltip {\n    color: var(--ag-foreground-color);\n    background-color: #5577cc;\n    padding: 5px;\n}\n\n.custom-tooltip p,\n.custom-tooltip h3 {\n    margin: 5px;\n    white-space: nowrap;\n}\n\n.custom-tooltip p:first-of-type {\n    font-weight: bold;\n}\n","customTooltip.js":"\nclass CustomTooltip  {\n    eGui;\n    params;\n\n    constructor() {\n        this.onFormSubmit = this.onFormSubmit.bind(this);\n    }\n\n    init(params) {\n        this.params = params;\n        const type = params.type || 'primary';\n        const data = params.api.getDisplayedRowAtIndex(params.rowIndex).data;\n        const eGui = (this.eGui = document.createElement('div'));\n\n        eGui.classList.add('custom-tooltip');\n        eGui.innerHTML = `\n            <div class=\"panel panel-${type}\">\n                <div class=\"panel-heading\">\n                    <h3 class=\"panel-title\">${data.country}</h3>\n                </div>\n                <form class=\"panel-body\">\n                    <div class=\"form-group\">\n                        <input type=\"text\" class=\"form-control\" id=\"name\" placeholder=\"Name\" autocomplete=\"off\" value=\"${data.athlete}\" onfocus=\"this.select()\">\n                        <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n                    </div>\n                    <p>Total: ${data.total}</p>\n                </form>\n            </div>`;\n\n        eGui.querySelector('form')?.addEventListener('submit', this.onFormSubmit);\n    }\n\n    onFormSubmit(e) {\n        e.preventDefault();\n        const { params } = this;\n        const { node } = params;\n\n        const target = (e.target ).querySelector('input') ;\n\n        if (target?.value) {\n            node?.setDataValue('athlete', target.value);\n            if (this.params.hideTooltipCallback) {\n                this.params.hideTooltipCallback();\n            }\n        }\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n\n    destroy() {\n        this.eGui.querySelector('form')?.removeEventListener('submit', this.onFormSubmit);\n    }\n}\n","main.js":"const columnDefs = [\n  {\n    field: \"athlete\",\n    minWidth: 150,\n    tooltipField: \"athlete\",\n    tooltipComponentParams: { type: \"success\" },\n  },\n  { field: \"age\", minWidth: 130, tooltipField: \"age\" },\n  { field: \"year\" },\n  { field: \"sport\" },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n  defaultColDef: {\n    flex: 1,\n    minWidth: 100,\n    tooltipComponent: CustomTooltip,\n  },\n\n  tooltipInteraction: true,\n  tooltipShowDelay: 500,\n  // set rowData to null or undefined to show loading panel by default\n  rowData: null,\n  columnDefs: columnDefs,\n};\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then((data) => {\n      gridApi.setGridOption(\"rowData\", data);\n    });\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}