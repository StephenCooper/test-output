{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"index.jsx","mainFileName":"index.jsx","styleFiles":[],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 auto;\n    width: 100%;\n}\n","fakeServer.jsx":"// This fake server uses http://alasql.org/ to mimic how a real server\n// might generate sql queries from the Server-Side Row Model request.\n// To keep things simple it does the bare minimum to support the example.\nexport function FakeServer(allData) {\n    alasql.options.cache = false;\n\n    return {\n        getData: function (request) {\n            const result = executeQuery(request);\n\n            return {\n                success: true,\n                rows: result,\n                lastRow: getLastRowIndex(request, result),\n                pivotFields: getPivotFields(request),\n            };\n        },\n    };\n\n    function executeQuery(request) {\n        const pivotCols = request.pivotCols;\n        const pivotCol = pivotCols[0]; // 'alasql' can only pivot on a single column\n\n        // 'alasql' only supports pivoting on a single value column, to workaround this limitation we need to perform\n        // separate queries for each value column and combine the results\n        const results = [];\n\n        request.valueCols.forEach(function (valueCol) {\n            const pivotResults = executePivotQuery(request, pivotCol, valueCol);\n\n            // merge each row into existing results\n            for (let i = 0; i < pivotResults.length; i++) {\n                var pivotResult = pivotResults[i];\n                var result = results[i] || {};\n\n                Object.keys(pivotResult).forEach(function (key) {\n                    result[key] = pivotResult[key];\n                });\n\n                results[i] = result;\n            }\n        });\n\n        return alasql('SELECT * FROM ?' + orderBySql(request), [results]);\n    }\n\n    function orderBySql(request) {\n        const sortModel = request.sortModel;\n\n        if (sortModel.length === 0) return '';\n\n        const sorts = sortModel.map(function (s) {\n            return '`' + s.colId + '` ' + s.sort.toUpperCase();\n        });\n\n        return ' ORDER BY ' + sorts.join(', ');\n    }\n\n    function executePivotQuery(request, pivotCol, valueCol) {\n        const groupKeys = request.groupKeys;\n        const groupsToUse = request.rowGroupCols.slice(groupKeys.length, groupKeys.length + 1);\n        const selectGroupCols = groupsToUse\n            .map(function (groupCol) {\n                return groupCol.id;\n            })\n            .join(', ');\n\n        const SQL_TEMPLATE = \"SELECT {0}, ({1} + '_{2}') AS {1}, {2} FROM ? PIVOT (SUM([{2}]) FOR {1})\";\n        const SQL = interpolate(SQL_TEMPLATE, [selectGroupCols, pivotCol.id, valueCol.id]) + whereSql(request);\n\n        console.log('[FakeServer] - about to execute query:', SQL);\n\n        const result = alasql(SQL, [allData]);\n\n        // workaround - 'alasql' doesn't support PIVOT + LIMIT\n        return extractRowsForBlock(request, result);\n    }\n\n    function whereSql(request) {\n        const rowGroups = request.rowGroupCols;\n        const groupKeys = request.groupKeys;\n        const whereParts = [];\n\n        if (groupKeys) {\n            groupKeys.forEach(function (key, i) {\n                const value = typeof key === 'string' ? \"'\" + key + \"'\" : key;\n\n                whereParts.push(rowGroups[i].id + ' = ' + value);\n            });\n        }\n\n        if (whereParts.length > 0) {\n            return ' WHERE ' + whereParts.join(' AND ');\n        }\n\n        return '';\n    }\n\n    function extractRowsForBlock(request, results) {\n        const blockSize = request.endRow - request.startRow + 1;\n\n        return results.slice(request.startRow, request.startRow + blockSize);\n    }\n\n    function getPivotFields(request) {\n        const pivotCol = request.pivotCols[0];\n        const template = \"SELECT DISTINCT ({0} + '_{1}') AS {0} FROM ? ORDER BY {0}\";\n\n        const result = flatten(\n            request.valueCols.map(function (valueCol) {\n                const args = [pivotCol.id, valueCol.id];\n                const sql = interpolate(template, args);\n\n                return alasql(sql, [allData]);\n            })\n        );\n\n        return flatten(\n            result.map(function (x) {\n                return x[pivotCol.id];\n            })\n        );\n    }\n\n    function getLastRowIndex(request, results) {\n        if (!results || results.length === 0) {\n            return null;\n        }\n\n        const currentLastRow = request.startRow + results.length;\n\n        return currentLastRow <= request.endRow ? currentLastRow : -1;\n    }\n}\n\n// IE Workaround - as templates literal are not supported\nfunction interpolate(str, o) {\n    return str.replace(/{([^{}]*)}/g, function (a, b) {\n        const r = o[b];\n        return typeof r === 'string' || typeof r === 'number' ? r : a;\n    });\n}\n\nfunction flatten(arrayOfArrays) {\n    return [].concat.apply([], arrayOfArrays);\n}\n","index.jsx":"\"use client\";\n\nimport React, {\n  useCallback,\n  useMemo,\n  useRef,\n  useState,\n  StrictMode,\n} from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"./styles.css\";\nimport { FakeServer } from \"./fakeServer.jsx\";\nimport {\n  ModuleRegistry,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\nimport {\n  ColumnMenuModule,\n  ColumnsToolPanelModule,\n  ContextMenuModule,\n  RowGroupingModule,\n  ServerSideRowModelModule,\n} from \"ag-grid-enterprise\";\nModuleRegistry.registerModules([\n  ColumnsToolPanelModule,\n  ColumnMenuModule,\n  ContextMenuModule,\n  RowGroupingModule,\n  ServerSideRowModelModule,\n  ValidationModule /* Development Only */,\n]);\n\nconst getServerSideDatasource = (server) => {\n  return {\n    getRows: (params) => {\n      const request = params.request;\n      console.log(\"[Datasource] - rows requested by grid: \", params.request);\n      const response = server.getData(request);\n      // simulating real server call with a 500ms delay\n      setTimeout(() => {\n        if (response.success) {\n          // supply data to grid\n          params.success({\n            rowData: response.rows,\n            rowCount: response.lastRow,\n            pivotResultFields: response.pivotFields,\n          });\n        } else {\n          params.fail();\n        }\n      }, 500);\n    },\n  };\n};\n\nconst GridExample = () => {\n  const gridRef = useRef();\n  const containerStyle = useMemo(() => ({ width: \"100%\", height: \"100%\" }), []);\n  const gridStyle = useMemo(() => ({ height: \"100%\", width: \"100%\" }), []);\n\n  const [columnDefs, setColumnDefs] = useState([\n    { field: \"country\", rowGroup: true },\n    { field: \"sport\", rowGroup: true },\n    { field: \"year\", pivot: true },\n    { field: \"total\", aggFunc: \"sum\" },\n    { field: \"gold\", aggFunc: \"sum\" },\n    { field: \"silver\", aggFunc: \"sum\" },\n    { field: \"bronze\", aggFunc: \"sum\" },\n  ]);\n  const defaultColDef = useMemo(() => {\n    return {\n      width: 150,\n    };\n  }, []);\n  const autoGroupColumnDef = useMemo(() => {\n    return {\n      minWidth: 200,\n    };\n  }, []);\n  const processPivotResultColDef = useCallback((colDef) => {\n    const pivotValueColumn = colDef.pivotValueColumn;\n    if (!pivotValueColumn) return;\n    // if column is not the total column, it should only be shown when expanded.\n    // this will enable expandable column groups.\n    if (pivotValueColumn.getColId() !== \"total\") {\n      colDef.columnGroupShow = \"open\";\n    }\n  }, []);\n\n  const onGridReady = useCallback((params) => {\n    fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n      .then((resp) => resp.json())\n      .then((data) => {\n        // setup the fake server with entire dataset\n        const fakeServer = new FakeServer(data);\n        // create datasource with a reference to the fake server\n        const datasource = getServerSideDatasource(fakeServer);\n        // register the datasource with the grid\n        params.api.setGridOption(\"serverSideDatasource\", datasource);\n      });\n  }, []);\n\n  const expand = useCallback((key, open = false) => {\n    if (key) {\n      gridRef.current.api.setColumnGroupState([{ groupId: key, open: open }]);\n      return;\n    }\n    const existingState = gridRef.current.api.getColumnGroupState();\n    const expandedState = existingState.map((s) => ({\n      groupId: s.groupId,\n      open: open,\n    }));\n    gridRef.current.api.setColumnGroupState(expandedState);\n  }, []);\n\n  return (\n    <div style={containerStyle}>\n      <div className=\"example-wrapper\">\n        <div style={{ marginBottom: \"5px\" }}>\n          <button onClick={() => expand(\"2000\", true)}>Expand 2000</button>\n          <button onClick={() => expand(\"2000\")}>Collapse 2000</button>\n          <button onClick={() => expand(undefined, true)}>Expand All</button>\n          <button onClick={() => expand(undefined)}>Collapse All</button>\n        </div>\n\n        <div style={gridStyle}>\n          <AgGridReact\n            ref={gridRef}\n            columnDefs={columnDefs}\n            defaultColDef={defaultColDef}\n            autoGroupColumnDef={autoGroupColumnDef}\n            rowModelType={\"serverSide\"}\n            pivotMode={true}\n            processPivotResultColDef={processPivotResultColDef}\n            onGridReady={onGridReady}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst root = createRoot(document.getElementById(\"root\"));\nroot.render(\n  <StrictMode>\n    <GridExample />\n  </StrictMode>,\n);\nwindow.tearDownExample = () => root.unmount();\n","index.html":"<div class=\"example-wrapper\">\n    <div style=\"margin-bottom: 5px\">\n        <button onclick=\"expand('2000', true)\">Expand 2000</button>\n        <button onclick=\"expand('2000')\">Collapse 2000</button>\n        <button onclick=\"expand(undefined, true)\">Expand All</button>\n        <button onclick=\"expand(undefined)\">Collapse All</button>\n    </div>\n    <div id=\"myGrid\"></div>\n</div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            jsx: 'react',\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            // react\n            react: 'npm:react@18.2.0',\n            'react-dom': 'npm:react-dom@18.2.0',\n            'react-dom/client': 'npm:react-dom@18.2.0',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            css: {},\n            react: {\n                main: './umd/react.production.min.js',\n            },\n            'react-dom': {\n                main: './umd/react-dom.production.min.js',\n            },\n            'react-dom/server': {\n                main: '../umd/react-dom-server.browser.production.min.js',\n            },\n            app: {\n                main: './index.jsx',\n                defaultExtension: 'jsx',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"react":"18","react-dom":"18","@types/react":"18","@types/react-dom":"18","ag-grid-react":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}},"extras":["alasql"]}