{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["fakeServer.js","main.js"],"styleFiles":[],"files":{"fakeServer.js":"// This fake server uses http://alasql.org/ to mimic how a real server\n// might generate sql queries from the Server-Side Row Model request.\n// To keep things simple it does the bare minimum to support the example.\nfunction FakeServer(allData) {\n    alasql.options.cache = false;\n\n    return {\n        getData: (request) => {\n            const result = executeQuery(request);\n            return {\n                success: true,\n                rows: result,\n                lastRow: getLastRowIndex(request, result),\n                pivotFields: getPivotFields(request),\n            };\n        },\n    };\n\n    function executeQuery(request) {\n        const { pivotCols, valueCols } = request;\n        const [pivotCol] = pivotCols;\n\n        if (valueCols.length === 0) {\n            return [];\n        }\n\n        const results = [];\n        valueCols.forEach((valueCol) => {\n            const pivotResults = executePivotQuery(request, pivotCol, valueCol);\n\n            pivotResults.forEach((pivotResult, i) => {\n                results[i] = { ...results[i], ...pivotResult };\n            });\n        });\n\n        return alasql(`SELECT * FROM ?${orderBySql(request)}`, [results]);\n    }\n\n    function orderBySql({ sortModel }) {\n        if (sortModel.length === 0) return '';\n        const sorts = sortModel.map(({ colId, sort }) => `\\`${colId}\\` ${sort.toUpperCase()}`);\n        return ` ORDER BY ${sorts.join(', ')}`;\n    }\n\n    function executePivotQuery(request, pivotCol, valueCol) {\n        const { groupKeys, rowGroupCols } = request;\n        const groupsToUse = rowGroupCols.slice(groupKeys.length, groupKeys.length + 1);\n        const selectGroupCols = groupsToUse.map((groupCol) => groupCol.id).join(', ');\n\n        const SQL = `SELECT ${selectGroupCols}, (${pivotCol.id} + '_${\n            valueCol.id\n        }') AS ${pivotCol.id}, ${valueCol.id} FROM ? PIVOT (${valueCol.aggFunc}([${\n            valueCol.id\n        }]) FOR ${pivotCol.id})${whereSql(request)}`;\n\n        console.log('[FakeServer] - about to execute query:', SQL);\n\n        return extractRowsForBlock(request, alasql(SQL, [allData]));\n    }\n\n    function whereSql({ rowGroupCols, groupKeys }) {\n        const whereParts = groupKeys\n            ? groupKeys.map((key, i) => `${rowGroupCols[i].id} = ${typeof key === 'string' ? `'${key}'` : key}`)\n            : [];\n        return whereParts.length > 0 ? ` WHERE ${whereParts.join(' AND ')}` : '';\n    }\n\n    function extractRowsForBlock({ startRow, endRow }, results) {\n        const blockSize = endRow - startRow + 1;\n        return results.slice(startRow, startRow + blockSize);\n    }\n\n    function getPivotFields({ pivotCols, valueCols }) {\n        const [pivotCol] = pivotCols;\n        const result = flatten(\n            valueCols.map((valueCol) => {\n                const sql = `SELECT DISTINCT (${pivotCol.id} + '_${valueCol.id}') AS ${pivotCol.id} FROM ? ORDER BY ${pivotCol.id}`;\n                return alasql(sql, [allData]);\n            })\n        );\n        return flatten(result.map((x) => x[pivotCol.id]));\n    }\n\n    function getLastRowIndex({ startRow, endRow }, results) {\n        if (!results || results.length === 0) {\n            return null;\n        }\n        const currentLastRow = startRow + results.length;\n        return currentLastRow <= endRow ? currentLastRow : -1;\n    }\n}\n\nconst flatten = (arrayOfArrays) => [].concat(...arrayOfArrays);\n","main.js":"let gridApi;\nconst gridOptions = {\n  columnDefs: [\n    { field: \"country\", rowGroup: true },\n    { field: \"year\", pivot: true }, // pivot on 'year'\n    { field: \"gold\", aggFunc: \"sum\" },\n    { field: \"silver\", aggFunc: \"sum\" },\n    { field: \"bronze\", aggFunc: \"sum\" },\n  ],\n  defaultColDef: {\n    flex: 1,\n    minWidth: 100,\n  },\n  autoGroupColumnDef: {\n    minWidth: 200,\n  },\n\n  // use the server-side row model\n  rowModelType: \"serverSide\",\n\n  // enable pivoting\n  pivotMode: true,\n\n  // specify the field separator, e.g. '2000_gold' should be '_' which is the default\n  serverSidePivotResultFieldSeparator: \"_\",\n\n  suppressAggFuncInHeader: true,\n};\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then((data) => {\n      // setup the fake server with entire dataset\n      const fakeServer = new FakeServer(data);\n\n      // create datasource with a reference to the fake server\n      const datasource = getServerSideDatasource(fakeServer);\n\n      // register the datasource with the grid\n      gridApi.setGridOption(\"serverSideDatasource\", datasource);\n    });\n});\n\nfunction getServerSideDatasource(server) {\n  return {\n    getRows: (params) => {\n      console.log(\"[Datasource] - rows requested by grid: \", params.request);\n\n      // get data for request from our fake server\n      const response = server.getData(params.request);\n      // simulating real server call with a 500ms delay\n      setTimeout(() => {\n        if (response.success) {\n          // supply data to grid\n          console.log(\n            \"[Datasource] - pivotResultFields to be set in grid: \",\n            response.pivotFields,\n          );\n          params.success({\n            rowData: response.rows,\n            rowCount: response.lastRow,\n            pivotResultFields: response.pivotFields,\n          });\n        } else {\n          params.fail();\n        }\n      }, 500);\n    },\n  };\n}\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}},"extras":["alasql"]}