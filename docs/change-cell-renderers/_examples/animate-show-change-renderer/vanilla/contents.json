{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n\n.align-right {\n    text-align: right;\n}\n","main.js":"const columnDefs = [\n  {\n    headerName: \"Editable A\",\n    field: \"a\",\n    editable: true,\n    valueParser: numberValueParser,\n  },\n  {\n    headerName: \"Editable B\",\n    field: \"b\",\n    editable: true,\n    valueParser: numberValueParser,\n  },\n  {\n    headerName: \"API C\",\n    field: \"c\",\n    minWidth: 135,\n    valueParser: numberValueParser,\n    cellRenderer: \"agAnimateShowChangeCellRenderer\",\n  },\n  {\n    headerName: \"API D\",\n    field: \"d\",\n    minWidth: 135,\n    valueParser: numberValueParser,\n    cellRenderer: \"agAnimateShowChangeCellRenderer\",\n  },\n  {\n    headerName: \"Total\",\n    valueGetter: \"data.a + data.b + data.c + data.d\",\n    minWidth: 135,\n    cellRenderer: \"agAnimateShowChangeCellRenderer\",\n  },\n  {\n    headerName: \"Average\",\n    valueGetter: \"(data.a + data.b + data.c + data.d) / 4\",\n    minWidth: 135,\n    cellRenderer: \"agAnimateShowChangeCellRenderer\",\n  },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n  columnDefs: columnDefs,\n  defaultColDef: {\n    minWidth: 105,\n    flex: 1,\n    cellClass: \"align-right\",\n    valueFormatter: (params) => {\n      return formatNumber(params.value);\n    },\n  },\n  rowData: createRowData(),\n};\n\nfunction numberValueParser(params) {\n  return Number(params.newValue);\n}\n\nfunction formatNumber(number) {\n  return Math.floor(number).toLocaleString();\n}\n\nfunction onUpdateSomeValues() {\n  const rowCount = gridApi.getDisplayedRowCount();\n  for (let i = 0; i < 10; i++) {\n    const row = Math.floor(Math.random() * rowCount);\n    const rowNode = gridApi.getDisplayedRowAtIndex(row);\n    rowNode.setDataValue(\"c\", Math.floor(Math.random() * 10000));\n    rowNode.setDataValue(\"d\", Math.floor(Math.random() * 10000));\n  }\n}\n\nfunction createRowData() {\n  const rowData = [];\n\n  for (let i = 0; i < 20; i++) {\n    rowData.push({\n      a: Math.floor(((i + 323) * 25435) % 10000),\n      b: Math.floor(((i + 323) * 23221) % 10000),\n      c: Math.floor(((i + 323) * 468276) % 10000),\n      d: 0,\n    });\n  }\n\n  return rowData;\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n});\n","index.html":"<div class=\"example-wrapper\">\n    <div style=\"margin-bottom: 5px\">\n        <button onclick=\"onUpdateSomeValues()\">Update Some C & D Values</button>\n    </div>\n    <div id=\"myGrid\"></div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}