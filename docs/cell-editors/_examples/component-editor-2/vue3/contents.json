{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"main.ts","styleFiles":[],"files":{"styles.css":".mood-renderer {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n}\n\n.mood {\n    border-radius: 15px;\n    border: 1px solid grey;\n    background-color: #e6e6e6;\n    padding: 15px;\n    text-align: center;\n    display: inline-block;\n    outline: none;\n}\n\n.default {\n    border: 1px solid transparent !important;\n    padding: 4px;\n}\n\n.selected {\n    border: 1px solid lightgreen !important;\n    padding: 4px;\n}\n\n.numeric-input {\n    box-sizing: border-box;\n    padding-left: var(--ag-spacing);\n    width: 100%;\n    height: 100%;\n}\n\n.my-simple-editor {\n    box-sizing: border-box;\n    padding-left: var(--ag-spacing);\n    width: 100%;\n    height: 100%;\n}\n","data.ts":"export function getData(): any[] {\n    const cloneObject = (obj: any) => JSON.parse(JSON.stringify(obj));\n\n    const students = [\n        {\n            first_name: 'Bob',\n            last_name: 'Harrison',\n            age: 15,\n            gender: 'Male',\n            mood: 'Happy',\n        },\n        {\n            first_name: 'Mary',\n            last_name: 'Wilson',\n            gender: 'Female',\n            age: 11,\n            mood: 'Sad',\n        },\n        {\n            first_name: 'Zahid',\n            last_name: 'Khan',\n            gender: 'Male',\n            age: 12,\n            mood: 'Happy',\n        },\n        {\n            first_name: 'Jerry',\n            last_name: 'Mane',\n            gender: 'Male',\n            age: 12,\n            mood: 'Happy',\n        },\n    ];\n\n    // double the array twice, make more data!\n    students.forEach((item) => {\n        students.push(cloneObject(item));\n    });\n    students.forEach((item) => {\n        students.push(cloneObject(item));\n    });\n    students.forEach((item) => {\n        students.push(cloneObject(item));\n    });\n\n    return students;\n}\n","genderRendererVue.ts":"export default {\n    template: `\n        <span v-if=\"value\">\n        <i :class=\"iconClass\"> </i> {{ value }}\n      </span>\n    `,\n    data: function () {\n        return {\n            iconClass: null,\n            value: '',\n        };\n    },\n    beforeMount() {\n        this.iconClass = this.params.value === 'Male' ? 'fa fa-male' : 'fa fa-female';\n        this.value = this.params.value;\n    },\n};\n","moodEditorVue.ts":"import { nextTick } from 'vue';\n\nexport default {\n    template: `\n      <div :ref=\"'container'\" class=\"mood\" tabindex=\"0\" @keydown=\"onKeyDown\">\n      <img src=\"https://www.ag-grid.com/example-assets/smileys/happy.png\" @click=\"onClick(true)\" :class=\"{ selected: happy, default: !happy }\">\n      <img src=\"https://www.ag-grid.com/example-assets/smileys/sad.png\" @click=\"onClick(false)\" :class=\"{ selected: !happy, default: happy }\">\n      </div>\n    `,\n    data() {\n        return {\n            happy: false,\n            imgForMood: null,\n        };\n    },\n    methods: {\n        getValue() {\n            return this.happy ? 'Happy' : 'Sad';\n        },\n\n        isPopup() {\n            return true;\n        },\n\n        setHappy(happy) {\n            this.happy = happy;\n        },\n\n        toggleMood() {\n            this.setHappy(!this.happy);\n        },\n\n        onClick(happy) {\n            this.setHappy(happy);\n            this.params.stopEditing();\n        },\n\n        onKeyDown(event) {\n            const key = event.key;\n            if (\n                key == 'ArrowLeft' || // left\n                key == 'ArrowRight'\n            ) {\n                // right\n                this.toggleMood();\n                event.stopPropagation();\n            }\n        },\n    },\n    created() {\n        this.setHappy(this.params.value === 'Happy');\n    },\n    mounted() {\n        nextTick(() => {\n            this.$refs.container.focus();\n        });\n    },\n};\n","moodRendererVue.ts":"export default {\n    template: '<div class=\"mood-renderer\"><img style=\"width: 20px;\" :src=\"imgForMood\" /></div>',\n    data() {\n        return {\n            mood: 'Happy',\n            imgForMood: null,\n        };\n    },\n    methods: {\n        refresh(params) {\n            this.setMood(params);\n        },\n\n        setMood(params) {\n            this.mood = params.value;\n            this.imgForMood =\n                'https://www.ag-grid.com/example-assets/smileys/' + (this.mood === 'Happy' ? 'happy.png' : 'sad.png');\n        },\n    },\n    created() {\n        this.setMood(this.params);\n    },\n};\n","simpleTextEditorVue.ts":"import { nextTick } from 'vue';\n\nexport default {\n    template: `<input v-model=\"value\" :ref=\"'input'\" class=\"my-simple-editor\" />`,\n    data() {\n        return {\n            value: null,\n        };\n    },\n    methods: {\n        getValue() {\n            return this.value;\n        },\n\n        getInitialValue() {\n            let startValue = this.params.value;\n\n            const eventKey = this.params.eventKey;\n            const isBackspace = eventKey === 'Backspace';\n\n            if (isBackspace) {\n                startValue = '';\n            } else if (eventKey && eventKey.length === 1) {\n                startValue = eventKey;\n            }\n\n            if (startValue !== null && startValue !== undefined) {\n                return startValue;\n            }\n\n            return '';\n        },\n    },\n    created() {\n        this.value = this.getInitialValue();\n    },\n    mounted() {\n        nextTick(() => {\n            this.$refs.input.focus();\n        });\n    },\n};\n","main.ts":"import {\n  createApp,\n  defineComponent,\n  onBeforeMount,\n  ref,\n  shallowRef,\n} from \"vue\";\nimport { AgGridVue } from \"ag-grid-vue3\";\nimport \"./styles.css\";\nimport {\n  ClientSideRowModelModule,\n  ColDef,\n  ColGroupDef,\n  CustomEditorModule,\n  GridApi,\n  GridOptions,\n  GridReadyEvent,\n  ModuleRegistry,\n  NumberEditorModule,\n  TextEditorModule,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\nimport { RichSelectModule } from \"ag-grid-enterprise\";\nimport GenderRenderer from \"./genderRendererVue\";\nimport MoodEditor from \"./moodEditorVue\";\nimport MoodRenderer from \"./moodRendererVue\";\nimport SimpleTextEditor from \"./simpleTextEditorVue\";\nimport { getData } from \"./data\";\nModuleRegistry.registerModules([\n  ClientSideRowModelModule,\n  RichSelectModule,\n  NumberEditorModule,\n  TextEditorModule,\n  CustomEditorModule,\n  ValidationModule /* Development Only */,\n]);\n\nconst VueExample = defineComponent({\n  template: `\n        <div style=\"height: 100%\">\n                <ag-grid-vue\n      style=\"width: 100%; height: 100%;\"\n      @grid-ready=\"onGridReady\"\n      :columnDefs=\"columnDefs\"\n      :rowData=\"rowData\"\n      :defaultColDef=\"defaultColDef\"></ag-grid-vue>\n        </div>\n    `,\n  components: {\n    \"ag-grid-vue\": AgGridVue,\n    GenderRenderer,\n    MoodEditor,\n    MoodRenderer,\n    SimpleTextEditor,\n  },\n  setup(props) {\n    const gridApi = shallowRef<GridApi | null>(null);\n    const columnDefs = ref<ColDef[]>([\n      { field: \"first_name\", headerName: \"Provided Text\" },\n      {\n        field: \"last_name\",\n        headerName: \"Custom Text\",\n        cellEditor: \"SimpleTextEditor\",\n      },\n      {\n        field: \"age\",\n        headerName: \"Provided Number\",\n        cellEditor: \"agNumberCellEditor\",\n      },\n      {\n        field: \"gender\",\n        headerName: \"Provided Rich Select\",\n        cellRenderer: \"GenderRenderer\",\n        cellEditor: \"agRichSelectCellEditor\",\n        cellEditorParams: {\n          cellRenderer: \"GenderRenderer\",\n          values: [\"Male\", \"Female\"],\n        },\n      },\n      {\n        field: \"mood\",\n        headerName: \"Custom Mood\",\n        cellRenderer: \"MoodRenderer\",\n        cellEditor: \"MoodEditor\",\n        cellEditorPopup: true,\n      },\n    ]);\n    const rowData = ref<any[] | null>(getData());\n    const defaultColDef = ref<ColDef>({\n      editable: true,\n      flex: 1,\n      minWidth: 100,\n    });\n\n    const onGridReady = (params: GridReadyEvent) => {\n      gridApi.value = params.api;\n    };\n\n    return {\n      gridApi,\n      columnDefs,\n      rowData,\n      defaultColDef,\n      onGridReady,\n    };\n  },\n});\n\ncreateApp(VueExample).mount(\"#app\");\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        defaultExtension: 'js',\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            vue: 'npm:vue@3.5.0/dist/vue.esm-browser.js',\n            '@vue/reactivity': 'npm:@vue/reactivity@3.0.0/dist/reactivity.esm-browser.prod.js',\n\n            // vue class component\n            'vue-class-component': 'npm:vue-class-component@^8.0.0-beta.3/dist/vue-class-component.cjs.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            'css.js': {\n                defaultExtension: 'js',\n            },\n            vue: {\n                defaultExtension: 'js',\n            },\n            app: {\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-vue3': {\n                main: './dist/main.umd.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"vue":"^3.5.0","ag-grid-vue3":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}},"extras":["fontawesome"]}