{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"index.jsx","mainFileName":"index.jsx","scriptFiles":[],"styleFiles":[],"files":{"styles.css":".mood-renderer {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n}\n\n.mood {\n    border-radius: 15px;\n    border: 1px solid grey;\n    background-color: #e6e6e6;\n    padding: 15px;\n    text-align: center;\n    display: inline-block;\n    outline: none;\n}\n\n.default {\n    border: 1px solid transparent !important;\n    padding: 4px;\n}\n\n.selected {\n    border: 1px solid lightgreen !important;\n    padding: 4px;\n}\n\n.numeric-input {\n    box-sizing: border-box;\n    padding-left: var(--ag-spacing);\n    width: 100%;\n    height: 100%;\n}\n\n.my-simple-editor {\n    box-sizing: border-box;\n    padding-left: var(--ag-spacing);\n    width: 100%;\n    height: 100%;\n}\n","data.jsx":"export function getData() {\n    const cloneObject = (obj) => JSON.parse(JSON.stringify(obj));\n    const students = [\n        {\n            first_name: \"Bob\",\n            last_name: \"Harrison\",\n            age: 15,\n            gender: \"Male\",\n            mood: \"Happy\",\n        },\n        {\n            first_name: \"Mary\",\n            last_name: \"Wilson\",\n            gender: \"Female\",\n            age: 11,\n            mood: \"Sad\",\n        },\n        {\n            first_name: \"Zahid\",\n            last_name: \"Khan\",\n            gender: \"Male\",\n            age: 12,\n            mood: \"Happy\",\n        },\n        {\n            first_name: \"Jerry\",\n            last_name: \"Mane\",\n            gender: \"Male\",\n            age: 12,\n            mood: \"Happy\",\n        },\n    ];\n    // double the array twice, make more data!\n    students.forEach((item) => {\n        students.push(cloneObject(item));\n    });\n    students.forEach((item) => {\n        students.push(cloneObject(item));\n    });\n    students.forEach((item) => {\n        students.push(cloneObject(item));\n    });\n    return students;\n}\n","genderRenderer.jsx":"import React from \"react\";\nexport default (props) => {\n    const icon = props.value === \"Male\" ? \"fa-male\" : \"fa-female\";\n    return props.value ? (<span>\n      <i className={`fa ${icon}`}></i> {props.value}\n    </span>) : (<React.Fragment></React.Fragment>);\n};\n","index.jsx":"'use client';\nimport React, { StrictMode, useMemo, useState } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { ClientSideRowModelModule, CustomEditorModule, ModuleRegistry, NumberEditorModule, TextEditorModule, ValidationModule, } from \"ag-grid-community\";\nimport { RichSelectModule } from \"ag-grid-enterprise\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport { getData } from \"./data\";\nimport GenderRenderer from \"./genderRenderer\";\nimport MoodEditor from \"./moodEditor\";\nimport MoodRenderer from \"./moodRenderer\";\nimport SimpleTextEditor from \"./simpleTextEditor\";\nimport \"./styles.css\";\nModuleRegistry.registerModules([\n    NumberEditorModule,\n    TextEditorModule,\n    CustomEditorModule,\n    ClientSideRowModelModule,\n    RichSelectModule,\n    ValidationModule /* Development Only */,\n]);\nconst GridExample = () => {\n    const containerStyle = useMemo(() => ({ width: \"100%\", height: \"100%\" }), []);\n    const gridStyle = useMemo(() => ({ height: \"100%\", width: \"100%\" }), []);\n    const [rowData, setRowData] = useState(getData());\n    const [columnDefs, setColumnDefs] = useState([\n        { field: \"first_name\", headerName: \"Provided Text\" },\n        {\n            field: \"last_name\",\n            headerName: \"Custom Text\",\n            cellEditor: SimpleTextEditor,\n        },\n        {\n            field: \"age\",\n            headerName: \"Provided Number\",\n            cellEditor: \"agNumberCellEditor\",\n        },\n        {\n            field: \"gender\",\n            headerName: \"Provided Rich Select\",\n            cellRenderer: GenderRenderer,\n            cellEditor: \"agRichSelectCellEditor\",\n            cellEditorParams: {\n                cellRenderer: GenderRenderer,\n                values: [\"Male\", \"Female\"],\n            },\n        },\n        {\n            field: \"mood\",\n            headerName: \"Custom Mood\",\n            cellRenderer: MoodRenderer,\n            cellEditor: MoodEditor,\n            cellEditorPopup: true,\n        },\n    ]);\n    const defaultColDef = useMemo(() => {\n        return {\n            editable: true,\n            flex: 1,\n            minWidth: 100,\n        };\n    }, []);\n    return (<div style={containerStyle}>\n      <div style={gridStyle}>\n        <AgGridReact rowData={rowData} columnDefs={columnDefs} defaultColDef={defaultColDef}/>\n      </div>\n    </div>);\n};\nconst root = createRoot(document.getElementById(\"root\"));\nroot.render(<StrictMode>\n    <GridExample />\n  </StrictMode>);\n","moodEditor.jsx":"import React, { memo, useEffect, useRef, useState } from \"react\";\nexport default memo(({ value, onValueChange, stopEditing }) => {\n    const isHappy = (value) => value === \"Happy\";\n    const [ready, setReady] = useState(false);\n    const refContainer = useRef(null);\n    const checkAndToggleMoodIfLeftRight = (event) => {\n        if (ready) {\n            if ([\"ArrowLeft\", \"ArrowRight\"].indexOf(event.key) > -1) {\n                // left and right\n                const isLeft = event.key === \"ArrowLeft\";\n                onValueChange(isLeft ? \"Happy\" : \"Sad\");\n                event.stopPropagation();\n            }\n        }\n    };\n    useEffect(() => {\n        refContainer.current?.focus();\n        setReady(true);\n    }, []);\n    useEffect(() => {\n        window.addEventListener(\"keydown\", checkAndToggleMoodIfLeftRight);\n        return () => {\n            window.removeEventListener(\"keydown\", checkAndToggleMoodIfLeftRight);\n        };\n    }, [checkAndToggleMoodIfLeftRight, ready]);\n    const onClick = (happy) => {\n        onValueChange(happy ? \"Happy\" : \"Sad\");\n        stopEditing();\n    };\n    const mood = {\n        borderRadius: 15,\n        border: \"1px solid grey\",\n        backgroundColor: \"#e6e6e6\",\n        padding: 15,\n        textAlign: \"center\",\n        display: \"inline-block\",\n    };\n    const unselected = {\n        paddingLeft: 10,\n        paddingRight: 10,\n        border: \"1px solid transparent\",\n        padding: 4,\n    };\n    const selected = {\n        paddingLeft: 10,\n        paddingRight: 10,\n        border: \"1px solid lightgreen\",\n        padding: 4,\n    };\n    const happyStyle = isHappy(value) ? selected : unselected;\n    const sadStyle = !isHappy(value) ? selected : unselected;\n    return (<div ref={refContainer} style={mood} tabIndex={1} // important - without this the key presses wont be caught\n    >\n        <img src=\"https://www.ag-grid.com/example-assets/smileys/happy.png\" onClick={() => onClick(true)} style={happyStyle}/>\n        <img src=\"https://www.ag-grid.com/example-assets/smileys/sad.png\" onClick={() => onClick(false)} style={sadStyle}/>\n      </div>);\n});\n","moodRenderer.jsx":"import React, { useMemo } from \"react\";\nexport default (props) => {\n    const imageForMood = (mood) => \"https://www.ag-grid.com/example-assets/smileys/\" +\n        (mood === \"Happy\" ? \"happy.png\" : \"sad.png\");\n    const mood = useMemo(() => imageForMood(props.value), [props.value]);\n    return (<div className=\"mood-renderer\">\n      <img width=\"20px\" src={mood}/>\n    </div>);\n};\n","simpleTextEditor.jsx":"import React, { useEffect, useRef } from \"react\";\nexport default ({ value, onValueChange, eventKey, rowIndex, column }, ref) => {\n    const updateValue = (val) => {\n        onValueChange(val === \"\" ? null : val);\n    };\n    useEffect(() => {\n        let startValue;\n        if (eventKey === \"Backspace\") {\n            startValue = \"\";\n        }\n        else if (eventKey && eventKey.length === 1) {\n            startValue = eventKey;\n        }\n        else {\n            startValue = value;\n        }\n        if (startValue == null) {\n            startValue = \"\";\n        }\n        updateValue(startValue);\n        refInput.current?.focus();\n    }, []);\n    const refInput = useRef(null);\n    return (<input value={value || \"\"} ref={refInput} onChange={(event) => updateValue(event.target.value)} className=\"my-simple-editor\"/>);\n};\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            jsx: 'react',\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            // react\n            react: 'npm:react@18.2.0',\n            'react-dom': 'npm:react-dom@18.2.0',\n            'react-dom/client': 'npm:react-dom@18.2.0',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            css: {},\n            react: {\n                main: './umd/react.production.min.js',\n            },\n            'react-dom': {\n                main: './umd/react-dom.production.min.js',\n            },\n            'react-dom/server': {\n                main: '../umd/react-dom-server.browser.production.min.js',\n            },\n            app: {\n                main: './index.jsx',\n                defaultExtension: 'jsx',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"react":"18","react-dom":"18","@types/react":"18","@types/react-dom":"18","ag-grid-react":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}},"extras":["fontawesome"]}