{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"app.component.ts","styleFiles":[],"files":{"styles.css":".mood-renderer {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n}\n\n.mood {\n    border-radius: 15px;\n    border: 1px solid grey;\n    background-color: #e6e6e6;\n    padding: 15px;\n    text-align: center;\n    display: inline-block;\n    outline: none;\n}\n\n.default {\n    border: 1px solid transparent !important;\n    padding: 4px;\n}\n\n.selected {\n    border: 1px solid lightgreen !important;\n    padding: 4px;\n}\n\n.numeric-input {\n    box-sizing: border-box;\n    padding-left: var(--ag-spacing);\n    width: 100%;\n    height: 100%;\n}\n\n.my-simple-editor {\n    box-sizing: border-box;\n    padding-left: var(--ag-spacing);\n    width: 100%;\n    height: 100%;\n}\n","data.ts":"export function getData(): any[] {\n    const cloneObject = (obj: any) => JSON.parse(JSON.stringify(obj));\n\n    const students = [\n        {\n            first_name: 'Bob',\n            last_name: 'Harrison',\n            age: 15,\n            gender: 'Male',\n            mood: 'Happy',\n        },\n        {\n            first_name: 'Mary',\n            last_name: 'Wilson',\n            gender: 'Female',\n            age: 11,\n            mood: 'Sad',\n        },\n        {\n            first_name: 'Zahid',\n            last_name: 'Khan',\n            gender: 'Male',\n            age: 12,\n            mood: 'Happy',\n        },\n        {\n            first_name: 'Jerry',\n            last_name: 'Mane',\n            gender: 'Male',\n            age: 12,\n            mood: 'Happy',\n        },\n    ];\n\n    // double the array twice, make more data!\n    students.forEach((item) => {\n        students.push(cloneObject(item));\n    });\n    students.forEach((item) => {\n        students.push(cloneObject(item));\n    });\n    students.forEach((item) => {\n        students.push(cloneObject(item));\n    });\n\n    return students;\n}\n","gender-renderer.component.ts":"import { ChangeDetectionStrategy, Component, computed, signal } from '@angular/core';\n\nimport type { ICellRendererAngularComp } from 'ag-grid-angular';\nimport type { ICellRendererParams } from 'ag-grid-community';\n\n@Component({\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    template: `\n        @if (value()) {\n            <span> <i [class]=\"iconClass()\"> </i> {{ value() }} </span>\n        }\n    `,\n})\nexport class GenderRenderer implements ICellRendererAngularComp {\n    value = signal(undefined);\n    iconClass = computed(() => (this.value() === 'Male' ? 'fa fa-male' : 'fa fa-female'));\n\n    agInit(params: ICellRendererParams): void {\n        this.value.set(params.value);\n    }\n\n    refresh(params: ICellRendererParams) {\n        return false;\n    }\n}\n","mood-editor.component.ts":"import { NgClass } from '@angular/common';\nimport type { AfterViewInit } from '@angular/core';\nimport { Component, ViewChild, ViewContainerRef } from '@angular/core';\n\nimport type { ICellEditorAngularComp } from 'ag-grid-angular';\n\n@Component({\n    standalone: true,\n    imports: [NgClass],\n    template: `\n        <div #container class=\"mood\" tabindex=\"0\" (keydown)=\"onKeyDown($event)\">\n            <img\n                src=\"https://www.ag-grid.com/example-assets/smileys/happy.png\"\n                (click)=\"onClick(true)\"\n                [ngClass]=\"{ selected: happy, default: !happy }\"\n            />\n            <img\n                src=\"https://www.ag-grid.com/example-assets/smileys/sad.png\"\n                (click)=\"onClick(false)\"\n                [ngClass]=\"{ selected: !happy, default: happy }\"\n            />\n        </div>\n    `,\n    styles: [\n        `\n            .mood {\n                border-radius: 15px;\n                border: 1px solid grey;\n                background-color: #e6e6e6;\n                padding: 15px;\n                text-align: center;\n                display: inline-block;\n                outline: none;\n            }\n\n            .default {\n                padding-left: 10px;\n                padding-right: 10px;\n                border: 1px solid transparent;\n                padding: 4px;\n            }\n\n            .selected {\n                padding-left: 10px;\n                padding-right: 10px;\n                border: 1px solid lightgreen;\n                padding: 4px;\n            }\n        `,\n    ],\n})\nexport class MoodEditor implements ICellEditorAngularComp, AfterViewInit {\n    private params: any;\n\n    @ViewChild('container', { read: ViewContainerRef }) public container!: ViewContainerRef;\n    public happy = false;\n\n    // dont use afterGuiAttached for post gui events - hook into ngAfterViewInit instead for this\n    ngAfterViewInit() {\n        window.setTimeout(() => {\n            this.container.element.nativeElement.focus();\n        });\n    }\n\n    agInit(params: any): void {\n        this.params = params;\n        this.setHappy(params.value === 'Happy');\n    }\n\n    getValue(): any {\n        return this.happy ? 'Happy' : 'Sad';\n    }\n\n    isPopup(): boolean {\n        return true;\n    }\n\n    setHappy(happy: boolean): void {\n        this.happy = happy;\n    }\n\n    toggleMood(): void {\n        this.setHappy(!this.happy);\n    }\n\n    onClick(happy: boolean) {\n        this.setHappy(happy);\n        this.params.stopEditing();\n    }\n\n    onKeyDown(event: any): void {\n        const key = event.key;\n        if (\n            key == 'ArrowLeft' || // left\n            key == 'ArrowRight'\n        ) {\n            // right\n            this.toggleMood();\n            event.stopPropagation();\n        }\n    }\n}\n","mood-renderer.component.ts":"import { ChangeDetectionStrategy, Component, signal } from '@angular/core';\n\nimport type { ICellRendererAngularComp } from 'ag-grid-angular';\nimport type { ICellRendererParams } from 'ag-grid-community';\n\n@Component({\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    template: `<div class=\"mood-renderer\"><img width=\"20px\" [src]=\"imgForMood()\" /></div>`,\n})\nexport class MoodRenderer implements ICellRendererAngularComp {\n    imgForMood = signal<string>('');\n\n    agInit(params: ICellRendererParams): void {\n        this.setMood(params);\n    }\n\n    refresh(params: ICellRendererParams): boolean {\n        this.setMood(params);\n        return true;\n    }\n\n    private setMood(params: ICellRendererParams) {\n        const imgUrl =\n            'https://www.ag-grid.com/example-assets/smileys/' + (params.value === 'Happy' ? 'happy.png' : 'sad.png');\n        this.imgForMood.set(imgUrl);\n    }\n}\n","simpleTextEditor.component.ts":"import type { AfterViewInit } from '@angular/core';\nimport { Component, ViewChild, ViewContainerRef } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport type { ICellEditorAngularComp } from 'ag-grid-angular';\nimport type { ICellEditorParams } from 'ag-grid-community';\n\n@Component({\n    standalone: true,\n    imports: [FormsModule],\n    template: `<input #input [(ngModel)]=\"value\" class=\"my-simple-editor\" />`,\n})\nexport class SimpleTextEditor implements ICellEditorAngularComp, AfterViewInit {\n    private params!: ICellEditorParams;\n    public value: any;\n\n    @ViewChild('input', { read: ViewContainerRef }) public input!: ViewContainerRef;\n\n    agInit(params: ICellEditorParams): void {\n        this.params = params;\n        this.value = this.getInitialValue(params);\n    }\n\n    getValue(): any {\n        return this.value;\n    }\n\n    getInitialValue(params: ICellEditorParams): any {\n        let startValue = params.value;\n\n        const eventKey = params.eventKey;\n        const isBackspace = eventKey === 'Backspace';\n\n        if (isBackspace) {\n            startValue = '';\n        } else if (eventKey && eventKey.length === 1) {\n            startValue = eventKey;\n        }\n\n        if (startValue !== null && startValue !== undefined) {\n            return startValue;\n        }\n\n        return '';\n    }\n\n    ngAfterViewInit() {\n        setTimeout(() => {\n            this.input.element.nativeElement.focus();\n        });\n    }\n}\n","main.ts":"import '@angular/compiler';\nimport { provideHttpClient } from '@angular/common/http';\nimport { enableProdMode } from '@angular/core';\nimport { bootstrapApplication } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\nif ((window as any).ENABLE_PROD_MODE) {\n    enableProdMode();\n}\n\nbootstrapApplication(AppComponent, {\n    providers: [provideHttpClient()],\n});\n","app.component.ts":"import { Component } from \"@angular/core\";\nimport { AgGridAngular } from \"ag-grid-angular\";\nimport \"./styles.css\";\nimport {\n  ClientSideRowModelModule,\n  ColDef,\n  ColGroupDef,\n  CustomEditorModule,\n  GridApi,\n  GridOptions,\n  GridReadyEvent,\n  ModuleRegistry,\n  NumberEditorModule,\n  TextEditorModule,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\nimport { RichSelectModule } from \"ag-grid-enterprise\";\nimport { getData } from \"./data\";\nModuleRegistry.registerModules([\n  ClientSideRowModelModule,\n  RichSelectModule,\n  NumberEditorModule,\n  TextEditorModule,\n  CustomEditorModule,\n  ValidationModule /* Development Only */,\n]);\nimport { GenderRenderer } from \"./gender-renderer.component\";\nimport { MoodEditor } from \"./mood-editor.component\";\nimport { MoodRenderer } from \"./mood-renderer.component\";\nimport { SimpleTextEditor } from \"./simpleTextEditor.component\";\n\n@Component({\n  selector: \"my-app\",\n  standalone: true,\n  imports: [\n    AgGridAngular,\n    GenderRenderer,\n    MoodEditor,\n    MoodRenderer,\n    SimpleTextEditor,\n  ],\n  template: `<ag-grid-angular\n    style=\"width: 100%; height: 100%;\"\n    [columnDefs]=\"columnDefs\"\n    [rowData]=\"rowData\"\n    [defaultColDef]=\"defaultColDef\"\n  /> `,\n})\nexport class AppComponent {\n  columnDefs: ColDef[] = [\n    { field: \"first_name\", headerName: \"Provided Text\" },\n    {\n      field: \"last_name\",\n      headerName: \"Custom Text\",\n      cellEditor: SimpleTextEditor,\n    },\n    {\n      field: \"age\",\n      headerName: \"Provided Number\",\n      cellEditor: \"agNumberCellEditor\",\n    },\n    {\n      field: \"gender\",\n      headerName: \"Provided Rich Select\",\n      cellRenderer: GenderRenderer,\n      cellEditor: \"agRichSelectCellEditor\",\n      cellEditorParams: {\n        cellRenderer: GenderRenderer,\n        values: [\"Male\", \"Female\"],\n      },\n    },\n    {\n      field: \"mood\",\n      headerName: \"Custom Mood\",\n      cellRenderer: MoodRenderer,\n      cellEditor: MoodEditor,\n      cellEditorPopup: true,\n    },\n  ];\n  rowData: any[] | null = getData();\n  defaultColDef: ColDef = {\n    editable: true,\n    flex: 1,\n    minWidth: 100,\n  };\n}\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","main.ts":"import '@angular/compiler';\nimport { provideHttpClient } from '@angular/common/http';\nimport { enableProdMode } from '@angular/core';\nimport { bootstrapApplication } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\nif ((window as any).ENABLE_PROD_MODE) {\n    enableProdMode();\n}\n\nbootstrapApplication(AppComponent, {\n    providers: [provideHttpClient()],\n});\n","systemjs.config.js":"(function (global) {\n    var ANGULAR_VERSION = '^19';\n    window.ENABLE_PROD_MODE = true;\n\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true,\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        // map tells the System loader where to look for things\n        map: {\n            '@angular/compiler': 'npm:@angular/compiler@' + ANGULAR_VERSION + '/fesm2022/compiler.mjs',\n            '@angular/platform-browser-dynamic':\n                'npm:@angular/platform-browser-dynamic@' + ANGULAR_VERSION + '/fesm2022/platform-browser-dynamic.mjs',\n\n            '@angular/core': 'npm:@angular/core@' + ANGULAR_VERSION + '/fesm2022/core.mjs',\n            '@angular/core/primitives/signals':\n                'npm:@angular/core@' + ANGULAR_VERSION + '/fesm2022/primitives/signals.mjs',\n            '@angular/core/primitives/event-dispatch':\n                'npm:@angular/core@' + ANGULAR_VERSION + '/fesm2022/primitives/event-dispatch.mjs',\n            '@angular/common': 'npm:@angular/common@' + ANGULAR_VERSION + '/fesm2022/common.mjs',\n            '@angular/common/http': 'npm:@angular/common@' + ANGULAR_VERSION + '/fesm2022/http.mjs',\n\n            '@angular/platform-browser':\n                'npm:@angular/platform-browser@' + ANGULAR_VERSION + '/fesm2022/platform-browser.mjs',\n            '@angular/platform-browser/animations':\n                'npm:@angular/platform-browser@' + ANGULAR_VERSION + '/fesm2022/animations.mjs',\n\n            '@angular/forms': 'npm:@angular/forms@' + ANGULAR_VERSION + '/fesm2022/forms.mjs',\n            '@angular/animations': 'npm:@angular/animations@' + ANGULAR_VERSION + '/fesm2022/animations.mjs',\n            '@angular/animations/browser': 'npm:@angular/animations@' + ANGULAR_VERSION + '/fesm2022/browser.mjs',\n\n            rxjs: 'npm:rxjs@7.8.1/dist/bundles/rxjs.umd.min.js',\n            'rxjs/operators': 'npm:rxjs@7.8.1/dist/bundles/rxjs.umd.min.js',\n\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@4.4/lib/typescript.min.js',\n\n            // our app is within the app folder, appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap,\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {}, // Stop css.js from defaulting to apps .ts extension\n            app: {\n                main: './main.ts',\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-angular': {\n                main: './fesm2022/ag-grid-angular.mjs',\n                defaultExtension: 'mjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"@angular/core":"^19","@angular/common":"^19","@angular/forms":"^19","@angular/platform-browser":"^19","ag-grid-angular":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}},"extras":["fontawesome"]}