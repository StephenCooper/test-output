{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"app.component.ts","styleFiles":[],"files":{"styles.css":".mood {\n    border-radius: 15px;\n    border: 1px solid grey;\n    background-color: #e6e6e6;\n    padding: 15px;\n    text-align: center;\n    display: inline-block;\n    outline: none;\n}\n\n.default {\n    border: 1px solid transparent !important;\n    padding: 4px;\n}\n\n.selected {\n    border: 1px solid lightgreen !important;\n    padding: 4px;\n}\n\n.simple-input-editor {\n    width: 100%;\n    height: 100%;\n}\n","data.ts":"export interface IRow {\n    value: string | number;\n    type: 'age' | 'gender' | 'mood';\n}\n\nexport function getData(): IRow[] {\n    return [\n        { value: 14, type: 'age' },\n        { value: 'Female', type: 'gender' },\n        { value: 'Happy', type: 'mood' },\n        { value: 21, type: 'age' },\n        { value: 'Male', type: 'gender' },\n        { value: 'Sad', type: 'mood' },\n    ];\n}\n","mood-editor.component.ts":"import { NgClass } from '@angular/common';\nimport type { AfterViewInit } from '@angular/core';\nimport { Component, ViewChild, ViewContainerRef } from '@angular/core';\n\nimport type { ICellEditorAngularComp } from 'ag-grid-angular';\n\n@Component({\n    standalone: true,\n    imports: [NgClass],\n    template: `\n        <div #container class=\"mood\" tabindex=\"0\" (keydown)=\"onKeyDown($event)\">\n            <img\n                src=\"https://www.ag-grid.com/example-assets/smileys/happy.png\"\n                (click)=\"onClick(true)\"\n                [ngClass]=\"{ selected: happy, default: !happy }\"\n            />\n            <img\n                src=\"https://www.ag-grid.com/example-assets/smileys/sad.png\"\n                (click)=\"onClick(false)\"\n                [ngClass]=\"{ selected: !happy, default: happy }\"\n            />\n        </div>\n    `,\n    styles: [\n        `\n            .mood {\n                border-radius: 15px;\n                border: 1px solid grey;\n                background-color: #e6e6e6;\n                padding: 15px;\n                text-align: center;\n                display: inline-block;\n                outline: none;\n            }\n\n            .default {\n                padding-left: 10px;\n                padding-right: 10px;\n                border: 1px solid transparent;\n                padding: 4px;\n            }\n\n            .selected {\n                padding-left: 10px;\n                padding-right: 10px;\n                border: 1px solid lightgreen;\n                padding: 4px;\n            }\n        `,\n    ],\n})\nexport class MoodEditor implements ICellEditorAngularComp, AfterViewInit {\n    private params: any;\n\n    @ViewChild('container', { read: ViewContainerRef }) public container!: ViewContainerRef;\n    public happy = false;\n\n    // dont use afterGuiAttached for post gui events - hook into ngAfterViewInit instead for this\n    ngAfterViewInit() {\n        window.setTimeout(() => {\n            this.container.element.nativeElement.focus();\n        });\n    }\n\n    agInit(params: any): void {\n        this.params = params;\n        this.setHappy(params.value === 'Happy');\n    }\n\n    getValue(): any {\n        return this.happy ? 'Happy' : 'Sad';\n    }\n\n    setHappy(happy: boolean): void {\n        this.happy = happy;\n    }\n\n    toggleMood(): void {\n        this.setHappy(!this.happy);\n    }\n\n    onClick(happy: boolean) {\n        this.setHappy(happy);\n        this.params.stopEditing();\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n        const key = event.key;\n        if (\n            key === 'ArrowLeft' || // left\n            key == 'ArrowRight'\n        ) {\n            // right\n            this.toggleMood();\n            event.stopPropagation();\n        }\n    }\n}\n","numeric-cell-editor.component.ts":"import type { AfterViewInit } from '@angular/core';\nimport { Component, ViewChild, ViewContainerRef } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport type { ICellEditorAngularComp } from 'ag-grid-angular';\nimport type { ICellEditorParams } from 'ag-grid-community';\n\n// backspace starts the editor on Windows\nconst KEY_BACKSPACE = 'Backspace';\nconst KEY_ENTER = 'Enter';\nconst KEY_TAB = 'Tab';\n\n@Component({\n    standalone: true,\n    imports: [FormsModule],\n    template: `<input #input class=\"simple-input-editor\" (keydown)=\"onKeyDown($event)\" [(ngModel)]=\"value\" />`,\n})\nexport class NumericCellEditor implements ICellEditorAngularComp, AfterViewInit {\n    private params: any;\n    public value!: number;\n    private cancelBeforeStart = false;\n\n    @ViewChild('input', { read: ViewContainerRef }) public input!: ViewContainerRef;\n\n    agInit(params: ICellEditorParams): void {\n        this.params = params;\n        this.setInitialState(this.params);\n\n        // only start edit if key pressed is a number, not a letter\n        this.cancelBeforeStart = !!(params.eventKey?.length === 1 && '1234567890'.indexOf(params.eventKey) < 0);\n    }\n\n    setInitialState(params: ICellEditorParams) {\n        let startValue;\n\n        const eventKey = params.eventKey;\n\n        if (eventKey === KEY_BACKSPACE) {\n            // if backspace or delete pressed, we clear the cell\n            startValue = '';\n        } else if (eventKey && eventKey.length === 1) {\n            // if a letter was pressed, we start with the letter\n            startValue = eventKey;\n        } else {\n            // otherwise we start with the current value\n            startValue = params.value;\n        }\n\n        this.value = startValue;\n    }\n\n    getValue(): any {\n        return this.value;\n    }\n\n    isCancelBeforeStart(): boolean {\n        return this.cancelBeforeStart;\n    }\n\n    // will reject the number if it greater than 1,000,000\n    // not very practical, but demonstrates the method.\n    isCancelAfterEnd(): boolean {\n        return this.value > 1000000;\n    }\n\n    onKeyDown(event: any): void {\n        if (event.key === 'Escape') {\n            return;\n        }\n        if (this.isLeftOrRight(event) || this.isBackspace(event)) {\n            event.stopPropagation();\n            return;\n        }\n\n        if (!this.finishedEditingPressed(event) && !this.isNumericKey(event)) {\n            if (event.preventDefault) event.preventDefault();\n        }\n    }\n\n    // dont use afterGuiAttached for post gui events - hook into ngAfterViewInit instead for this\n    ngAfterViewInit() {\n        window.setTimeout(() => {\n            this.input.element.nativeElement.focus();\n        });\n    }\n\n    private isCharNumeric(charStr: string): boolean {\n        return !!/^\\d+$/.test(charStr);\n    }\n\n    private isNumericKey(event: any): boolean {\n        const charStr = event.key;\n        return this.isCharNumeric(charStr);\n    }\n\n    private isBackspace(event: any) {\n        return event.key === KEY_BACKSPACE;\n    }\n\n    private isLeftOrRight(event: any) {\n        return ['ArrowLeft', 'ArrowRight'].indexOf(event.key) > -1;\n    }\n\n    private finishedEditingPressed(event: any) {\n        const key = event.key;\n        return key === KEY_ENTER || key === KEY_TAB;\n    }\n}\n","main.ts":"import '@angular/compiler';\nimport { provideHttpClient } from '@angular/common/http';\nimport { enableProdMode } from '@angular/core';\nimport { bootstrapApplication } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\nif ((window as any).ENABLE_PROD_MODE) {\n    enableProdMode();\n}\n\nbootstrapApplication(AppComponent, {\n    providers: [provideHttpClient()],\n});\n","app.component.ts":"import { Component } from \"@angular/core\";\nimport { AgGridAngular } from \"ag-grid-angular\";\nimport \"./styles.css\";\nimport {\n  CellEditingStartedEvent,\n  CellEditingStoppedEvent,\n  CellEditorSelectorResult,\n  ClientSideRowModelModule,\n  ColDef,\n  ColGroupDef,\n  GridApi,\n  GridOptions,\n  GridReadyEvent,\n  ICellEditorParams,\n  ModuleRegistry,\n  NumberEditorModule,\n  RowEditingStartedEvent,\n  RowEditingStoppedEvent,\n  TextEditorModule,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\nimport {\n  ColumnMenuModule,\n  ColumnsToolPanelModule,\n  ContextMenuModule,\n  RichSelectModule,\n} from \"ag-grid-enterprise\";\nimport { IRow, getData } from \"./data\";\nModuleRegistry.registerModules([\n  NumberEditorModule,\n  TextEditorModule,\n  ClientSideRowModelModule,\n  ColumnsToolPanelModule,\n  ColumnMenuModule,\n  ContextMenuModule,\n  RichSelectModule,\n  ValidationModule /* Development Only */,\n]);\nimport { MoodEditor } from \"./mood-editor.component\";\nimport { NumericCellEditor } from \"./numeric-cell-editor.component\";\n\n@Component({\n  selector: \"my-app\",\n  standalone: true,\n  imports: [AgGridAngular, MoodEditor, NumericCellEditor],\n  template: `<ag-grid-angular\n    style=\"width: 100%; height: 100%;\"\n    [columnDefs]=\"columnDefs\"\n    [defaultColDef]=\"defaultColDef\"\n    [rowData]=\"rowData\"\n    (rowEditingStarted)=\"onRowEditingStarted($event)\"\n    (rowEditingStopped)=\"onRowEditingStopped($event)\"\n    (cellEditingStarted)=\"onCellEditingStarted($event)\"\n    (cellEditingStopped)=\"onCellEditingStopped($event)\"\n  /> `,\n})\nexport class AppComponent {\n  columnDefs: ColDef[] = [\n    { field: \"type\" },\n    {\n      field: \"value\",\n      editable: true,\n      cellEditorSelector: cellEditorSelector,\n    },\n  ];\n  defaultColDef: ColDef = {\n    flex: 1,\n    cellDataType: false,\n  };\n  rowData: IRow[] | null = getData();\n\n  onRowEditingStarted(event: RowEditingStartedEvent) {\n    console.log(\"never called - not doing row editing\");\n  }\n\n  onRowEditingStopped(event: RowEditingStoppedEvent) {\n    console.log(\"never called - not doing row editing\");\n  }\n\n  onCellEditingStarted(event: CellEditingStartedEvent) {\n    console.log(\"cellEditingStarted\");\n  }\n\n  onCellEditingStopped(event: CellEditingStoppedEvent) {\n    console.log(\"cellEditingStopped\");\n  }\n}\n\nfunction cellEditorSelector(\n  params: ICellEditorParams<IRow>,\n): CellEditorSelectorResult | undefined {\n  if (params.data.type === \"age\") {\n    return {\n      component: NumericCellEditor,\n    };\n  }\n  if (params.data.type === \"gender\") {\n    return {\n      component: \"agRichSelectCellEditor\",\n      params: {\n        values: [\"Male\", \"Female\"],\n      },\n    };\n  }\n  if (params.data.type === \"mood\") {\n    return {\n      component: MoodEditor,\n      popup: true,\n      popupPosition: \"under\",\n    };\n  }\n  return undefined;\n}\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","main.ts":"import '@angular/compiler';\nimport { provideHttpClient } from '@angular/common/http';\nimport { enableProdMode } from '@angular/core';\nimport { bootstrapApplication } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\nif ((window as any).ENABLE_PROD_MODE) {\n    enableProdMode();\n}\n\nbootstrapApplication(AppComponent, {\n    providers: [provideHttpClient()],\n});\n","systemjs.config.js":"(function (global) {\n    var ANGULAR_VERSION = '^19';\n    window.ENABLE_PROD_MODE = true;\n\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true,\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        // map tells the System loader where to look for things\n        map: {\n            '@angular/compiler': 'npm:@angular/compiler@' + ANGULAR_VERSION + '/fesm2022/compiler.mjs',\n            '@angular/platform-browser-dynamic':\n                'npm:@angular/platform-browser-dynamic@' + ANGULAR_VERSION + '/fesm2022/platform-browser-dynamic.mjs',\n\n            '@angular/core': 'npm:@angular/core@' + ANGULAR_VERSION + '/fesm2022/core.mjs',\n            '@angular/core/primitives/signals':\n                'npm:@angular/core@' + ANGULAR_VERSION + '/fesm2022/primitives/signals.mjs',\n            '@angular/core/primitives/event-dispatch':\n                'npm:@angular/core@' + ANGULAR_VERSION + '/fesm2022/primitives/event-dispatch.mjs',\n            '@angular/common': 'npm:@angular/common@' + ANGULAR_VERSION + '/fesm2022/common.mjs',\n            '@angular/common/http': 'npm:@angular/common@' + ANGULAR_VERSION + '/fesm2022/http.mjs',\n\n            '@angular/platform-browser':\n                'npm:@angular/platform-browser@' + ANGULAR_VERSION + '/fesm2022/platform-browser.mjs',\n            '@angular/platform-browser/animations':\n                'npm:@angular/platform-browser@' + ANGULAR_VERSION + '/fesm2022/animations.mjs',\n\n            '@angular/forms': 'npm:@angular/forms@' + ANGULAR_VERSION + '/fesm2022/forms.mjs',\n            '@angular/animations': 'npm:@angular/animations@' + ANGULAR_VERSION + '/fesm2022/animations.mjs',\n            '@angular/animations/browser': 'npm:@angular/animations@' + ANGULAR_VERSION + '/fesm2022/browser.mjs',\n\n            rxjs: 'npm:rxjs@7.8.1/dist/bundles/rxjs.umd.min.js',\n            'rxjs/operators': 'npm:rxjs@7.8.1/dist/bundles/rxjs.umd.min.js',\n\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@4.4/lib/typescript.min.js',\n\n            // our app is within the app folder, appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap,\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {}, // Stop css.js from defaulting to apps .ts extension\n            app: {\n                main: './main.ts',\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-angular': {\n                main: './fesm2022/ag-grid-angular.mjs',\n                defaultExtension: 'mjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"@angular/core":"^19","@angular/common":"^19","@angular/forms":"^19","@angular/platform-browser":"^19","ag-grid-angular":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}