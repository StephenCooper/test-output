{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["data.js","moodEditor.js","numericCellEditor.js","main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".mood {\n    border-radius: 15px;\n    border: 1px solid grey;\n    background-color: #e6e6e6;\n    padding: 15px;\n    text-align: center;\n    display: inline-block;\n    outline: none;\n}\n\n.default {\n    border: 1px solid transparent !important;\n    padding: 4px;\n}\n\n.selected {\n    border: 1px solid lightgreen !important;\n    padding: 4px;\n}\n\n.simple-input-editor {\n    width: 100%;\n    height: 100%;\n}\n","data.js":"\n\n\n\n\nfunction getData() {\n    return [\n        { value: 14, type: 'age' },\n        { value: 'Female', type: 'gender' },\n        { value: 'Happy', type: 'mood' },\n        { value: 21, type: 'age' },\n        { value: 'Male', type: 'gender' },\n        { value: 'Sad', type: 'mood' },\n    ];\n}\n","moodEditor.js":"\nclass MoodEditor  {\n    mood;\n    container;\n    happyImg;\n    sadImg;\n\n    onKeyDown(event) {\n        const key = event.key;\n        if (\n            key === 'ArrowLeft' || // left\n            key == 'ArrowRight'\n        ) {\n            // right\n            this.toggleMood();\n            event.stopPropagation();\n        }\n    }\n\n    toggleMood() {\n        this.selectMood(this.mood === 'Happy' ? 'Sad' : 'Happy');\n    }\n\n    init(params) {\n        this.container = document.createElement('div');\n        this.container.className = 'mood';\n        this.container.tabIndex = '0'; // to allow the div to capture events\n\n        this.happyImg = document.createElement('img');\n        this.happyImg.src = 'https://www.ag-grid.com/example-assets/smileys/happy.png';\n\n        this.sadImg = document.createElement('img');\n        this.sadImg.src = 'https://www.ag-grid.com/example-assets/smileys/sad.png';\n\n        this.container.appendChild(this.happyImg);\n        this.container.appendChild(this.sadImg);\n\n        this.happyImg.addEventListener('click', () => {\n            this.selectMood('Happy');\n            params.stopEditing();\n        });\n        this.sadImg.addEventListener('click', () => {\n            this.selectMood('Sad');\n            params.stopEditing();\n        });\n        this.container.addEventListener('keydown', (event) => {\n            this.onKeyDown(event);\n        });\n\n        this.selectMood(params.value);\n    }\n\n    selectMood(mood) {\n        this.mood = mood;\n        this.happyImg.className = mood === 'Happy' ? 'selected' : 'default';\n        this.sadImg.className = mood === 'Sad' ? 'selected' : 'default';\n    }\n\n    // gets called once when grid ready to insert the element\n    getGui() {\n        return this.container;\n    }\n\n    afterGuiAttached() {\n        this.container.focus();\n    }\n\n    getValue() {\n        return this.mood;\n    }\n\n    // any cleanup we need to be done here\n    destroy() {}\n}\n","numericCellEditor.js":"\n// backspace starts the editor on Windows\nconst KEY_BACKSPACE = 'Backspace';\nclass NumericCellEditor  {\n    eInput;\n    cancelBeforeStart;\n\n    // gets called once before the renderer is used\n    init(params) {\n        // create the cell\n        this.eInput = document.createElement('input');\n        this.eInput.className = 'simple-input-editor';\n\n        const eventKey = params.eventKey;\n\n        if (eventKey === KEY_BACKSPACE) {\n            this.eInput.value = '';\n        } else if (this.isCharNumeric(eventKey)) {\n            this.eInput.value = eventKey;\n        } else {\n            if (params.value !== undefined && params.value !== null) {\n                this.eInput.value = params.value;\n            }\n        }\n\n        this.eInput.addEventListener('keydown', (event) => {\n            if (!event.key || event.key.length !== 1) {\n                return;\n            }\n\n            if (!this.isNumericKey(event)) {\n                this.eInput.focus();\n                if (event.preventDefault) event.preventDefault();\n            } else if (this.isNavigationKey(event) || this.isBackspace(event)) {\n                event.stopPropagation();\n            }\n        });\n\n        // only start edit if key pressed is a number, not a letter\n        const isCharacter = eventKey && eventKey.length === 1;\n        const isNotANumber = isCharacter && '1234567890'.indexOf(eventKey) < 0;\n        this.cancelBeforeStart = !!isNotANumber;\n    }\n\n    isNumericKey(event) {\n        const charStr = event.key;\n        return this.isCharNumeric(charStr);\n    }\n\n    isBackspace(event) {\n        return event.key === KEY_BACKSPACE;\n    }\n\n    isNavigationKey(event) {\n        return event.key === 'ArrowLeft' || event.key === 'ArrowRight';\n    }\n\n    isCharNumeric(charStr) {\n        return charStr && !!/^\\d+$/.test(charStr);\n    }\n\n    // gets called once when grid ready to insert the element\n    getGui() {\n        return this.eInput;\n    }\n\n    // focus and select can be done after the gui is attached\n    afterGuiAttached() {\n        this.eInput.focus();\n    }\n\n    // returns the new value after editing\n    isCancelBeforeStart() {\n        return this.cancelBeforeStart;\n    }\n\n    // example - will reject the number if it contains the value 007\n    // - not very practical, but demonstrates the method.\n    isCancelAfterEnd() {\n        const value = this.getValue();\n        return value.indexOf('007') >= 0;\n    }\n\n    // returns the new value after editing\n    getValue() {\n        return this.eInput.value;\n    }\n\n    // any cleanup we need to be done here\n    destroy() {\n        // but this example is simple, no cleanup, we could  even leave this method out as it's optional\n    }\n}\n","main.js":"let gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    { field: \"type\" },\n    {\n      field: \"value\",\n      editable: true,\n      cellEditorSelector: cellEditorSelector,\n    },\n  ],\n  defaultColDef: {\n    flex: 1,\n    cellDataType: false,\n  },\n  rowData: getData(),\n\n  onRowEditingStarted: onRowEditingStarted,\n  onRowEditingStopped: onRowEditingStopped,\n  onCellEditingStarted: onCellEditingStarted,\n  onCellEditingStopped: onCellEditingStopped,\n};\n\nfunction onRowEditingStarted(event) {\n  console.log(\"never called - not doing row editing\");\n}\n\nfunction onRowEditingStopped(event) {\n  console.log(\"never called - not doing row editing\");\n}\n\nfunction onCellEditingStarted(event) {\n  console.log(\"cellEditingStarted\");\n}\n\nfunction onCellEditingStopped(event) {\n  console.log(\"cellEditingStopped\");\n}\n\nfunction cellEditorSelector(params) {\n  if (params.data.type === \"age\") {\n    return {\n      component: NumericCellEditor,\n    };\n  }\n\n  if (params.data.type === \"gender\") {\n    return {\n      component: \"agRichSelectCellEditor\",\n      params: {\n        values: [\"Male\", \"Female\"],\n      },\n    };\n  }\n\n  if (params.data.type === \"mood\") {\n    return {\n      component: MoodEditor,\n      popup: true,\n      popupPosition: \"under\",\n    };\n  }\n\n  return undefined;\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}