{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"main.ts","scriptFiles":[],"styleFiles":[],"files":{"styles.css":".mood {\n    border-radius: 15px;\n    border: 1px solid grey;\n    background-color: #e6e6e6;\n    padding: 15px;\n    text-align: center;\n    display: inline-block;\n    outline: none;\n}\n\n.default {\n    border: 1px solid transparent !important;\n    padding: 4px;\n}\n\n.selected {\n    border: 1px solid lightgreen !important;\n    padding: 4px;\n}\n\n.simple-input-editor {\n    width: 100%;\n    height: 100%;\n}\n","data.ts":"export interface IRow {\n  value: string | number;\n  type: \"age\" | \"gender\" | \"mood\";\n}\n\nexport function getData(): IRow[] {\n  return [\n    { value: 14, type: \"age\" },\n    { value: \"Female\", type: \"gender\" },\n    { value: \"Happy\", type: \"mood\" },\n    { value: 21, type: \"age\" },\n    { value: \"Male\", type: \"gender\" },\n    { value: \"Sad\", type: \"mood\" },\n  ];\n}\n","main.ts":"import \"ag-grid-enterprise\";\nimport { createApp, defineComponent } from \"vue\";\n\nimport type {\n  CellEditingStartedEvent,\n  CellEditingStoppedEvent,\n  ColDef,\n  ICellEditorParams,\n  RowEditingStartedEvent,\n  RowEditingStoppedEvent,\n} from \"ag-grid-community\";\nimport {\n  ClientSideRowModelModule,\n  ModuleRegistry,\n  NumberEditorModule,\n  TextEditorModule,\n  ValidationModule,\n} from \"ag-grid-community\";\nimport {\n  ColumnMenuModule,\n  ColumnsToolPanelModule,\n  ContextMenuModule,\n  RichSelectModule,\n} from \"ag-grid-enterprise\";\nimport { AgGridVue } from \"ag-grid-vue3\";\n\nimport { getData } from \"./data.ts\";\nimport MoodEditor from \"./moodEditorVue.ts\";\nimport NumericCellEditor from \"./numericCellEditorVue.ts\";\nimport \"./styles.css\";\n\nModuleRegistry.registerModules([\n  NumberEditorModule,\n  TextEditorModule,\n  ClientSideRowModelModule,\n  ColumnMenuModule,\n  ContextMenuModule,\n  ColumnsToolPanelModule,\n  RichSelectModule,\n  ValidationModule /* Development Only */,\n]);\n\nconst VueExample = defineComponent({\n  template: `\n        <div style=\"height: 100%\">\n            <ag-grid-vue\n                    style=\"width: 100%; height: 100%;\"\n                    id=\"myGrid\"\n                    :columnDefs=\"columnDefs\"\n                    :defaultColDef=\"defaultColDef\"\n                    :rowData=\"rowData\"                    \n                    @row-editing-started=\"onRowEditingStarted\"\n                    @row-editing-stopped=\"onRowEditingStopped\"\n                    @cell-editing-started=\"onCellEditingStarted\"\n                    @cell-editing-stopped=\"onCellEditingStopped\"></ag-grid-vue>\n        </div>\n    `,\n  components: {\n    \"ag-grid-vue\": AgGridVue,\n    MoodEditor,\n    NumericCellEditor,\n  },\n  data: function () {\n    return {\n      columnDefs: <ColDef[]>[\n        {\n          field: \"type\",\n        },\n        {\n          field: \"value\",\n          editable: true,\n          cellEditorSelector: (params: ICellEditorParams) => {\n            if (params.data.type === \"age\") {\n              return {\n                component: \"NumericCellEditor\",\n              };\n            }\n            if (params.data.type === \"gender\") {\n              return {\n                component: \"agRichSelectCellEditor\",\n                params: {\n                  values: [\"Male\", \"Female\"],\n                },\n              };\n            }\n            if (params.data.type === \"mood\") {\n              return {\n                component: \"MoodEditor\",\n                popup: true,\n                popupPosition: \"under\",\n              };\n            }\n            return undefined;\n          },\n        },\n      ],\n      defaultColDef: <ColDef>{\n        flex: 1,\n        cellDataType: false,\n      },\n      rowData: null,\n    };\n  },\n  created() {\n    this.rowData = getData();\n  },\n  methods: {\n    onRowEditingStarted(event: RowEditingStartedEvent) {\n      console.log(\"never called - not doing row editing\");\n    },\n    onRowEditingStopped(event: RowEditingStoppedEvent) {\n      console.log(\"never called - not doing row editing\");\n    },\n    onCellEditingStarted(event: CellEditingStartedEvent) {\n      console.log(\"cellEditingStarted\");\n    },\n    onCellEditingStopped(event: CellEditingStoppedEvent) {\n      console.log(\"cellEditingStopped\");\n    },\n  },\n});\n\ncreateApp(VueExample).mount(\"#app\");\n","moodEditorVue.ts":"import { defineComponent, nextTick } from \"vue\";\n\nexport default defineComponent({\n  template: `\n      <div :ref=\"'container'\" class=\"mood\" tabindex=\"0\" @keydown=\"onKeyDown\">\n      <img src=\"https://www.ag-grid.com/example-assets/smileys/happy.png\" @click=\"onClick(true)\" :class=\"{ selected: happy, default: !happy }\">\n      <img src=\"https://www.ag-grid.com/example-assets/smileys/sad.png\" @click=\"onClick(false)\" :class=\"{ selected: !happy, default: happy }\">\n      </div>\n    `,\n  data() {\n    return {\n      happy: false,\n      imgForMood: null,\n    };\n  },\n  methods: {\n    getValue() {\n      return this.happy ? \"Happy\" : \"Sad\";\n    },\n\n    setHappy(happy) {\n      this.happy = happy;\n    },\n\n    toggleMood() {\n      this.setHappy(!this.happy);\n    },\n\n    onClick(happy) {\n      this.setHappy(happy);\n      this.params.stopEditing();\n    },\n\n    onKeyDown(event) {\n      let key = event.key;\n      if (\n        key === \"ArrowLeft\" || // left\n        key == \"ArrowRight\"\n      ) {\n        // right\n        this.toggleMood();\n        event.stopPropagation();\n      }\n    },\n  },\n  created() {\n    this.setHappy(this.params.value === \"Happy\");\n  },\n  mounted() {\n    nextTick(() => {\n      this.$refs.container.focus();\n    });\n  },\n});\n","numericCellEditorVue.ts":"import { defineComponent, nextTick } from \"vue\";\n\n// backspace starts the editor on Windows\nconst KEY_BACKSPACE = \"Backspace\";\nconst KEY_ENTER = \"Enter\";\nconst KEY_TAB = \"Tab\";\n\nexport default defineComponent({\n  template: `<input :ref=\"'input'\" class=\"simple-input-editor\" @keydown=\"onKeyDown($event)\" v-model=\"value\"/>`,\n  data() {\n    return {\n      value: \"\",\n      cancelBeforeStart: true,\n    };\n  },\n  methods: {\n    getValue() {\n      return this.value;\n    },\n\n    isCancelBeforeStart() {\n      return this.cancelBeforeStart;\n    },\n\n    setInitialState(params) {\n      let startValue;\n\n      const eventKey = params.eventKey;\n      if (eventKey === KEY_BACKSPACE) {\n        // if backspace or delete pressed, we clear the cell\n        startValue = \"\";\n      } else if (eventKey && eventKey.length === 1) {\n        // if a letter was pressed, we start with the letter\n        startValue = eventKey;\n      } else {\n        // otherwise we start with the current value\n        startValue = params.value;\n      }\n\n      this.value = startValue;\n    },\n\n    // will reject the number if it greater than 1,000,000\n    // not very practical, but demonstrates the method.\n    isCancelAfterEnd() {\n      return this.value > 1000000;\n    },\n\n    onKeyDown(event) {\n      if (event.key === \"Escape\") {\n        return;\n      }\n      if (this.isLeftOrRight(event) || this.isBackspace(event)) {\n        event.stopPropagation();\n        return;\n      }\n\n      if (!this.finishedEditingPressed(event) && !this.isNumericKey(event)) {\n        if (event.preventDefault) event.preventDefault();\n      }\n    },\n\n    isCharNumeric(charStr) {\n      return /^\\d+$/.test(charStr);\n    },\n\n    isNumericKey(event) {\n      const charStr = event.key;\n      return this.isCharNumeric(charStr);\n    },\n\n    finishedEditingPressed(event) {\n      const key = event.key;\n      return key === KEY_ENTER || key === KEY_TAB;\n    },\n\n    isBackspace(event) {\n      return event.key === KEY_BACKSPACE;\n    },\n\n    isLeftOrRight(event) {\n      return [\"ArrowLeft\", \"ArrowRight\"].indexOf(event.key) > -1;\n    },\n  },\n\n  created() {\n    this.setInitialState(this.params);\n    const eventKey = this.params.eventKey;\n\n    // only start edit if key pressed is a number, not a letter\n    this.cancelBeforeStart =\n      eventKey && eventKey.length === 1 && \"1234567890\".indexOf(eventKey) < 0;\n  },\n  mounted() {\n    nextTick(() => {\n      // need to check if the input reference is still valid - if the edit was cancelled before it started there\n      // wont be an editor component anymore\n      if (this.$refs.input) {\n        this.$refs.input.focus();\n      }\n    });\n  },\n});\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        defaultExtension: 'js',\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            vue: 'npm:vue@3.5.0/dist/vue.esm-browser.js',\n            '@vue/reactivity': 'npm:@vue/reactivity@3.0.0/dist/reactivity.esm-browser.prod.js',\n\n            // vue class component\n            'vue-class-component': 'npm:vue-class-component@^8.0.0-beta.3/dist/vue-class-component.cjs.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            'css.js': {\n                defaultExtension: 'js',\n            },\n            vue: {\n                defaultExtension: 'js',\n            },\n            app: {\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-vue3': {\n                main: './dist/main.umd.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"vue":"^3.5.0","ag-grid-vue3":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}