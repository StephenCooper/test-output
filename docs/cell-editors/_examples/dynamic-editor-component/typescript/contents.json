{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"main.ts","styleFiles":["styles.css"],"files":{"styles.css":".mood {\n    border-radius: 15px;\n    border: 1px solid grey;\n    background-color: #e6e6e6;\n    padding: 15px;\n    text-align: center;\n    display: inline-block;\n    outline: none;\n}\n\n.default {\n    border: 1px solid transparent !important;\n    padding: 4px;\n}\n\n.selected {\n    border: 1px solid lightgreen !important;\n    padding: 4px;\n}\n\n.simple-input-editor {\n    width: 100%;\n    height: 100%;\n}\n","data.ts":"export interface IRow {\n    value: string | number;\n    type: 'age' | 'gender' | 'mood';\n}\n\nexport function getData(): IRow[] {\n    return [\n        { value: 14, type: 'age' },\n        { value: 'Female', type: 'gender' },\n        { value: 'Happy', type: 'mood' },\n        { value: 21, type: 'age' },\n        { value: 'Male', type: 'gender' },\n        { value: 'Sad', type: 'mood' },\n    ];\n}\n","moodEditor.ts":"import type { ICellEditorComp, ICellEditorParams } from 'ag-grid-community';\n\nexport class MoodEditor implements ICellEditorComp {\n    mood!: string;\n    container: any;\n    happyImg: any;\n    sadImg: any;\n\n    onKeyDown(event: any) {\n        const key = event.key;\n        if (\n            key === 'ArrowLeft' || // left\n            key == 'ArrowRight'\n        ) {\n            // right\n            this.toggleMood();\n            event.stopPropagation();\n        }\n    }\n\n    toggleMood() {\n        this.selectMood(this.mood === 'Happy' ? 'Sad' : 'Happy');\n    }\n\n    init(params: ICellEditorParams) {\n        this.container = document.createElement('div');\n        this.container.className = 'mood';\n        this.container.tabIndex = '0'; // to allow the div to capture events\n\n        this.happyImg = document.createElement('img');\n        this.happyImg.src = 'https://www.ag-grid.com/example-assets/smileys/happy.png';\n\n        this.sadImg = document.createElement('img');\n        this.sadImg.src = 'https://www.ag-grid.com/example-assets/smileys/sad.png';\n\n        this.container.appendChild(this.happyImg);\n        this.container.appendChild(this.sadImg);\n\n        this.happyImg.addEventListener('click', () => {\n            this.selectMood('Happy');\n            params.stopEditing();\n        });\n        this.sadImg.addEventListener('click', () => {\n            this.selectMood('Sad');\n            params.stopEditing();\n        });\n        this.container.addEventListener('keydown', (event: any) => {\n            this.onKeyDown(event);\n        });\n\n        this.selectMood(params.value);\n    }\n\n    selectMood(mood: string) {\n        this.mood = mood;\n        this.happyImg.className = mood === 'Happy' ? 'selected' : 'default';\n        this.sadImg.className = mood === 'Sad' ? 'selected' : 'default';\n    }\n\n    // gets called once when grid ready to insert the element\n    getGui() {\n        return this.container;\n    }\n\n    afterGuiAttached() {\n        this.container.focus();\n    }\n\n    getValue() {\n        return this.mood;\n    }\n\n    // any cleanup we need to be done here\n    destroy() {}\n}\n","numericCellEditor.ts":"import type { ICellEditorComp, ICellEditorParams } from 'ag-grid-community';\n\n// backspace starts the editor on Windows\nconst KEY_BACKSPACE = 'Backspace';\nexport class NumericCellEditor implements ICellEditorComp {\n    eInput!: HTMLInputElement;\n    cancelBeforeStart: any;\n\n    // gets called once before the renderer is used\n    init(params: ICellEditorParams) {\n        // create the cell\n        this.eInput = document.createElement('input');\n        this.eInput.className = 'simple-input-editor';\n\n        const eventKey = params.eventKey;\n\n        if (eventKey === KEY_BACKSPACE) {\n            this.eInput.value = '';\n        } else if (this.isCharNumeric(eventKey)) {\n            this.eInput.value = eventKey!;\n        } else {\n            if (params.value !== undefined && params.value !== null) {\n                this.eInput.value = params.value;\n            }\n        }\n\n        this.eInput.addEventListener('keydown', (event) => {\n            if (!event.key || event.key.length !== 1) {\n                return;\n            }\n\n            if (!this.isNumericKey(event)) {\n                this.eInput.focus();\n                if (event.preventDefault) event.preventDefault();\n            } else if (this.isNavigationKey(event) || this.isBackspace(event)) {\n                event.stopPropagation();\n            }\n        });\n\n        // only start edit if key pressed is a number, not a letter\n        const isCharacter = eventKey && eventKey.length === 1;\n        const isNotANumber = isCharacter && '1234567890'.indexOf(eventKey!) < 0;\n        this.cancelBeforeStart = !!isNotANumber;\n    }\n\n    isNumericKey(event: any) {\n        const charStr = event.key;\n        return this.isCharNumeric(charStr);\n    }\n\n    isBackspace(event: any) {\n        return event.key === KEY_BACKSPACE;\n    }\n\n    isNavigationKey(event: any) {\n        return event.key === 'ArrowLeft' || event.key === 'ArrowRight';\n    }\n\n    isCharNumeric(charStr: string | null) {\n        return charStr && !!/^\\d+$/.test(charStr);\n    }\n\n    // gets called once when grid ready to insert the element\n    getGui() {\n        return this.eInput;\n    }\n\n    // focus and select can be done after the gui is attached\n    afterGuiAttached() {\n        this.eInput.focus();\n    }\n\n    // returns the new value after editing\n    isCancelBeforeStart() {\n        return this.cancelBeforeStart;\n    }\n\n    // example - will reject the number if it contains the value 007\n    // - not very practical, but demonstrates the method.\n    isCancelAfterEnd() {\n        const value = this.getValue();\n        return value.indexOf('007') >= 0;\n    }\n\n    // returns the new value after editing\n    getValue() {\n        return this.eInput.value;\n    }\n\n    // any cleanup we need to be done here\n    destroy() {\n        // but this example is simple, no cleanup, we could  even leave this method out as it's optional\n    }\n}\n","main.ts":"import {\n  CellEditingStartedEvent,\n  CellEditingStoppedEvent,\n  CellEditorSelectorResult,\n  ClientSideRowModelModule,\n  ColDef,\n  ColGroupDef,\n  GridApi,\n  GridOptions,\n  ICellEditorParams,\n  ModuleRegistry,\n  NumberEditorModule,\n  RowEditingStartedEvent,\n  RowEditingStoppedEvent,\n  TextEditorModule,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\nimport {\n  ColumnMenuModule,\n  ColumnsToolPanelModule,\n  ContextMenuModule,\n  RichSelectModule,\n} from \"ag-grid-enterprise\";\nimport { IRow, getData } from \"./data\";\nimport { MoodEditor } from \"./moodEditor\";\nimport { NumericCellEditor } from \"./numericCellEditor\";\n\nModuleRegistry.registerModules([\n  NumberEditorModule,\n  TextEditorModule,\n  ClientSideRowModelModule,\n  ColumnsToolPanelModule,\n  ColumnMenuModule,\n  ContextMenuModule,\n  RichSelectModule,\n  ValidationModule /* Development Only */,\n]);\n\nlet gridApi: GridApi<IRow>;\n\nconst gridOptions: GridOptions<IRow> = {\n  columnDefs: [\n    { field: \"type\" },\n    {\n      field: \"value\",\n      editable: true,\n      cellEditorSelector: cellEditorSelector,\n    },\n  ],\n  defaultColDef: {\n    flex: 1,\n    cellDataType: false,\n  },\n  rowData: getData(),\n\n  onRowEditingStarted: onRowEditingStarted,\n  onRowEditingStopped: onRowEditingStopped,\n  onCellEditingStarted: onCellEditingStarted,\n  onCellEditingStopped: onCellEditingStopped,\n};\n\nfunction onRowEditingStarted(event: RowEditingStartedEvent) {\n  console.log(\"never called - not doing row editing\");\n}\n\nfunction onRowEditingStopped(event: RowEditingStoppedEvent) {\n  console.log(\"never called - not doing row editing\");\n}\n\nfunction onCellEditingStarted(event: CellEditingStartedEvent) {\n  console.log(\"cellEditingStarted\");\n}\n\nfunction onCellEditingStopped(event: CellEditingStoppedEvent) {\n  console.log(\"cellEditingStopped\");\n}\n\nfunction cellEditorSelector(\n  params: ICellEditorParams<IRow>,\n): CellEditorSelectorResult | undefined {\n  if (params.data.type === \"age\") {\n    return {\n      component: NumericCellEditor,\n    };\n  }\n\n  if (params.data.type === \"gender\") {\n    return {\n      component: \"agRichSelectCellEditor\",\n      params: {\n        values: [\"Male\", \"Female\"],\n      },\n    };\n  }\n\n  if (params.data.type === \"mood\") {\n    return {\n      component: MoodEditor,\n      popup: true,\n      popupPosition: \"under\",\n    };\n  }\n\n  return undefined;\n}\n\n// setup the grid after the page has finished loading\nconst gridDiv = document.querySelector<HTMLElement>(\"#myGrid\")!;\ngridApi = createGrid(gridDiv, gridOptions);\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {},\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        // map tells the System loader where to look for things\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            // appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap,\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {},\n            app: {\n                main: './main.ts',\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}