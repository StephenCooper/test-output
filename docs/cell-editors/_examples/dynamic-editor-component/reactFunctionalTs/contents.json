{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"index.tsx","mainFileName":"index.tsx","scriptFiles":[],"styleFiles":[],"files":{"styles.css":".mood {\n    border-radius: 15px;\n    border: 1px solid grey;\n    background-color: #e6e6e6;\n    padding: 15px;\n    text-align: center;\n    display: inline-block;\n    outline: none;\n}\n\n.default {\n    border: 1px solid transparent !important;\n    padding: 4px;\n}\n\n.selected {\n    border: 1px solid lightgreen !important;\n    padding: 4px;\n}\n\n.numeric-input {\n    box-sizing: border-box;\n    padding-left: var(--ag-spacing);\n    width: 100%;\n    height: 100%;\n}\n","data.tsx":"export interface IRow {\n  value: string | number;\n  type: \"age\" | \"gender\" | \"mood\";\n}\n\nexport function getData(): IRow[] {\n  return [\n    { value: 14, type: \"age\" },\n    { value: \"Female\", type: \"gender\" },\n    { value: \"Happy\", type: \"mood\" },\n    { value: 21, type: \"age\" },\n    { value: \"Male\", type: \"gender\" },\n    { value: \"Sad\", type: \"mood\" },\n  ];\n}\n","index.tsx":"'use client';\nimport React, { StrictMode, useCallback, useMemo, useState } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport type {\n  CellEditingStartedEvent,\n  CellEditingStoppedEvent,\n  CellEditorSelectorResult,\n  ColDef,\n  ICellEditorParams,\n  RowEditingStartedEvent,\n  RowEditingStoppedEvent,\n} from \"ag-grid-community\";\nimport {\n  ClientSideRowModelModule,\n  ModuleRegistry,\n  NumberEditorModule,\n  TextEditorModule,\n  ValidationModule,\n} from \"ag-grid-community\";\nimport {\n  ColumnMenuModule,\n  ColumnsToolPanelModule,\n  ContextMenuModule,\n  RichSelectModule,\n} from \"ag-grid-enterprise\";\nimport { AgGridReact } from \"ag-grid-react\";\n\nimport type { IRow } from \"./data\";\nimport { getData } from \"./data\";\nimport MoodEditor from \"./moodEditor\";\nimport NumericCellEditor from \"./numericCellEditor\";\nimport \"./styles.css\";\n\nModuleRegistry.registerModules([\n  NumberEditorModule,\n  TextEditorModule,\n  ClientSideRowModelModule,\n  ColumnMenuModule,\n  ContextMenuModule,\n  ColumnsToolPanelModule,\n  RichSelectModule,\n  ValidationModule /* Development Only */,\n]);\n\nconst cellEditorSelector: (\n  params: ICellEditorParams<IRow>,\n) => CellEditorSelectorResult | undefined = (\n  params: ICellEditorParams<IRow>,\n) => {\n  if (params.data.type === \"age\") {\n    return {\n      component: NumericCellEditor,\n    };\n  }\n  if (params.data.type === \"gender\") {\n    return {\n      component: \"agRichSelectCellEditor\",\n      params: {\n        values: [\"Male\", \"Female\"],\n      },\n    };\n  }\n  if (params.data.type === \"mood\") {\n    return {\n      component: MoodEditor,\n      popup: true,\n      popupPosition: \"under\",\n    };\n  }\n  return undefined;\n};\n\nconst GridExample = () => {\n  const containerStyle = useMemo(() => ({ width: \"100%\", height: \"100%\" }), []);\n  const gridStyle = useMemo(() => ({ height: \"100%\", width: \"100%\" }), []);\n  const [rowData, setRowData] = useState<IRow[]>(getData());\n  const [columnDefs, setColumnDefs] = useState<ColDef[]>([\n    { field: \"type\" },\n    {\n      field: \"value\",\n      editable: true,\n      cellEditorSelector: cellEditorSelector,\n    },\n  ]);\n  const defaultColDef = useMemo<ColDef>(() => {\n    return {\n      flex: 1,\n      cellDataType: false,\n    };\n  }, []);\n\n  const onRowEditingStarted = useCallback((event: RowEditingStartedEvent) => {\n    console.log(\"never called - not doing row editing\");\n  }, []);\n\n  const onRowEditingStopped = useCallback((event: RowEditingStoppedEvent) => {\n    console.log(\"never called - not doing row editing\");\n  }, []);\n\n  const onCellEditingStarted = useCallback((event: CellEditingStartedEvent) => {\n    console.log(\"cellEditingStarted\");\n  }, []);\n\n  const onCellEditingStopped = useCallback((event: CellEditingStoppedEvent) => {\n    console.log(\"cellEditingStopped\");\n  }, []);\n\n  return (\n    <div style={containerStyle}>\n      <div style={gridStyle}>\n        <AgGridReact<IRow>\n          rowData={rowData}\n          columnDefs={columnDefs}\n          defaultColDef={defaultColDef}\n          onRowEditingStarted={onRowEditingStarted}\n          onRowEditingStopped={onRowEditingStopped}\n          onCellEditingStarted={onCellEditingStarted}\n          onCellEditingStopped={onCellEditingStopped}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst root = createRoot(document.getElementById(\"root\")!);\nroot.render(\n  <StrictMode>\n    <GridExample />\n  </StrictMode>,\n);\n","moodEditor.tsx":"import React, { memo, useEffect, useRef, useState } from \"react\";\n\nimport type { CustomCellEditorProps } from \"ag-grid-react\";\n\nexport default memo(\n  ({ value, onValueChange, stopEditing }: CustomCellEditorProps) => {\n    const isHappy = (value: string) => value === \"Happy\";\n\n    const [ready, setReady] = useState(false);\n    const refContainer = useRef<HTMLDivElement>(null);\n\n    const checkAndToggleMoodIfLeftRight = (event: any) => {\n      if (ready) {\n        if ([\"ArrowLeft\", \"ArrowRight\"].indexOf(event.key) > -1) {\n          // left and right\n          const isLeft = event.key === \"ArrowLeft\";\n          onValueChange(isLeft ? \"Happy\" : \"Sad\");\n          event.stopPropagation();\n        }\n      }\n    };\n\n    useEffect(() => {\n      refContainer.current?.focus();\n      setReady(true);\n    }, []);\n\n    useEffect(() => {\n      window.addEventListener(\"keydown\", checkAndToggleMoodIfLeftRight);\n\n      return () => {\n        window.removeEventListener(\"keydown\", checkAndToggleMoodIfLeftRight);\n      };\n    }, [checkAndToggleMoodIfLeftRight, ready]);\n\n    const onClick = (happy: boolean) => {\n      onValueChange(happy ? \"Happy\" : \"Sad\");\n      stopEditing();\n    };\n\n    const mood = {\n      borderRadius: 15,\n      border: \"1px solid grey\",\n      backgroundColor: \"#e6e6e6\",\n      padding: 15,\n      textAlign: \"center\" as const,\n      display: \"inline-block\",\n    };\n\n    const unselected = {\n      paddingLeft: 10,\n      paddingRight: 10,\n      border: \"1px solid transparent\",\n      padding: 4,\n    };\n\n    const selected = {\n      paddingLeft: 10,\n      paddingRight: 10,\n      border: \"1px solid lightgreen\",\n      padding: 4,\n    };\n\n    const happyStyle = isHappy(value) ? selected : unselected;\n    const sadStyle = !isHappy(value) ? selected : unselected;\n\n    return (\n      <div\n        ref={refContainer}\n        style={mood}\n        tabIndex={1} // important - without this the key presses wont be caught\n      >\n        <img\n          src=\"https://www.ag-grid.com/example-assets/smileys/happy.png\"\n          onClick={() => onClick(true)}\n          style={happyStyle}\n        />\n        <img\n          src=\"https://www.ag-grid.com/example-assets/smileys/sad.png\"\n          onClick={() => onClick(false)}\n          style={sadStyle}\n        />\n      </div>\n    );\n  },\n);\n","numericCellEditor.tsx":"import React, { memo, useCallback, useEffect, useRef } from \"react\";\n\nimport type { CustomCellEditorProps } from \"ag-grid-react\";\nimport { useGridCellEditor } from \"ag-grid-react\";\n\n// backspace starts the editor on Windows\nconst KEY_BACKSPACE = \"Backspace\";\nconst KEY_F2 = \"F2\";\nconst KEY_ENTER = \"Enter\";\nconst KEY_TAB = \"Tab\";\nconst KEY_ARROW_LEFT = \"ArrowLeft\";\nconst KEY_ARROW_RIGHT = \"ArrowRight\";\n\nexport default memo(\n  ({ value, onValueChange, eventKey, stopEditing }: CustomCellEditorProps) => {\n    const updateValue = (val: string) => {\n      onValueChange(val === \"\" ? null : parseInt(val));\n    };\n\n    useEffect(() => {\n      let startValue;\n      let highlightAllOnFocus = true;\n\n      if (eventKey === KEY_BACKSPACE) {\n        // if backspace or delete pressed, we clear the cell\n        startValue = \"\";\n      } else if (eventKey && eventKey.length === 1) {\n        // if a letter was pressed, we start with the letter\n        startValue = eventKey;\n        highlightAllOnFocus = false;\n      } else {\n        // otherwise we start with the current value\n        startValue = value;\n        if (eventKey === KEY_F2) {\n          highlightAllOnFocus = false;\n        }\n      }\n      if (startValue == null) {\n        startValue = \"\";\n      }\n\n      updateValue(startValue);\n\n      // get ref from React component\n      const eInput = refInput.current!;\n      eInput.focus();\n      if (highlightAllOnFocus) {\n        eInput.select();\n      } else {\n        // when we started editing, we want the caret at the end, not the start.\n        // this comes into play in two scenarios:\n        //   a) when user hits F2\n        //   b) when user hits a printable character\n        const length = eInput.value ? eInput.value.length : 0;\n        if (length > 0) {\n          eInput.setSelectionRange(length, length);\n        }\n      }\n    }, []);\n\n    const refInput = useRef<HTMLInputElement>(null);\n\n    const isLeftOrRight = (event: any) => {\n      return [KEY_ARROW_LEFT, KEY_ARROW_RIGHT].indexOf(event.key) > -1;\n    };\n\n    const isCharNumeric = (charStr: string) => {\n      return !!/^\\d+$/.test(charStr);\n    };\n\n    const isNumericKey = (event: any) => {\n      const charStr = event.key;\n      return isCharNumeric(charStr);\n    };\n\n    const isBackspace = (event: any) => {\n      return event.key === KEY_BACKSPACE;\n    };\n\n    const finishedEditingPressed = (event: any) => {\n      const key = event.key;\n      return key === KEY_ENTER || key === KEY_TAB;\n    };\n\n    const onKeyDown = (event: any) => {\n      if (isLeftOrRight(event) || isBackspace(event)) {\n        event.stopPropagation();\n        return;\n      }\n\n      if (!finishedEditingPressed(event) && !isNumericKey(event)) {\n        if (event.preventDefault) event.preventDefault();\n      }\n\n      if (finishedEditingPressed(event)) {\n        stopEditing();\n      }\n    };\n\n    // Gets called once before editing starts, to give editor a chance to\n    // cancel the editing before it even starts.\n    const isCancelBeforeStart = useCallback(() => {\n      return (\n        !!eventKey &&\n        eventKey.length === 1 &&\n        \"1234567890\".indexOf(eventKey) < 0\n      );\n    }, [eventKey]);\n\n    // Gets called once when editing is finished (eg if Enter is pressed).\n    // If you return true, then the result of the edit will be ignored.\n    const isCancelAfterEnd = useCallback(() => {\n      // will reject the number if it greater than 1,000,000\n      // not very practical, but demonstrates the method.\n      return value != null && value > 1000000;\n    }, [value]);\n\n    useGridCellEditor({\n      isCancelBeforeStart,\n      isCancelAfterEnd,\n    });\n\n    return (\n      <input\n        ref={refInput}\n        value={value}\n        onChange={(event: any) => updateValue(event.target.value)}\n        onKeyDown={(event: any) => onKeyDown(event)}\n        className=\"numeric-input\"\n      />\n    );\n  },\n);\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            jsx: 'react',\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            // react\n            react: 'npm:react@18.2.0',\n            'react-dom': 'npm:react-dom@18.2.0',\n            'react-dom/client': 'npm:react-dom@18.2.0',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            css: {},\n            react: {\n                main: './umd/react.production.min.js',\n            },\n            'react-dom': {\n                main: './umd/react-dom.production.min.js',\n            },\n            'react-dom/server': {\n                main: '../umd/react-dom-server.browser.production.min.js',\n            },\n            app: {\n                main: './index.tsx',\n                defaultExtension: 'tsx',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"react":"18","react-dom":"18","@types/react":"18","@types/react-dom":"18","ag-grid-react":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}