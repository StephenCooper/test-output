{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["data.js","moodEditor.js","moodRenderer.js","main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".mood-renderer {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n}\n\n.mood {\n    border-radius: 5px;\n    border: 1px solid grey;\n    background-color: #e6e6e6;\n    padding: 2px;\n    height: 33px;\n    text-align: center;\n    display: inline-block;\n    outline: none;\n}\n\n.default {\n    width: 22px;\n    border: 1px solid transparent !important;\n    padding: 4px;\n}\n\n.selected {\n    width: 22px;\n    border: 1px solid blue !important;\n    padding: 4px;\n}\n","data.js":"function getData() {\n    const moods = [\n        {\n            mood: 'Happy',\n        },\n        {\n            mood: 'Sad',\n        },\n        {\n            mood: 'Happy',\n        },\n        {\n            mood: 'Happy',\n        },\n    ];\n    return [...moods, ...moods];\n}\n","moodEditor.js":"\nclass MoodEditor  {\n    mood;\n    container;\n    happyImg;\n    sadImg;\n\n    onKeyDown(event) {\n        const key = event.key;\n        if (\n            key === 'ArrowLeft' || // left\n            key === 'ArrowRight'\n        ) {\n            // right\n            this.toggleMood();\n            event.stopPropagation();\n        }\n    }\n\n    toggleMood() {\n        this.selectMood(this.mood === 'Happy' ? 'Sad' : 'Happy');\n    }\n\n    init(params) {\n        this.container = document.createElement('div');\n        this.container.className = 'mood';\n        this.container.tabIndex = '0'; // to allow the div to capture events\n\n        this.happyImg = document.createElement('img');\n        this.happyImg.src = 'https://www.ag-grid.com/example-assets/smileys/happy.png';\n        this.happyImg.className = 'default';\n\n        this.sadImg = document.createElement('img');\n        this.sadImg.src = 'https://www.ag-grid.com/example-assets/smileys/sad.png';\n        this.sadImg.className = 'default';\n\n        this.container.appendChild(this.happyImg);\n        this.container.appendChild(this.sadImg);\n\n        this.happyImg.addEventListener('click', () => {\n            this.selectMood('Happy');\n            params.stopEditing();\n        });\n        this.sadImg.addEventListener('click', () => {\n            this.selectMood('Sad');\n            params.stopEditing();\n        });\n        this.container.addEventListener('keydown', (event) => {\n            this.onKeyDown(event);\n        });\n\n        this.selectMood(params.value);\n    }\n\n    selectMood(mood) {\n        this.mood = mood;\n        this.happyImg.className = mood === 'Happy' ? 'selected' : 'default';\n        this.sadImg.className = mood === 'Sad' ? 'selected' : 'default';\n    }\n\n    // gets called once when grid ready to insert the element\n    getGui() {\n        return this.container;\n    }\n\n    afterGuiAttached() {\n        this.container.focus();\n    }\n\n    getValue() {\n        return this.mood;\n    }\n\n    // any cleanup we need to be done here\n    destroy() {}\n}\n","moodRenderer.js":"\nclass MoodRenderer  {\n    eGui;\n    init(params) {\n        const div = (this.eGui = document.createElement('div'));\n        div.className = 'mood-renderer';\n\n        if (params.value !== '' || params.value !== undefined) {\n            const imgForMood =\n                params.value === 'Happy'\n                    ? 'https://www.ag-grid.com/example-assets/smileys/happy.png'\n                    : 'https://www.ag-grid.com/example-assets/smileys/sad.png';\n            this.eGui.innerHTML = `<img width=\"20px\" src=\"${imgForMood}\" />`;\n        }\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n\n    refresh(params) {\n        return false;\n    }\n}\n","main.js":"const columnDefs = [\n  {\n    field: \"mood\",\n    headerName: \"Inline\",\n    cellRenderer: MoodRenderer,\n    cellEditor: MoodEditor,\n  },\n  {\n    field: \"mood\",\n    headerName: \"Popup Over\",\n    cellRenderer: MoodRenderer,\n    cellEditor: MoodEditor,\n    cellEditorPopup: true,\n  },\n  {\n    field: \"mood\",\n    headerName: \"Popup Under\",\n    cellRenderer: MoodRenderer,\n    cellEditor: MoodEditor,\n    cellEditorPopup: true,\n    cellEditorPopupPosition: \"under\",\n  },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n  columnDefs: columnDefs,\n  rowData: getData(),\n  defaultColDef: {\n    editable: true,\n    flex: 1,\n    minWidth: 100,\n  },\n};\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}