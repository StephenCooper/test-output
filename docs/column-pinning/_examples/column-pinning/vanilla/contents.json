{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n\n.example-header {\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\n    font-size: 13px;\n    margin-bottom: 5px;\n}\n","main.js":"const columnDefs = [\n  {\n    headerName: \"#\",\n    colId: \"rowNum\",\n    valueGetter: \"node.id\",\n    width: 80,\n    pinned: \"left\",\n  },\n  { field: \"athlete\", width: 150, pinned: \"left\" },\n  { field: \"age\", width: 90, pinned: \"left\" },\n  { field: \"country\", width: 150 },\n  { field: \"year\", width: 90 },\n  { field: \"date\", width: 110 },\n  { field: \"sport\", width: 150 },\n  { field: \"gold\", width: 100 },\n  { field: \"silver\", width: 100 },\n  { field: \"bronze\", width: 100 },\n  { field: \"total\", width: 100, pinned: \"right\" },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n  columnDefs: columnDefs,\n  // debug: true,\n};\n\nfunction clearPinned() {\n  gridApi.applyColumnState({ defaultState: { pinned: null } });\n}\n\nfunction resetPinned() {\n  gridApi.applyColumnState({\n    state: [\n      { colId: \"rowNum\", pinned: \"left\" },\n      { colId: \"athlete\", pinned: \"left\" },\n      { colId: \"age\", pinned: \"left\" },\n      { colId: \"total\", pinned: \"right\" },\n    ],\n    defaultState: { pinned: null },\n  });\n}\n\nfunction pinCountry() {\n  gridApi.applyColumnState({\n    state: [{ colId: \"country\", pinned: \"left\" }],\n    defaultState: { pinned: null },\n  });\n}\n\nfunction jumpToCol() {\n  const value = document.getElementById(\"col\").value;\n  if (typeof value !== \"string\" || value === \"\") {\n    return;\n  }\n\n  const index = Number(value);\n  if (typeof index !== \"number\" || isNaN(index)) {\n    return;\n  }\n\n  // it's actually a column the api needs, so look the column up\n  const allColumns = gridApi.getColumns();\n  if (allColumns) {\n    const column = allColumns[index];\n    if (column) {\n      gridApi.ensureColumnVisible(column);\n    }\n  }\n}\n\nfunction jumpToRow() {\n  const value = document.getElementById(\"row\").value;\n  const index = Number(value);\n  if (typeof index === \"number\" && !isNaN(index)) {\n    gridApi.ensureIndexVisible(index);\n  }\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then((data) => gridApi.setGridOption(\"rowData\", data));\n});\n","index.html":"<div class=\"example-wrapper\">\n    <div class=\"example-header\">\n        <div style=\"padding: 4px\">\n            <button onclick=\"clearPinned()\">Clear Pinned</button>\n            <button onclick=\"resetPinned()\">Left = #, Athlete, Age; Right = Total</button>\n            <button onclick=\"pinCountry()\">Left = Country</button>\n        </div>\n\n        <div style=\"padding: 4px\">\n            Jump to:\n            <input placeholder=\"row\" type=\"text\" style=\"width: 40px\" id=\"row\" oninput=\"jumpToRow()\" />\n            <input placeholder=\"col\" type=\"text\" style=\"width: 40px\" id=\"col\" oninput=\"jumpToCol()\" />\n        </div>\n    </div>\n    <div id=\"myGrid\"></div>\n</div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}