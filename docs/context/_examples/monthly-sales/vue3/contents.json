{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"main.ts","scriptFiles":[],"styleFiles":[],"files":{"styles.css":".ag-basic .ag-cell {\n    padding-top: 2px !important;\n    padding-bottom: 2px !important;\n}\n\nlabel {\n    font-weight: normal !important;\n}\n\n.cell-act {\n    background: rgba(255, 0, 0, 0.1);\n}\n\n.cell-bud {\n    background: rgba(0, 255, 0, 0.1);\n}\n\n.legend-box {\n    display: inline-block;\n    border: 1px solid black;\n    width: 12px;\n    height: 12px;\n}\n\n.cell-figure {\n    text-align: right;\n}\n\n.test-grid {\n    flex-grow: 1;\n}\n\n.test-container {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\n    font-size: 14px;\n}\n\n.test-container button {\n    font-size: 14px;\n    line-height: 20px;\n}\n\n.test-header {\n    margin-left: 20px;\n}\n","main.ts":"import {\n  createApp,\n  defineComponent,\n  onBeforeMount,\n  ref,\n  shallowRef,\n} from \"vue\";\n\nimport type {\n  ColDef,\n  ColGroupDef,\n  GridApi,\n  GridReadyEvent,\n  ICellRendererParams,\n  RowSelectionOptions,\n} from \"ag-grid-community\";\nimport {\n  CellStyleModule,\n  ClientSideRowModelApiModule,\n  ClientSideRowModelModule,\n  ModuleRegistry,\n  QuickFilterModule,\n  RenderApiModule,\n  RowSelectionModule,\n  ValidationModule,\n} from \"ag-grid-community\";\nimport {\n  FiltersToolPanelModule,\n  RowGroupingModule,\n  SetFilterModule,\n} from \"ag-grid-enterprise\";\nimport { AgGridVue } from \"ag-grid-vue3\";\n\nimport \"./styles.css\";\n\nModuleRegistry.registerModules([\n  ClientSideRowModelApiModule,\n  RenderApiModule,\n  RowSelectionModule,\n  CellStyleModule,\n  ClientSideRowModelModule,\n  QuickFilterModule,\n  RowGroupingModule,\n  SetFilterModule,\n  FiltersToolPanelModule,\n  ValidationModule /* Development Only */,\n]);\n\nconst VueExample = defineComponent({\n  template: `\n        <div style=\"height: 100%\">\n            <div class=\"test-container\">\n                <div class=\"test-header\">\n                    <input type=\"text\" id=\"filter-text-box\" style=\"width: 100px;\" v-on:input=\"onQuickFilterChanged()\" placeholder=\"Filter...\">\n                    <span style=\"padding-left: 20px;\">\n                        <b>Period:</b>\n                        <button v-on:click=\"onChangeMonth(-1)\"><i class=\"fa fa-chevron-left\"></i></button>\n                        <button v-on:click=\"onChangeMonth(1)\"><i class=\"fa fa-chevron-right\"></i></button>\n                        <span id=\"monthName\" style=\"width: 100px; display: inline-block;\">Year to Jan</span>\n                    </span>\n                    <span style=\"padding-left: 20px;\">\n                        <b>Legend:</b>&nbsp;&nbsp;\n                        <div class=\"cell-bud legend-box\"></div> Actual&nbsp;&nbsp;\n                        <div class=\"cell-act legend-box\"></div> Budget\n                    </span>\n                </div>\n                <ag-grid-vue\n                \n                style=\"width: 100%; height: 100%;\"\n                :columnDefs=\"columnDefs\"\n                :suppressMovableColumns=\"true\"\n                @grid-ready=\"onGridReady\"\n                :context=\"context\"\n                :defaultColDef=\"defaultColDef\"\n                :autoGroupColumnDef=\"autoGroupColumnDef\"\n                :rowSelection=\"rowSelection\"\n                :rowData=\"rowData\"></ag-grid-vue></div>\n        </div>\n    `,\n  components: {\n    \"ag-grid-vue\": AgGridVue,\n  },\n  setup(props) {\n    const columnDefs = ref<(ColDef | ColGroupDef)[]>([\n      { field: \"country\", rowGroup: true, hide: true },\n      {\n        headerName: \"Monthly Data\",\n        children: [\n          {\n            field: \"jan\",\n            cellRenderer: accountingCellRenderer,\n            cellClass: \"cell-figure\",\n            valueGetter: monthValueGetter,\n            cellClassRules: monthCellClassRules,\n            aggFunc: \"sum\",\n          },\n          {\n            field: \"feb\",\n            cellRenderer: accountingCellRenderer,\n            cellClass: \"cell-figure\",\n            valueGetter: monthValueGetter,\n            cellClassRules: monthCellClassRules,\n            aggFunc: \"sum\",\n          },\n          {\n            field: \"mar\",\n            cellRenderer: accountingCellRenderer,\n            cellClass: \"cell-figure\",\n            valueGetter: monthValueGetter,\n            cellClassRules: monthCellClassRules,\n            aggFunc: \"sum\",\n          },\n          {\n            field: \"apr\",\n            cellRenderer: accountingCellRenderer,\n            cellClass: \"cell-figure\",\n            valueGetter: monthValueGetter,\n            cellClassRules: monthCellClassRules,\n            aggFunc: \"sum\",\n          },\n          {\n            field: \"may\",\n            cellRenderer: accountingCellRenderer,\n            cellClass: \"cell-figure\",\n            valueGetter: monthValueGetter,\n            cellClassRules: monthCellClassRules,\n            aggFunc: \"sum\",\n          },\n          {\n            field: \"jun\",\n            cellRenderer: accountingCellRenderer,\n            cellClass: \"cell-figure\",\n            valueGetter: monthValueGetter,\n            cellClassRules: monthCellClassRules,\n            aggFunc: \"sum\",\n          },\n          {\n            headerName: \"YTD\",\n            cellClass: \"cell-figure\",\n            cellRenderer: accountingCellRenderer,\n            valueGetter: yearToDateValueGetter,\n            aggFunc: \"sum\",\n          },\n        ],\n      },\n    ]);\n    const gridApi = shallowRef<GridApi | null>(null);\n    const defaultColDef = ref<ColDef>({\n      flex: 1,\n      minWidth: 120,\n    });\n    const context = ref(null);\n    const autoGroupColumnDef = ref<ColDef>(null);\n    const rowData = ref<any[]>(null);\n    const rowSelection = ref<RowSelectionOptions>(null);\n\n    onBeforeMount(() => {\n      context.value = {\n        month: 0,\n        months: [\n          \"jan\",\n          \"feb\",\n          \"mar\",\n          \"apr\",\n          \"may\",\n          \"jun\",\n          \"jul\",\n          \"aug\",\n          \"sep\",\n          \"oct\",\n          \"nov\",\n          \"dec\",\n        ],\n      };\n      autoGroupColumnDef.value = {\n        headerName: \"Location\",\n        field: \"city\",\n        minWidth: 260,\n        cellRenderer: \"agGroupCellRenderer\",\n      };\n      rowSelection.value = {\n        mode: \"multiRow\",\n        headerCheckbox: false,\n        groupSelects: \"descendants\",\n      };\n    });\n\n    const onChangeMonth = (i) => {\n      var newMonth = (context.value.month += i);\n      if (newMonth < -1) {\n        newMonth = -1;\n      }\n      if (newMonth > 5) {\n        newMonth = 5;\n      }\n      // Mutate the context object in place\n      context.value.month = newMonth;\n      document.querySelector(\"#monthName\").textContent =\n        monthNames[newMonth + 1];\n      gridApi.value.refreshClientSideRowModel(\"aggregate\");\n      gridApi.value.refreshCells();\n    };\n    const onQuickFilterChanged = () => {\n      gridApi.value.setGridOption(\n        \"quickFilterText\",\n        document.getElementById(\"filter-text-box\").value,\n      );\n    };\n    const onGridReady = (params: GridReadyEvent) => {\n      gridApi.value = params.api;\n\n      const updateData = (data) => {\n        rowData.value = data;\n      };\n\n      fetch(\"https://www.ag-grid.com/example-assets/monthly-sales.json\")\n        .then((resp) => resp.json())\n        .then((data) => updateData(data));\n    };\n\n    return {\n      columnDefs,\n      gridApi,\n      context,\n      defaultColDef,\n      autoGroupColumnDef,\n      rowSelection,\n      rowData,\n      onGridReady,\n      onChangeMonth,\n      onQuickFilterChanged,\n    };\n  },\n});\n\nvar monthValueGetter =\n  '(ctx.month < ctx.months.indexOf(colDef.field)) ? data[colDef.field + \"_bud\"] : data[colDef.field + \"_act\"]';\n\nvar monthCellClassRules = {\n  \"cell-act\": \"ctx.month < ctx.months.indexOf(colDef.field)\",\n  \"cell-bud\": \"ctx.month >= ctx.months.indexOf(colDef.field)\",\n  \"cell-negative\": \"x < 0\",\n};\n\nvar yearToDateValueGetter =\n  'var total = 0; ctx.months.forEach( function(monthName, monthIndex) { if (monthIndex<=ctx.month) { total += data[monthName + \"_act\"]; } }); return total; ';\n\nvar accountingCellRenderer = function (params: ICellRendererParams) {\n  if (params.value == null) {\n    return \"\";\n  } else if (params.value >= 0) {\n    return params.value.toLocaleString();\n  } else {\n    return \"(\" + Math.abs(params.value).toLocaleString() + \")\";\n  }\n};\n\nvar monthNames = [\n  \"Budget Only\",\n  \"Year to Jan\",\n  \"Year to Feb\",\n  \"Year to Mar\",\n  \"Year to Apr\",\n  \"Year to May\",\n  \"Year to Jun\",\n  \"Year to Jul\",\n  \"Year to Aug\",\n  \"Year to Sep\",\n  \"Year to Oct\",\n  \"Year to Nov\",\n  \"Full Year\",\n];\n\ncreateApp(VueExample).mount(\"#app\");\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        defaultExtension: 'js',\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            vue: 'npm:vue@3.5.0/dist/vue.esm-browser.js',\n            '@vue/reactivity': 'npm:@vue/reactivity@3.0.0/dist/reactivity.esm-browser.prod.js',\n\n            // vue class component\n            'vue-class-component': 'npm:vue-class-component@^8.0.0-beta.3/dist/vue-class-component.cjs.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            'css.js': {\n                defaultExtension: 'js',\n            },\n            vue: {\n                defaultExtension: 'js',\n            },\n            app: {\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-vue3': {\n                main: './dist/main.umd.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"vue":"^3.5.0","ag-grid-vue3":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}},"extras":["fontawesome"]}