{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":[],"files":{"main.js":"const gbpFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"GBP\",\n  minimumFractionDigits: 2,\n});\nconst eurFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"EUR\",\n  minimumFractionDigits: 2,\n});\nconst usdFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  minimumFractionDigits: 2,\n});\n\nconst currencyCellRenderer = (params) => {\n  switch (params.value.currency) {\n    case \"EUR\":\n      return eurFormatter.format(params.value.amount);\n    case \"USD\":\n      return usdFormatter.format(params.value.amount);\n    case \"GBP\":\n      return gbpFormatter.format(params.value.amount);\n  }\n  return params.value.amount;\n};\n\nconst columnDefs = [\n  { field: \"product\" },\n  { headerName: \"Currency\", field: \"price.currency\" },\n  {\n    headerName: \"Price Local\",\n    field: \"price\",\n    cellRenderer: currencyCellRenderer,\n    cellDataType: false,\n  },\n  {\n    headerName: \"Report Price\",\n    field: \"price\",\n    cellRenderer: currencyCellRenderer,\n    valueGetter: reportingCurrencyValueGetter,\n    headerValueGetter: \"ctx.reportingCurrency\",\n  },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n  columnDefs: columnDefs,\n  defaultColDef: {\n    flex: 1,\n    enableCellChangeFlash: true,\n  },\n  rowData: getData(),\n  context: {\n    reportingCurrency: \"EUR\",\n  },\n};\n\nfunction reportingCurrencyValueGetter(params) {\n  // Rates taken from google at time of writing\n  const exchangeRates = {\n    EUR: {\n      GBP: 0.72,\n      USD: 1.08,\n    },\n    GBP: {\n      EUR: 1.29,\n      USD: 1.5,\n    },\n    USD: {\n      GBP: 0.67,\n      EUR: 0.93,\n    },\n  };\n\n  const price = params.data[params.colDef.field];\n  const reportingCurrency = params.context.reportingCurrency;\n  const fxRateSet = exchangeRates[reportingCurrency];\n  const fxRate = fxRateSet[price.currency];\n  let priceInReportingCurrency;\n  if (fxRate) {\n    priceInReportingCurrency = price.amount * fxRate;\n  } else {\n    priceInReportingCurrency = price.amount;\n  }\n\n  const result = {\n    currency: reportingCurrency,\n    amount: priceInReportingCurrency,\n  };\n\n  return result;\n}\n\nfunction currencyChanged() {\n  const value = document.getElementById(\"currency\").value;\n  gridApi.setGridOption(\"context\", { reportingCurrency: value });\n  gridApi.refreshCells();\n  gridApi.refreshHeader();\n}\n\nfunction getData() {\n  return [\n    { product: \"Product 1\", price: { currency: \"EUR\", amount: 644 } },\n    { product: \"Product 2\", price: { currency: \"EUR\", amount: 354 } },\n    { product: \"Product 3\", price: { currency: \"GBP\", amount: 429 } },\n    { product: \"Product 4\", price: { currency: \"GBP\", amount: 143 } },\n    { product: \"Product 5\", price: { currency: \"USD\", amount: 345 } },\n    { product: \"Product 6\", price: { currency: \"USD\", amount: 982 } },\n  ];\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n});\n","index.html":"<div style=\"height: 10%\">\n    <select id=\"currency\" onchange=\"currencyChanged()\">\n        <option value=\"EUR\">EUR</option>\n        <option value=\"GBP\">GBP</option>\n        <option value=\"USD\">USD</option>\n    </select>\n</div>\n<div style=\"height: 90%\" id=\"myGrid\"></div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}