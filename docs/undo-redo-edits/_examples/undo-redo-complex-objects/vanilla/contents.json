{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n\n.button-group {\n    padding-bottom: 4px;\n    display: inline-block;\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\n    font-size: 13px;\n}\n\n.undo-redo-input {\n    width: 20px;\n}\n\n.undo-btn {\n    margin-left: 20px;\n}\n\n.redo-btn {\n    margin-left: 5px;\n}\n","main.js":"let gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    {\n      field: \"a\",\n      valueFormatter: valueFormatterA,\n      valueGetter: valueGetterA,\n      valueParser: valueParserA,\n      valueSetter: valueSetterA,\n      equals: equalsA,\n      cellDataType: \"object\",\n    },\n    {\n      field: \"b\",\n      valueFormatter: valueFormatterB,\n      valueParser: valueParserB,\n      cellDataType: \"object\",\n    },\n  ],\n  defaultColDef: {\n    editable: true,\n    enableCellChangeFlash: true,\n  },\n  rowData: getRows(),\n  cellSelection: {\n    handle: {\n      mode: \"fill\",\n    },\n  },\n  undoRedoCellEditing: true,\n  undoRedoCellEditingLimit: 5,\n  onFirstDataRendered: onFirstDataRendered,\n  onCellValueChanged: onCellValueChanged,\n};\n\nfunction createValueA(value, data) {\n  return value == null\n    ? null\n    : {\n        actualValueA: value,\n        anotherPropertyA: data.anotherPropertyA,\n      };\n}\n\nfunction valueFormatterA(params) {\n  // Convert complex object to string\n  return params.value ? params.value.actualValueA : \"\";\n}\n\nfunction valueGetterA(params) {\n  // Create complex object from underlying data\n  return createValueA(params.data[params.colDef.field], params.data);\n}\n\nfunction valueParserA(params) {\n  // Convert string `newValue` back into complex object (reverse of `valueFormatterA`). `newValue` is string.\n  // We have access to `data` (as well as `oldValue`) to retrieve any other properties we need to recreate the complex object.\n  // For undo/redo to work, we need immutable data, so can't mutate `oldValue`\n  return createValueA(params.newValue, params.data);\n}\n\nfunction valueSetterA(params) {\n  // Update data from complex object (reverse of `valueGetterA`)\n  params.data[params.colDef.field] = params.newValue\n    ? params.newValue.actualValueA\n    : null;\n  return true;\n}\n\nfunction equalsA(valueA, valueB) {\n  // Used to detect whether cell value has changed for refreshing. Needed as `valueGetter` returns different references.\n  return (\n    (valueA == null && valueB == null) ||\n    (valueA != null &&\n      valueB != null &&\n      valueA.actualValueA === valueB.actualValueA)\n  );\n}\n\nfunction createValueB(value, data) {\n  return value == null\n    ? null\n    : {\n        actualValueB: value,\n        anotherPropertyB: data.anotherPropertyB,\n      };\n}\n\nfunction valueFormatterB(params) {\n  // Convert complex object to string\n  return params.value ? params.value.actualValueB : \"\";\n}\n\nfunction valueParserB(params) {\n  // Convert string `newValue` back into complex object (reverse of `valueFormatterB`). `newValue` is string\n  return createValueB(params.newValue, params.data);\n}\n\nfunction undo() {\n  gridApi.undoCellEditing();\n}\n\nfunction redo() {\n  gridApi.redoCellEditing();\n}\n\nfunction onFirstDataRendered() {\n  setValue(\"#undoInput\", 0);\n  disable(\"#undoInput\", true);\n  disable(\"#undoBtn\", true);\n\n  setValue(\"#redoInput\", 0);\n  disable(\"#redoInput\", true);\n  disable(\"#redoBtn\", true);\n}\n\nfunction onCellValueChanged(params) {\n  const undoSize = params.api.getCurrentUndoSize();\n  setValue(\"#undoInput\", undoSize);\n  disable(\"#undoBtn\", undoSize < 1);\n\n  const redoSize = params.api.getCurrentRedoSize();\n  setValue(\"#redoInput\", redoSize);\n  disable(\"#redoBtn\", redoSize < 1);\n}\n\nfunction disable(id, disabled) {\n  document.querySelector(id).disabled = disabled;\n}\n\nfunction setValue(id, value) {\n  document.querySelector(id).value = value;\n}\n\nfunction getRows() {\n  return Array.apply(null, Array(100)).map(function (_, i) {\n    return {\n      a: \"a-\" + i,\n      b: {\n        actualValueB: \"b-\" + i,\n        anotherPropertyB: \"b\",\n      },\n      anotherPropertyA: \"a\",\n    };\n  });\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n});\n","index.html":"<div class=\"example-wrapper\">\n    <div>\n        <span class=\"button-group\">\n            <label>Available Undo's</label>\n            <input id=\"undoInput\" class=\"undo-redo-input\" />\n            <label>Available Redo's</label>\n            <input id=\"redoInput\" class=\"undo-redo-input\" />\n            <button id=\"undoBtn\" class=\"undo-btn\" onclick=\"undo()\">Undo</button>\n            <button id=\"redoBtn\" class=\"redo-btn\" onclick=\"redo()\">Redo</button>\n        </span>\n    </div>\n    <div id=\"myGrid\"></div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}