{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".test-container {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\n.test-header {\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\n    font-size: 13px;\n    margin-bottom: 0.5rem;\n}\n\n.test-header .example-section {\n    margin-bottom: 0.5rem;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n}\n","main.js":"const columnDefs = [\n  { field: \"athlete\" },\n  { field: \"age\" },\n  { field: \"country\" },\n  { field: \"sport\" },\n  { field: \"year\" },\n  { field: \"date\" },\n  { field: \"gold\" },\n  { field: \"silver\" },\n  { field: \"bronze\" },\n  { field: \"total\" },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n  defaultColDef: {\n    width: 100,\n    enableRowGroup: true,\n    enablePivot: true,\n    enableValue: true,\n  },\n  autoGroupColumnDef: {\n    minWidth: 200,\n  },\n  sideBar: {\n    toolPanels: [\"columns\"],\n  },\n  rowGroupPanelShow: \"always\",\n  pivotPanelShow: \"always\",\n  // debug: true,\n  columnDefs: columnDefs,\n};\n\nfunction onBtSaveSortState() {\n  const allState = gridApi.getColumnState();\n  const sortState = allState.map((state) => ({\n    colId: state.colId,\n    sort: state.sort,\n    sortIndex: state.sortIndex,\n  }));\n  window.sortState = sortState;\n  console.log(\"sort state saved\", sortState);\n}\n\nfunction onBtRestoreSortState() {\n  if (!window.sortState) {\n    console.log(\"no sort state to restore, you must save sort state first\");\n    return;\n  }\n  gridApi.applyColumnState({\n    state: window.sortState,\n  });\n  console.log(\"sort state restored\");\n}\n\nfunction onBtSaveOrderAndVisibilityState() {\n  const allState = gridApi.getColumnState();\n  const orderAndVisibilityState = allState.map((state) => ({\n    colId: state.colId,\n    hide: state.hide,\n  }));\n  window.orderAndVisibilityState = orderAndVisibilityState;\n  console.log(\"order and visibility state saved\", orderAndVisibilityState);\n}\n\nfunction onBtRestoreOrderAndVisibilityState() {\n  if (!window.orderAndVisibilityState) {\n    console.log(\n      \"no order and visibility state to restore by, you must save order and visibility state first\",\n    );\n    return;\n  }\n  gridApi.applyColumnState({\n    state: window.orderAndVisibilityState,\n    applyOrder: true,\n  });\n  console.log(\"column state restored\");\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then((data) => gridApi.setGridOption(\"rowData\", data));\n});\n","index.html":"<div class=\"test-container\">\n    <div class=\"test-header\">\n        <div class=\"example-section\">\n            <button onclick=\"onBtSaveSortState()\">Save Sort</button>\n            <button onclick=\"onBtRestoreSortState()\">Restore Sort</button>\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n            <button onclick=\"onBtSaveOrderAndVisibilityState()\">Save Order & Visibility</button>\n            <button onclick=\"onBtRestoreOrderAndVisibilityState()\">Restore Order & Visibility</button>\n        </div>\n    </div>\n    <div id=\"myGrid\"></div>\n</div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}