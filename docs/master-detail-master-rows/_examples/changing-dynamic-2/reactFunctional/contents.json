{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"index.jsx","mainFileName":"index.jsx","styleFiles":[],"files":{"style.css":".calls-cell-renderer button {\n    margin: 2px;\n}\n","callsCellRenderer.jsx":"import React from 'react';\nexport default (props) => {\n    const onAdd = () => {\n        const oldData = props.node.data;\n        const oldCallRecords = oldData.callRecords;\n        const newCallRecords = oldCallRecords.slice(0); // make a copy\n        newCallRecords.push({\n            name: ['Bob', 'Paul', 'David', 'John'][Math.floor(Math.random() * 4)],\n            callId: Math.floor(Math.random() * 1000),\n            duration: Math.floor(Math.random() * 100) + 1,\n            switchCode: 'SW5',\n            direction: 'Out',\n            number: '(02) ' + Math.floor(Math.random() * 1000000),\n        }); // add one item\n        let minutes = 0;\n        newCallRecords.forEach((r) => (minutes += r.duration));\n        const newData = {\n            name: oldData.name,\n            account: oldData.account,\n            calls: newCallRecords.length,\n            minutes: minutes,\n            callRecords: newCallRecords,\n        };\n        props.api.applyTransaction({ update: [newData] });\n        props.node.setExpanded(true);\n    };\n    const onRemove = () => {\n        const oldData = props.node.data;\n        const oldCallRecords = oldData.callRecords;\n        if (oldCallRecords.length == 0) {\n            return;\n        }\n        const newCallRecords = oldCallRecords.slice(0); // make a copy\n        newCallRecords.pop(); // remove one item\n        let minutes = 0;\n        newCallRecords.forEach((r) => (minutes += r.duration));\n        const newData = {\n            name: oldData.name,\n            account: oldData.account,\n            calls: newCallRecords.length,\n            minutes: minutes,\n            callRecords: newCallRecords,\n        };\n        props.api.applyTransaction({ update: [newData] });\n    };\n    return (<div className=\"calls-cell-renderer\">\n            <button onClick={onAdd}>+</button>\n            <button onClick={onRemove}>-</button>\n            <span>{props.value}</span>\n        </div>);\n};\n","index.jsx":"\"use client\";\n\nimport React, {\n  useCallback,\n  useMemo,\n  useRef,\n  useState,\n  StrictMode,\n} from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"./style.css\";\nimport CallsCellRenderer from \"./callsCellRenderer.jsx\";\nimport {\n  ClientSideRowModelApiModule,\n  ClientSideRowModelModule,\n  ModuleRegistry,\n  RowApiModule,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\nimport {\n  ColumnMenuModule,\n  ColumnsToolPanelModule,\n  ContextMenuModule,\n  MasterDetailModule,\n} from \"ag-grid-enterprise\";\nModuleRegistry.registerModules([\n  RowApiModule,\n  ClientSideRowModelModule,\n  ClientSideRowModelApiModule,\n  ColumnsToolPanelModule,\n  MasterDetailModule,\n  ColumnMenuModule,\n  ContextMenuModule,\n  ValidationModule /* Development Only */,\n]);\n\nconst GridExample = () => {\n  const containerStyle = useMemo(() => ({ width: \"100%\", height: \"100%\" }), []);\n  const gridStyle = useMemo(() => ({ height: \"100%\", width: \"100%\" }), []);\n  const [rowData, setRowData] = useState();\n  const isRowMaster = useCallback((dataItem) => {\n    return dataItem ? dataItem.callRecords.length > 0 : false;\n  }, []);\n  const [columnDefs, setColumnDefs] = useState([\n    // group cell renderer needed for expand / collapse icons\n    { field: \"name\", cellRenderer: \"agGroupCellRenderer\" },\n    { field: \"account\" },\n    { field: \"calls\", cellRenderer: CallsCellRenderer },\n    { field: \"minutes\", valueFormatter: \"x.toLocaleString() + 'm'\" },\n  ]);\n  const defaultColDef = useMemo(() => {\n    return {\n      flex: 1,\n    };\n  }, []);\n  const getRowId = useCallback((params) => String(params.data.account), []);\n  const detailCellRendererParams = useMemo(() => {\n    return {\n      detailGridOptions: {\n        columnDefs: [\n          { field: \"callId\" },\n          { field: \"direction\" },\n          { field: \"number\", minWidth: 150 },\n          { field: \"duration\", valueFormatter: \"x.toLocaleString() + 's'\" },\n          { field: \"switchCode\", minWidth: 150 },\n        ],\n        defaultColDef: {\n          flex: 1,\n        },\n      },\n      getDetailRowData: (params) => {\n        params.successCallback(params.data.callRecords);\n      },\n    };\n  }, []);\n\n  const onGridReady = useCallback((params) => {\n    fetch(\n      \"https://www.ag-grid.com/example-assets/master-detail-dynamic-data.json\",\n    )\n      .then((resp) => resp.json())\n      .then((data) => {\n        setRowData(data);\n      });\n  }, []);\n\n  const onFirstDataRendered = useCallback((params) => {\n    // arbitrarily expand a row for presentational purposes\n    setTimeout(() => {\n      params.api.getDisplayedRowAtIndex(1).setExpanded(true);\n    }, 0);\n  }, []);\n\n  return (\n    <div style={containerStyle}>\n      <div style={gridStyle}>\n        <AgGridReact\n          rowData={rowData}\n          masterDetail={true}\n          isRowMaster={isRowMaster}\n          columnDefs={columnDefs}\n          defaultColDef={defaultColDef}\n          getRowId={getRowId}\n          detailCellRendererParams={detailCellRendererParams}\n          onGridReady={onGridReady}\n          onFirstDataRendered={onFirstDataRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst root = createRoot(document.getElementById(\"root\"));\nroot.render(\n  <StrictMode>\n    <GridExample />\n  </StrictMode>,\n);\nwindow.tearDownExample = () => root.unmount();\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            jsx: 'react',\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            // react\n            react: 'npm:react@18.2.0',\n            'react-dom': 'npm:react-dom@18.2.0',\n            'react-dom/client': 'npm:react-dom@18.2.0',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            css: {},\n            react: {\n                main: './umd/react.production.min.js',\n            },\n            'react-dom': {\n                main: './umd/react-dom.production.min.js',\n            },\n            'react-dom/server': {\n                main: '../umd/react-dom-server.browser.production.min.js',\n            },\n            app: {\n                main: './index.jsx',\n                defaultExtension: 'jsx',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"react":"18","react-dom":"18","@types/react":"18","@types/react-dom":"18","ag-grid-react":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}