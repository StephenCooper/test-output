{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["callsCellRenderer.js","main.js"],"styleFiles":["style.css"],"files":{"style.css":".calls-cell-renderer button {\n    margin: 2px;\n}\n","callsCellRenderer.js":"\nclass CallsCellRenderer  {\n    eGui;\n    eValue;\n\n    init(params) {\n        const eTemp = document.createElement('div');\n        eTemp.innerHTML =\n            '<span class=\"calls-cell-renderer\">' +\n            '<button data-ref=\"btAdd\">+</button>' +\n            '<button data-ref=\"btRemove\">-</button>' +\n            '<span data-ref=\"eValue\"></span>' +\n            '</span>';\n\n        this.eGui = eTemp.firstChild ;\n\n        this.eValue = this.eGui.querySelector('[data-ref=\"eValue\"]');\n        const btAdd = this.eGui.querySelector('[data-ref=\"btAdd\"]');\n        const btRemove = this.eGui.querySelector('[data-ref=\"btRemove\"]');\n\n        btAdd.addEventListener('click', this.onBtAdd.bind(this, params));\n        btRemove.addEventListener('click', this.onBtRemove.bind(this, params));\n\n        this.refresh(params);\n    }\n\n    onBtRemove(params) {\n        const oldData = params.node.data;\n\n        const oldCallRecords = oldData.callRecords;\n\n        if (oldCallRecords.length == 0) {\n            return;\n        }\n\n        const newCallRecords = oldCallRecords.slice(0); // make a copy\n        newCallRecords.pop(); // remove one item\n\n        let minutes = 0;\n        newCallRecords.forEach(function (r) {\n            minutes += r.duration;\n        });\n\n        const newData = {\n            name: oldData.name,\n            account: oldData.account,\n            calls: newCallRecords.length,\n            minutes: minutes,\n            callRecords: newCallRecords,\n        };\n\n        params.api.applyTransaction({ update: [newData] });\n    }\n\n    onBtAdd(params) {\n        const oldData = params.node.data;\n\n        const oldCallRecords = oldData.callRecords;\n\n        const newCallRecords = oldCallRecords.slice(0); // make a copy\n        newCallRecords.push({\n            name: ['Bob', 'Paul', 'David', 'John'][Math.floor(Math.random() * 4)],\n            callId: Math.floor(Math.random() * 1000),\n            duration: Math.floor(Math.random() * 100) + 1,\n            switchCode: 'SW5',\n            direction: 'Out',\n            number: '(02) ' + Math.floor(Math.random() * 1000000),\n        }); // add one item\n\n        let minutes = 0;\n        newCallRecords.forEach(function (r) {\n            minutes += r.duration;\n        });\n\n        const newData = {\n            name: oldData.name,\n            account: oldData.account,\n            calls: newCallRecords.length,\n            minutes: minutes,\n            callRecords: newCallRecords,\n        };\n\n        params.api.applyTransaction({ update: [newData] });\n\n        params.node.setExpanded(true);\n    }\n\n    refresh(params) {\n        this.eValue.innerHTML = params.value;\n        return true;\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n}\n","main.js":"let gridApi;\n\nconst gridOptions = {\n  masterDetail: true,\n  isRowMaster: (dataItem) => {\n    return dataItem ? dataItem.callRecords.length > 0 : false;\n  },\n  columnDefs: [\n    // group cell renderer needed for expand / collapse icons\n    { field: \"name\", cellRenderer: \"agGroupCellRenderer\" },\n    { field: \"account\" },\n    { field: \"calls\", cellRenderer: CallsCellRenderer },\n    { field: \"minutes\", valueFormatter: \"x.toLocaleString() + 'm'\" },\n  ],\n  defaultColDef: {\n    flex: 1,\n  },\n  getRowId: (params) => String(params.data.account),\n  detailCellRendererParams: {\n    detailGridOptions: {\n      columnDefs: [\n        { field: \"callId\" },\n        { field: \"direction\" },\n        { field: \"number\", minWidth: 150 },\n        { field: \"duration\", valueFormatter: \"x.toLocaleString() + 's'\" },\n        { field: \"switchCode\", minWidth: 150 },\n      ],\n      defaultColDef: {\n        flex: 1,\n      },\n    },\n    getDetailRowData: (params) => {\n      params.successCallback(params.data.callRecords);\n    },\n  },\n  onFirstDataRendered: onFirstDataRendered,\n};\n\nfunction onFirstDataRendered(params) {\n  // arbitrarily expand a row for presentational purposes\n  setTimeout(() => {\n    params.api.getDisplayedRowAtIndex(1).setExpanded(true);\n  }, 0);\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\n    \"https://www.ag-grid.com/example-assets/master-detail-dynamic-data.json\",\n  )\n    .then((response) => response.json())\n    .then(function (data) {\n      gridApi.setGridOption(\"rowData\", data);\n    });\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}