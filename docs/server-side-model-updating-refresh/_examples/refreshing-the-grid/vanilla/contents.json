{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["fakeServer.js","main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n","fakeServer.js":"// This fake server uses http://alasql.org/ to mimic how a real server\n// might generate sql queries from the Server-Side Row Model request.\n// To keep things simple it does the bare minimum to support the example.\nfunction FakeServer(allData) {\n    alasql.options.cache = false;\n\n    return {\n        getData: function (request) {\n            const results = executeQuery(request);\n\n            return {\n                success: true,\n                rows: results,\n                lastRow: getLastRowIndex(request),\n            };\n        },\n    };\n\n    function executeQuery(request) {\n        const sql = buildSql(request);\n\n        console.log('[FakeServer] - about to execute query:', sql);\n\n        return alasql(sql, [allData]);\n    }\n\n    function buildSql(request) {\n        return (\n            selectSql(request) +\n            ' FROM ?' +\n            whereSql(request) +\n            groupBySql(request) +\n            orderBySql(request) +\n            limitSql(request)\n        );\n    }\n\n    function selectSql(request) {\n        const rowGroupCols = request.rowGroupCols;\n        const valueCols = request.valueCols;\n        const groupKeys = request.groupKeys;\n\n        if (isDoingGrouping(rowGroupCols, groupKeys)) {\n            const rowGroupCol = rowGroupCols[groupKeys.length];\n            const colsToSelect = [rowGroupCol.id];\n\n            valueCols.forEach(function (valueCol) {\n                colsToSelect.push(valueCol.aggFunc + '(' + valueCol.id + ') AS ' + valueCol.id);\n            });\n\n            return 'SELECT ' + colsToSelect.join(', ');\n        }\n\n        return 'SELECT *';\n    }\n\n    function whereSql(request) {\n        const rowGroups = request.rowGroupCols;\n        const groupKeys = request.groupKeys;\n        const whereParts = [];\n\n        if (groupKeys) {\n            groupKeys.forEach(function (key, i) {\n                const value = typeof key === 'string' ? \"'\" + key + \"'\" : key;\n\n                whereParts.push(rowGroups[i].id + ' = ' + value);\n            });\n        }\n\n        if (whereParts.length > 0) {\n            return ' WHERE ' + whereParts.join(' AND ');\n        }\n\n        return '';\n    }\n\n    function groupBySql(request) {\n        const rowGroupCols = request.rowGroupCols;\n        const groupKeys = request.groupKeys;\n\n        if (isDoingGrouping(rowGroupCols, groupKeys)) {\n            const rowGroupCol = rowGroupCols[groupKeys.length];\n\n            return ' GROUP BY ' + rowGroupCol.id + ' HAVING count(*) > 0';\n        }\n\n        return '';\n    }\n\n    function orderBySql(request) {\n        const sortModel = request.sortModel;\n\n        if (sortModel.length === 0) return '';\n\n        const sorts = sortModel.map(function (s) {\n            return s.colId + ' ' + s.sort.toUpperCase();\n        });\n\n        return ' ORDER BY ' + sorts.join(', ');\n    }\n\n    function limitSql(request) {\n        if (request.endRow == undefined || request.startRow == undefined) {\n            return '';\n        }\n\n        const blockSize = request.endRow - request.startRow;\n\n        return ' LIMIT ' + blockSize + ' OFFSET ' + request.startRow;\n    }\n\n    function isDoingGrouping(rowGroupCols, groupKeys) {\n        // we are not doing grouping if at the lowest level\n        return rowGroupCols.length > groupKeys.length;\n    }\n\n    function getLastRowIndex(request) {\n        return executeQuery({ ...request, startRow: undefined, endRow: undefined }).length;\n    }\n}\n","main.js":"let gridApi;\nconst gridOptions = {\n  columnDefs: [\n    { field: \"country\" },\n    { field: \"year\" },\n    { field: \"version\" },\n    { field: \"gold\", aggFunc: \"sum\" },\n    { field: \"silver\", aggFunc: \"sum\" },\n    { field: \"bronze\", aggFunc: \"sum\" },\n  ],\n  defaultColDef: {\n    flex: 1,\n    minWidth: 150,\n    enableCellChangeFlash: true,\n  },\n  autoGroupColumnDef: {\n    flex: 1,\n    minWidth: 280,\n    field: \"athlete\",\n  },\n  getRowId: (params) => {\n    const data = params.data;\n    const parts = [];\n    if (data.country != null) {\n      parts.push(data.country);\n    }\n    if (data.year != null) {\n      parts.push(data.year);\n    }\n    if (data.id != null) {\n      parts.push(data.id);\n    }\n    return parts.join(\"-\");\n  },\n  onStoreRefreshed: (event) => {\n    console.log(\"Refresh finished for store with route:\", event.route);\n  },\n  // use the server-side row model\n  rowModelType: \"serverSide\",\n  suppressAggFuncInHeader: true,\n};\n\nlet allData;\n\nlet versionCounter = 1;\n\nconst updateChangeIndicator = () => {\n  const el = document.querySelector(\"#version-indicator\");\n  el.textContent = `${versionCounter}`;\n};\n\nconst beginPeriodicallyModifyingData = () => {\n  setInterval(() => {\n    versionCounter += 1;\n    allData = allData.map((data) => ({\n      ...data,\n      version: versionCounter + \" - \" + versionCounter + \" - \" + versionCounter,\n    }));\n    updateChangeIndicator();\n  }, 4000);\n};\n\nfunction refreshCache(route) {\n  const purge = !!document.querySelector(\"#purge\").checked;\n  gridApi.refreshServerSide({ route: route, purge: purge });\n}\n\nconst getServerSideDatasource = (server) => {\n  return {\n    getRows: (params) => {\n      console.log(\"[Datasource] - rows requested by grid: \", params.request);\n\n      const response = server.getData(params.request);\n\n      const dataWithVersionAndGroupProperties = response.rows.map((rowData) => {\n        const rowProperties = {\n          ...rowData,\n          version:\n            versionCounter + \" - \" + versionCounter + \" - \" + versionCounter,\n        };\n\n        // for unique-id purposes in the client, we also want to attach\n        // the parent group keys\n        const groupProperties = Object.fromEntries(\n          params.request.groupKeys.map((groupKey, index) => {\n            const col = params.request.rowGroupCols[index];\n            const field = col.id;\n            return [field, groupKey];\n          }),\n        );\n\n        return {\n          ...rowProperties,\n          ...groupProperties,\n        };\n      });\n\n      // adding delay to simulate real server call\n      setTimeout(() => {\n        if (response.success) {\n          // call the success callback\n          params.success({\n            rowData: dataWithVersionAndGroupProperties,\n            rowCount: response.lastRow,\n          });\n        } else {\n          // inform the grid request failed\n          params.fail();\n        }\n      }, 1000);\n    },\n  };\n};\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then((data) => {\n      // give each data item an ID\n      const dataWithId = data.map((d, idx) => ({\n        ...d,\n        id: idx,\n      }));\n      allData = dataWithId;\n\n      // setup the fake server with entire dataset\n      const fakeServer = new FakeServer(allData);\n\n      // create datasource with a reference to the fake server\n      const datasource = getServerSideDatasource(fakeServer);\n\n      // register the datasource with the grid\n      gridApi.setGridOption(\"serverSideDatasource\", datasource);\n      beginPeriodicallyModifyingData();\n    });\n});\n","index.html":"<div class=\"example-wrapper\">\n    <div style=\"margin-bottom: 5px\">\n        <div>Version on server: <span id=\"version-indicator\">1</span></div>\n        <button onclick=\"refreshCache(undefined)\">Refresh Rows</button>\n\n        <label><input type=\"checkbox\" id=\"purge\" /> Purge</label>\n    </div>\n    <div id=\"myGrid\"></div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}},"extras":["alasql"]}