{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["customPinnedRowRenderer.js","main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n\n.example-header {\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\n    font-size: 13px;\n    margin-bottom: 1rem;\n}\n","customPinnedRowRenderer.js":"\nfunction setStyle(element, propertyObject) {\n    for (const property in propertyObject) {\n        element.style[property] = propertyObject[property];\n    }\n}\nclass CustomPinnedRowRenderer  {\n     eGui;\n\n    init(params) {\n        this.eGui = document.createElement('div');\n        setStyle(this.eGui, params.style);\n        this.eGui.innerHTML = params.value;\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n\n    refresh() {\n        return false;\n    }\n}\n","main.js":"const columnDefs = [\n  {\n    field: \"athlete\",\n    cellRendererSelector: (params) => {\n      if (params.node.rowPinned) {\n        return {\n          component: CustomPinnedRowRenderer,\n          params: {\n            style: { color: \"#5577CC\" },\n          },\n        };\n      } else {\n        // rows that are not pinned don't use any cell renderer\n        return undefined;\n      }\n    },\n  },\n  {\n    field: \"country\",\n    cellRendererSelector: (params) => {\n      if (params.node.rowPinned) {\n        return {\n          component: CustomPinnedRowRenderer,\n          params: {\n            style: { fontStyle: \"italic\" },\n          },\n        };\n      } else {\n        // rows that are not pinned don't use any cell renderer\n        return undefined;\n      }\n    },\n  },\n  { field: \"sport\" },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n  defaultColDef: {\n    flex: 1,\n  },\n  columnDefs: columnDefs,\n  getRowStyle: (params) => {\n    if (params.node.rowPinned) {\n      return { fontWeight: \"bold\" };\n    }\n  },\n  // no rows to pin to start with\n  pinnedTopRowData: [\n    {\n      athlete: \"TOP 1 (athlete)\",\n      country: \"TOP 1 (country)\",\n      sport: \"TOP 1 (sport)\",\n    },\n    {\n      athlete: \"TOP 2 (athlete)\",\n      country: \"TOP 2 (country)\",\n      sport: \"TOP 2 (sport)\",\n    },\n  ],\n  pinnedBottomRowData: [\n    {\n      athlete: \"BOTTOM 1 (athlete)\",\n      country: \"BOTTOM 1 (country)\",\n      sport: \"BOTTOM 1 (sport)\",\n    },\n    {\n      athlete: \"BOTTOM 2 (athlete)\",\n      country: \"BOTTOM 2 (country)\",\n      sport: \"BOTTOM 2 (sport)\",\n    },\n  ],\n};\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then((data) => gridApi.setGridOption(\"rowData\", data));\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}