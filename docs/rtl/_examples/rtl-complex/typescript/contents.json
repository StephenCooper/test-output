{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":true,"entryFileName":"main.ts","mainFileName":"main.ts","styleFiles":[],"files":{"country-renderer.ts":"import type { ICellRendererComp, ICellRendererParams } from 'ag-grid-community';\n\nconst COUNTRY_CODES: Record<string, string> = {\n    Ireland: 'ie',\n    Luxembourg: 'lu',\n    Belgium: 'be',\n    Spain: 'es',\n    'United Kingdom': 'gb',\n    France: 'fr',\n    Germany: 'de',\n    Sweden: 'se',\n    Italy: 'it',\n    Greece: 'gr',\n    Iceland: 'is',\n    Portugal: 'pt',\n    Malta: 'mt',\n    Norway: 'no',\n    Brazil: 'br',\n    Argentina: 'ar',\n    Colombia: 'co',\n    Peru: 'pe',\n    Venezuela: 've',\n    Uruguay: 'uy',\n};\n\nexport class CountryCellRenderer implements ICellRendererComp {\n    eGui!: HTMLSpanElement;\n\n    init(params: ICellRendererParams) {\n        this.eGui = document.createElement('span');\n        this.eGui.style.cursor = 'default';\n        this.eGui.style.overflow = 'hidden';\n        this.eGui.style.textOverflow = 'ellipsis';\n\n        //get flags from here: http://www.freeflagicons.com/\n        if (params.value == null || params.value === '' || params.value === '(Select All)') {\n            this.eGui.innerHTML = params.value;\n        } else {\n            const flag =\n                '<img border=\"0\" width=\"15\" height=\"10\" src=\"https://flags.fmcdn.net/data/flags/mini/' +\n                COUNTRY_CODES[params.value] +\n                '.png\">';\n            this.eGui.innerHTML = flag + ' ' + params.value;\n        }\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n\n    refresh(params: ICellRendererParams) {\n        return false;\n    }\n}\n","person-filter.ts":"import type { IDoesFilterPassParams, IFilterComp, IFilterParams } from 'ag-grid-community';\n\nexport class PersonFilter implements IFilterComp {\n    filterParams!: IFilterParams;\n    filterText!: string | null;\n    gui!: HTMLDivElement;\n    eFilterText: any;\n\n    init(params: IFilterParams) {\n        this.filterParams = params;\n        this.filterText = null;\n        this.setupGui(params);\n    }\n\n    // not called by AG Grid, just for us to help setup\n    setupGui(params: IFilterParams) {\n        this.gui = document.createElement('div');\n        this.gui.innerHTML =\n            '<div style=\"padding: 12px;\">' +\n            '<div style=\"font-weight: bold;\">Custom Athlete Filter</div>' +\n            '<div><input style=\"margin: 4px 0px 4px 0px;\" type=\"text\" id=\"filterText\" placeholder=\"Full name search...\"/></div>' +\n            '<div style=\"margin-top: 20px; width: 200px;\">This filter does partial word search on multiple words, eg \"mich phel\" still brings back Michael Phelps.</div>' +\n            '<div style=\"margin-top: 20px; width: 200px;\">Just to iterate anything can go in here, here is an image:</div>' +\n            '<div><img src=\"https://www.ag-grid.com/example-assets/ag-grid-logo.png\" style=\"width: 150px; text-align: center; padding: 10px; margin: 10px; border: 1px solid lightgrey; background-color: white;\"/></div>' +\n            '</div>';\n        const listener = (event: any) => {\n            this.filterText = event.target.value;\n            params.filterChangedCallback();\n        };\n\n        this.eFilterText = this.gui.querySelector('#filterText');\n        this.eFilterText.addEventListener('changed', listener);\n        this.eFilterText.addEventListener('paste', listener);\n        this.eFilterText.addEventListener('input', listener);\n    }\n\n    getGui() {\n        return this.gui;\n    }\n\n    doesFilterPass(params: IDoesFilterPassParams) {\n        const { node } = params;\n\n        const value = this.filterParams.getValue(node).toString().toLowerCase();\n\n        // make sure each word passes separately, ie search for firstname, lastname\n        return this.filterText!.toLowerCase()\n            .split(' ')\n            .every((filterWord) => {\n                return value.indexOf(filterWord) >= 0;\n            });\n    }\n\n    isFilterActive() {\n        const isActive = this.filterText !== null && this.filterText !== undefined && this.filterText !== '';\n        return isActive;\n    }\n\n    getApi() {\n        return {\n            getModel: () => {\n                return { value: this.eFilterText.value };\n            },\n            setModel: (model: any) => {\n                this.eFilterText.value = model.value;\n            },\n        };\n    }\n\n    // lazy, the example doesn't use getModel() and setModel()\n    getModel() {}\n\n    setModel() {}\n}\n","winnings-filter.ts":"import type { IDoesFilterPassParams, IFilterComp, IFilterParams } from 'ag-grid-community';\n\nexport class WinningsFilter implements IFilterComp {\n    filterChangedCallback!: (additionalEventAttributes?: any) => void;\n    filterParams!: IFilterParams;\n    eGui!: HTMLDivElement;\n    cbNoFilter: any;\n    cbPositive: any;\n    cbNegative: any;\n    cbGreater50: any;\n    cbGreater90: any;\n\n    init(params: IFilterParams) {\n        const uniqueId = Math.random();\n        this.filterChangedCallback = params.filterChangedCallback;\n        this.eGui = document.createElement('div');\n        this.eGui.innerHTML =\n            '<div style=\"padding: 12px;\">' +\n            '<div style=\"font-weight: bold;\">Example Custom Filter</div>' +\n            '<div><label><input type=\"radio\" name=\"filter\"' +\n            uniqueId +\n            ' id=\"cbNoFilter\">No filter</input></label></div>' +\n            '<div><label><input type=\"radio\" name=\"filter\"' +\n            uniqueId +\n            ' id=\"cbPositive\">Positive</input></label></div>' +\n            '<div><label><input type=\"radio\" name=\"filter\"' +\n            uniqueId +\n            ' id=\"cbNegative\">Negative</input></label></div>' +\n            '<div><label><input type=\"radio\" name=\"filter\"' +\n            uniqueId +\n            ' id=\"cbGreater50\">&gt; &pound;50,000</label></div>' +\n            '<div><label><input type=\"radio\" name=\"filter\"' +\n            uniqueId +\n            ' id=\"cbGreater90\">&gt; &pound;90,000</label></div>' +\n            '</div>';\n        this.cbNoFilter = this.eGui.querySelector('#cbNoFilter');\n        this.cbPositive = this.eGui.querySelector('#cbPositive');\n        this.cbNegative = this.eGui.querySelector('#cbNegative');\n        this.cbGreater50 = this.eGui.querySelector('#cbGreater50');\n        this.cbGreater90 = this.eGui.querySelector('#cbGreater90');\n        this.cbNoFilter.checked = true; // initialise the first to checked\n        this.cbNoFilter.onclick = this.filterChangedCallback;\n        this.cbPositive.onclick = this.filterChangedCallback;\n        this.cbNegative.onclick = this.filterChangedCallback;\n        this.cbGreater50.onclick = this.filterChangedCallback;\n        this.cbGreater90.onclick = this.filterChangedCallback;\n        this.filterParams = params;\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n\n    doesFilterPass(params: IDoesFilterPassParams) {\n        const { node } = params;\n\n        const value = this.filterParams.getValue(node);\n\n        if (this.cbNoFilter.checked) {\n            return true;\n        } else if (this.cbPositive.checked) {\n            return value >= 0;\n        } else if (this.cbNegative.checked) {\n            return value < 0;\n        } else if (this.cbGreater50.checked) {\n            return value >= 50000;\n        } else if (this.cbGreater90.checked) {\n            return value >= 90000;\n        } else {\n            console.error('invalid checkbox selection');\n        }\n        return true;\n    }\n\n    isFilterActive() {\n        return !this.cbNoFilter.checked;\n    }\n\n    // lazy, the example doesn't use getModel() and setModel()\n    getModel() {}\n\n    setModel() {}\n}\n","main.ts":"import { AgChartsEnterpriseModule } from \"ag-charts-enterprise\";\nimport {\n  CellClassParams,\n  CellStyle,\n  ColDef,\n  ColGroupDef,\n  GetContextMenuItems,\n  GetContextMenuItemsParams,\n  GridApi,\n  GridOptions,\n  ICellRendererParams,\n  IRowNode,\n  MenuItemDef,\n  ModuleRegistry,\n  RowSelectedEvent,\n  RowSelectionOptions,\n  SelectionChangedEvent,\n  SideBarDef,\n  StatusPanelDef,\n  ValueSetterParams,\n  createGrid,\n} from \"ag-grid-community\";\nimport { AllEnterpriseModule } from \"ag-grid-enterprise\";\nimport { CountryCellRenderer } from \"./country-renderer\";\nimport { PersonFilter } from \"./person-filter\";\nimport { WinningsFilter } from \"./winnings-filter\";\n\nModuleRegistry.registerModules([\n  AllEnterpriseModule.with(AgChartsEnterpriseModule),\n]);\n\nconst colNames = [\n  \"Station\",\n  \"Railway\",\n  \"Street\",\n  \"Address\",\n  \"Toy\",\n  \"Soft Box\",\n  \"Make and Model\",\n  \"Longest Day\",\n  \"Shortest Night\",\n];\n\nconst countries = [\n  { country: \"Ireland\", continent: \"Europe\", language: \"English\" },\n  { country: \"Spain\", continent: \"Europe\", language: \"Spanish\" },\n  { country: \"United Kingdom\", continent: \"Europe\", language: \"English\" },\n  { country: \"France\", continent: \"Europe\", language: \"French\" },\n  { country: \"Germany\", continent: \"Europe\", language: \"German\" },\n  { country: \"Luxembourg\", continent: \"Europe\", language: \"French\" },\n  { country: \"Sweden\", continent: \"Europe\", language: \"Swedish\" },\n  { country: \"Norway\", continent: \"Europe\", language: \"Norwegian\" },\n  { country: \"Italy\", continent: \"Europe\", language: \"Italian\" },\n  { country: \"Greece\", continent: \"Europe\", language: \"Greek\" },\n  { country: \"Iceland\", continent: \"Europe\", language: \"Icelandic\" },\n  { country: \"Portugal\", continent: \"Europe\", language: \"Portuguese\" },\n  { country: \"Malta\", continent: \"Europe\", language: \"Maltese\" },\n  { country: \"Brazil\", continent: \"South America\", language: \"Portuguese\" },\n  { country: \"Argentina\", continent: \"South America\", language: \"Spanish\" },\n  { country: \"Colombia\", continent: \"South America\", language: \"Spanish\" },\n  { country: \"Peru\", continent: \"South America\", language: \"Spanish\" },\n  { country: \"Venezuela\", continent: \"South America\", language: \"Spanish\" },\n  { country: \"Uruguay\", continent: \"South America\", language: \"Spanish\" },\n  { country: \"Belgium\", continent: \"Europe\", language: \"French\" },\n];\n\nconst games = [\n  \"Chess\",\n  \"Cross and Circle\",\n  \"Daldøs\",\n  \"Downfall\",\n  \"DVONN\",\n  \"Fanorona\",\n  \"Game of the Generals\",\n  \"Ghosts\",\n  \"Abalone\",\n  \"Agon\",\n  \"Backgammon\",\n  \"Battleship\",\n  \"Blockade\",\n  \"Blood Bowl\",\n  \"Bul\",\n  \"Camelot\",\n  \"Checkers\",\n  \"Go\",\n  \"Gipf\",\n  \"Guess Who?\",\n  \"Hare and Hounds\",\n  \"Hex\",\n  \"Hijara\",\n  \"Isola\",\n  \"Janggi (Korean Chess)\",\n  \"Le Jeu de la Guerre\",\n  \"Patolli\",\n  \"Plateau\",\n  \"PÜNCT\",\n  \"Rithmomachy\",\n  \"Sáhkku\",\n  \"Senet\",\n  \"Shogi\",\n  \"Space Hulk\",\n  \"Stratego\",\n  \"Sugoroku\",\n  \"Tâb\",\n  \"Tablut\",\n  \"Tantrix\",\n  \"Wari\",\n  \"Xiangqi (Chinese chess)\",\n  \"YINSH\",\n  \"ZÈRTZ\",\n  \"Kalah\",\n  \"Kamisado\",\n  \"Liu po\",\n  \"Lost Cities\",\n  \"Mad Gab\",\n  \"Master Mind\",\n  \"Nine Men's Morris\",\n  \"Obsession\",\n  \"Othello\",\n];\nconst booleanValues = [true, \"true\", false, \"false\"];\n\nconst firstNames = [\n  \"Sophie\",\n  \"Isabelle\",\n  \"Emily\",\n  \"Olivia\",\n  \"Lily\",\n  \"Chloe\",\n  \"Isabella\",\n  \"Amelia\",\n  \"Jessica\",\n  \"Sophia\",\n  \"Ava\",\n  \"Charlotte\",\n  \"Mia\",\n  \"Lucy\",\n  \"Grace\",\n  \"Ruby\",\n  \"Ella\",\n  \"Evie\",\n  \"Freya\",\n  \"Isla\",\n  \"Poppy\",\n  \"Daisy\",\n  \"Layla\",\n];\n\nconst lastNames = [\n  \"Beckham\",\n  \"Black\",\n  \"Braxton\",\n  \"Brennan\",\n  \"Brock\",\n  \"Bryson\",\n  \"Cadwell\",\n  \"Cage\",\n  \"Carson\",\n  \"Chandler\",\n  \"Cohen\",\n  \"Cole\",\n  \"Corbin\",\n  \"Dallas\",\n  \"Dalton\",\n  \"Dane\",\n  \"Donovan\",\n  \"Easton\",\n  \"Fisher\",\n  \"Fletcher\",\n  \"Grady\",\n  \"Greyson\",\n  \"Griffin\",\n  \"Gunner\",\n  \"Hayden\",\n  \"Hudson\",\n  \"Hunter\",\n  \"Jacoby\",\n  \"Jagger\",\n  \"Jaxon\",\n  \"Jett\",\n  \"Kade\",\n  \"Kane\",\n  \"Keating\",\n  \"Keegan\",\n  \"Kingston\",\n  \"Kobe\",\n];\n\nconst months = [\n  \"Jan\",\n  \"Feb\",\n  \"Mar\",\n  \"Apr\",\n  \"May\",\n  \"Jun\",\n  \"Jul\",\n  \"Aug\",\n  \"Sep\",\n  \"Oct\",\n  \"Nov\",\n  \"Dec\",\n];\n\nconst dataSize: string = \".1x22\";\n\nconst autoGroupColumnDef: ColDef = {\n  headerName: \"Group\",\n  width: 200,\n  field: \"name\",\n  valueGetter: (params) => {\n    if (params.node && params.node.group) {\n      return params.node.key;\n    } else {\n      return params.data[params.colDef.field!];\n    }\n  },\n  cellRenderer: \"agGroupCellRenderer\",\n};\n\nlet gridApi: GridApi;\n\nconst gridOptions: GridOptions = {\n  defaultColDef: {\n    editable: true,\n    minWidth: 100,\n    filter: true,\n    floatingFilter: true,\n  },\n  sideBar: true,\n  rowGroupPanelShow: \"always\", // on of ['always','onlyWhenGrouping']\n  pivotPanelShow: \"always\", // on of ['always','onlyWhenPivoting']\n  enableRtl: true,\n  statusBar: {\n    statusPanels: [{ statusPanel: \"agAggregationComponent\" }],\n  },\n  rowSelection: {\n    mode: \"multiRow\",\n    groupSelects: \"descendants\",\n    selectAll: \"filtered\",\n  },\n  quickFilterText: undefined,\n  autoGroupColumnDef: autoGroupColumnDef,\n  onRowSelected: rowSelected, //callback when row selected\n  onSelectionChanged: selectionChanged, //callback when selection changed,\n  getBusinessKeyForNode: (node) => {\n    if (node.data) {\n      return node.data.name;\n    } else {\n      return \"\";\n    }\n  },\n  getContextMenuItems: getContextMenuItems,\n};\n\nfunction getContextMenuItems(\n  params: GetContextMenuItemsParams,\n): (string | MenuItemDef)[] {\n  const result: (string | MenuItemDef)[] = params.defaultItems!.splice(0);\n  result.push({\n    name: \"Custom Menu Item\",\n    icon: '<img src=\"https://www.ag-grid.com/example-assets/lab.png\" style=\"width: 14px;\" />',\n    //shortcut: 'Alt + M',\n    action: () => {\n      const value = params.value ? params.value : \"<empty>\";\n      window.alert(\"You clicked a custom menu item on cell \" + value);\n    },\n  });\n\n  return result;\n}\n\nconst firstColumn: ColDef = {\n  headerName: \"Name\",\n  field: \"name\",\n  width: 200,\n  editable: true,\n  enableRowGroup: true,\n  filter: PersonFilter,\n  icons: {\n    sortAscending: '<i class=\"fa fa-sort-alpha-up\"/>',\n    sortDescending: '<i class=\"fa fa-sort-alpha-down\"/>',\n  },\n};\n\nconst defaultCols: (ColDef | ColGroupDef)[] = [\n  {\n    // column group 'Participant\n    headerName: \"Participant\",\n    children: [\n      firstColumn,\n      {\n        field: \"language\",\n        width: 150,\n        editable: true,\n        filter: \"agSetColumnFilter\",\n        cellRenderer: languageCellRenderer,\n        cellEditor: \"agSelectCellEditor\",\n        enableRowGroup: true,\n        enablePivot: true,\n        cellEditorParams: {\n          values: [\n            \"English\",\n            \"Spanish\",\n            \"French\",\n            \"Portuguese\",\n            \"German\",\n            \"Swedish\",\n            \"Norwegian\",\n            \"Italian\",\n            \"Greek\",\n            \"Icelandic\",\n            \"Portuguese\",\n            \"Maltese\",\n          ],\n        },\n        pinned: \"right\",\n        headerTooltip: \"Example tooltip for Language\",\n      },\n      {\n        field: \"country\",\n        width: 150,\n        editable: true,\n        cellRenderer: CountryCellRenderer,\n        enableRowGroup: true,\n        enablePivot: true,\n        cellEditor: \"agRichSelectCellEditor\",\n        cellEditorParams: {\n          cellRenderer: CountryCellRenderer,\n          values: [\n            \"Argentina\",\n            \"Brazil\",\n            \"Colombia\",\n            \"France\",\n            \"Germany\",\n            \"Greece\",\n            \"Iceland\",\n            \"Ireland\",\n            \"Italy\",\n            \"Malta\",\n            \"Portugal\",\n            \"Norway\",\n            \"Peru\",\n            \"Spain\",\n            \"Sweden\",\n            \"United Kingdom\",\n            \"Uruguay\",\n            \"Venezuela\",\n            \"Belgium\",\n            \"Luxembourg\",\n          ],\n        },\n        filterParams: {\n          cellRenderer: CountryCellRenderer,\n        },\n      },\n    ],\n  },\n  {\n    // column group 'Game of Choice'\n    headerName: \"Game of Choice\",\n    children: [\n      {\n        headerName: \"Game Name\",\n        field: \"game.name\",\n        width: 180,\n        editable: true,\n        filter: \"agSetColumnFilter\",\n        tooltipField: \"game.name\",\n        cellClass: () => {\n          return \"alphabet\";\n        },\n        enableRowGroup: true,\n        enablePivot: true,\n        pinned: \"left\",\n        icons: {\n          sortAscending: '<i class=\"fa fa-sort-alpha-up\"/>',\n          sortDescending: '<i class=\"fa fa-sort-alpha-down\"/>',\n        },\n      },\n      {\n        headerName: \"Bought\",\n        field: \"game.bought\",\n        filter: \"agSetColumnFilter\",\n        editable: true,\n        width: 100,\n        enableRowGroup: true,\n        enablePivot: true,\n        enableValue: true,\n        cellRenderer: booleanCellRenderer,\n        cellStyle: { \"text-align\": \"center\" },\n        comparator: booleanComparator,\n        filterParams: { cellRenderer: booleanFilterCellRenderer },\n      },\n    ],\n  },\n  {\n    // column group 'Performance'\n    groupId: \"performance\",\n    children: [\n      {\n        field: \"bankBalance\",\n        width: 150,\n        editable: true,\n        filter: WinningsFilter,\n        cellRenderer: currencyRenderer,\n        cellStyle: currencyCssFunc,\n        filterParams: { cellRenderer: currencyRenderer },\n        enableValue: true,\n        icons: {\n          sortAscending: '<i class=\"fa fa-sort-amount-up\"/>',\n          sortDescending: '<i class=\"fa fa-sort-amount-down\"/>',\n        },\n      },\n      {\n        headerName: \"Extra Info 1\",\n        columnGroupShow: \"open\",\n        width: 150,\n        editable: false,\n        sortable: false,\n        suppressHeaderMenuButton: true,\n        cellStyle: { \"text-align\": \"right\" },\n        cellRenderer: () => {\n          return \"Abra...\";\n        },\n      },\n      {\n        headerName: \"Extra Info 2\",\n        columnGroupShow: \"open\",\n        width: 150,\n        editable: false,\n        sortable: false,\n        suppressHeaderMenuButton: true,\n        cellStyle: { \"text-align\": \"left\" },\n        cellRenderer: () => {\n          return \"...cadabra!\";\n        },\n      },\n    ],\n  },\n  {\n    field: \"rating\",\n    width: 100,\n    editable: true,\n    cellRenderer: ratingRenderer,\n    enableRowGroup: true,\n    enablePivot: true,\n    enableValue: true,\n    filterParams: { cellRenderer: ratingFilterRenderer },\n  },\n  {\n    field: \"totalWinnings\",\n    filter: \"agNumberColumnFilter\",\n    editable: true,\n    valueSetter: numberValueSetter,\n    width: 150,\n    enableValue: true,\n    cellRenderer: currencyRenderer,\n    cellStyle: currencyCssFunc,\n    icons: {\n      sortAscending: '<i class=\"fa fa-sort-amount-up\"/>',\n      sortDescending: '<i class=\"fa fa-sort-amount-down\"/>',\n    },\n  },\n];\n//put in the month cols\nconst monthGroup: ColGroupDef = {\n  headerName: \"Monthly Breakdown\",\n  children: [],\n};\ndefaultCols.push(monthGroup);\nmonths.forEach((month) => {\n  const child: ColDef = {\n    headerName: month,\n    field: month.toLocaleLowerCase(),\n    width: 100,\n    filter: \"agNumberColumnFilter\",\n    editable: true,\n    enableValue: true,\n    cellClassRules: {\n      \"good-score\": 'typeof x === \"number\" && x > 50000',\n      \"bad-score\": 'typeof x === \"number\" && x < 10000',\n    },\n    valueSetter: numberValueSetter,\n    cellRenderer: currencyRenderer,\n    cellStyle: { \"text-align\": \"right\" },\n  };\n  monthGroup.children.push(child);\n});\n\nfunction getColCount() {\n  switch (dataSize) {\n    case \"10x100\":\n      return 100;\n    default:\n      return 22;\n  }\n}\n\nfunction getRowCount() {\n  switch (dataSize) {\n    case \".1x22\":\n      return 100;\n    case \"1x22\":\n      return 1000;\n    case \"10x100\":\n      return 10000;\n    case \"100x22\":\n      return 100000;\n    default:\n      return -1;\n  }\n}\n\nfunction createCols() {\n  const colCount = getColCount();\n  // start with a copy of the default cols\n  const columns = defaultCols.slice(0, colCount);\n\n  // there are 22 cols by default\n  for (let col = 22; col < colCount; col++) {\n    const colName = colNames[col % colNames.length];\n    const colDef = {\n      headerName: colName,\n      field: \"col\" + col,\n      width: 200,\n      editable: true,\n    };\n    columns.push(colDef);\n  }\n\n  return columns;\n}\n\nlet loadInstance = 0;\n\nfunction createData() {\n  loadInstance++;\n\n  const loadInstanceCopy = loadInstance;\n  gridApi!.setGridOption(\"loading\", true);\n\n  const colDefs = createCols();\n\n  const rowCount = getRowCount();\n  const colCount = getColCount();\n\n  let row = 0;\n  const data: any[] = [];\n\n  const intervalId = setInterval(() => {\n    if (loadInstanceCopy != loadInstance) {\n      clearInterval(intervalId);\n      return;\n    }\n\n    for (let i = 0; i < 1000; i++) {\n      if (row < rowCount) {\n        const rowItem = createRowItem(row, colCount);\n        data.push(rowItem);\n        row++;\n      }\n    }\n\n    if (row >= rowCount) {\n      clearInterval(intervalId);\n      setTimeout(() => {\n        gridApi!.setGridOption(\"columnDefs\", colDefs);\n        gridApi!.setGridOption(\"rowData\", data);\n        gridApi!.setGridOption(\"loading\", false);\n      }, 0);\n    }\n  }, 0);\n}\n\nfunction createRowItem(row: number, colCount: number) {\n  const rowItem: any = {};\n\n  //create data for the known columns\n  const countriesToPickFrom = Math.floor(\n    countries.length * (((row % 3) + 1) / 3),\n  );\n  const countryData = countries[(row * 19) % countriesToPickFrom];\n  rowItem.country = countryData.country;\n  rowItem.continent = countryData.continent;\n  rowItem.language = countryData.language;\n\n  const firstName = firstNames[row % firstNames.length];\n  const lastName = lastNames[row % lastNames.length];\n  rowItem.name = firstName + \" \" + lastName;\n\n  rowItem.game = {\n    name: games[Math.floor(((row * 13) / 17) * 19) % games.length],\n    bought: booleanValues[row % booleanValues.length],\n  };\n\n  rowItem.bankBalance = Math.round(pseudoRandom() * 10000000) / 100 - 3000;\n  rowItem.rating = Math.round(pseudoRandom() * 5);\n\n  let totalWinnings = 0;\n  months.forEach((month) => {\n    const value = Math.round(pseudoRandom() * 10000000) / 100 - 20;\n    rowItem[month.toLocaleLowerCase()] = value;\n    totalWinnings += value;\n  });\n  rowItem.totalWinnings = totalWinnings;\n\n  //create dummy data for the additional columns\n  for (let col = defaultCols.length; col < colCount; col++) {\n    var value;\n    const randomBit = pseudoRandom().toString().substring(2, 5);\n    value =\n      colNames[col % colNames.length] +\n      \"-\" +\n      randomBit +\n      \" - (\" +\n      (row + 1) +\n      \",\" +\n      col +\n      \")\";\n    rowItem[\"col\" + col] = value;\n  }\n\n  return rowItem;\n}\n\nlet seed = 123456789;\nconst m = Math.pow(2, 32);\nconst a = 1103515245;\nconst c = 12345;\n\nfunction pseudoRandom() {\n  seed = (a * seed + c) % m;\n  return seed / m;\n}\n\nfunction selectionChanged(event: SelectionChangedEvent) {\n  console.log(\n    \"Callback selectionChanged: selection count = \" +\n      gridApi!.getSelectedNodes().length,\n  );\n}\n\nfunction rowSelected(event: RowSelectedEvent) {\n  // the number of rows selected could be huge, if the user is grouping and selects a group, so\n  // to stop the console from clogging up, we only print if in the first 10 (by chance we know\n  // the node id's are assigned from 0 upwards)\n  if (Number(event.node.id) < 10) {\n    const valueToPrint = event.node.group\n      ? \"group (\" + event.node.key + \")\"\n      : event.node.data.name;\n    console.log(\"Callback rowSelected: \" + valueToPrint);\n  }\n}\n\nfunction numberValueSetter(params: ValueSetterParams) {\n  const newValue = params.newValue;\n  let valueAsNumber;\n  if (newValue === null || newValue === undefined || newValue === \"\") {\n    valueAsNumber = null;\n  } else {\n    valueAsNumber = parseFloat(params.newValue);\n  }\n  const field = params.colDef.field!;\n  const data = params.data;\n  data[field] = valueAsNumber;\n  return true;\n}\n\nfunction currencyCssFunc(params: CellClassParams): CellStyle {\n  if (params.value !== null && params.value !== undefined && params.value < 0) {\n    return { color: \"red\", \"text-align\": \"right\", \"font-weight\": \"bold\" };\n  } else {\n    return { \"text-align\": \"right\" };\n  }\n}\n\nfunction ratingFilterRenderer(params: ICellRendererParams) {\n  return ratingRendererGeneral(params.value, true);\n}\n\nfunction ratingRenderer(params: ICellRendererParams) {\n  return ratingRendererGeneral(params.value, false);\n}\n\nfunction ratingRendererGeneral(value: any, forFilter: boolean) {\n  if (value === \"(Select All)\") {\n    return value;\n  }\n\n  let result = \"<span>\";\n\n  for (let i = 0; i < 5; i++) {\n    if (value > i) {\n      result +=\n        '<img src=\"https://www.ag-grid.com/example-assets/gold-star.png\" />';\n    }\n  }\n\n  if (forFilter && Number(value) === 0) {\n    result += \"(No stars)\";\n  }\n\n  return result;\n}\n\nfunction currencyRenderer(params: ICellRendererParams) {\n  if (params.value === null || params.value === undefined) {\n    return null;\n  } else if (isNaN(params.value)) {\n    return \"NaN\";\n  } else {\n    // if we are doing 'count', then we do not show pound sign\n    if (params.node.group && params.column!.getAggFunc() === \"count\") {\n      return params.value;\n    } else {\n      return (\n        \"&pound;\" +\n        Math.floor(params.value)\n          .toString()\n          .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\")\n      );\n    }\n  }\n}\n\nfunction booleanComparator(value1: any, value2: any) {\n  const value1Cleaned = booleanCleaner(value1);\n  const value2Cleaned = booleanCleaner(value2);\n  const value1Ordinal =\n    value1Cleaned === true ? 0 : value1Cleaned === false ? 1 : 2;\n  const value2Ordinal =\n    value2Cleaned === true ? 0 : value2Cleaned === false ? 1 : 2;\n  return value1Ordinal - value2Ordinal;\n}\n\nlet count = 0;\n\nfunction booleanCellRenderer(params: ICellRendererParams) {\n  count++;\n  if (count <= 1) {\n    // params.api.onRowHeightChanged();\n  }\n\n  const valueCleaned = booleanCleaner(params.value);\n  if (valueCleaned === true) {\n    //this is the unicode for tick character\n    return \"<span title='true'>&#10004;</span>\";\n  } else if (valueCleaned === false) {\n    //this is the unicode for cross character\n    return \"<span title='false'>&#10006;</span>\";\n  } else if (params.value !== null && params.value !== undefined) {\n    return params.value.toString();\n  } else {\n    return null;\n  }\n}\n\nfunction booleanFilterCellRenderer(params: ICellRendererParams) {\n  const valueCleaned = booleanCleaner(params.value);\n\n  if (valueCleaned === true) {\n    //this is the unicode for tick character\n    return \"&#10004;\";\n  } else if (valueCleaned === false) {\n    //this is the unicode for cross character\n    return \"&#10006;\";\n  } else if (params.value === \"(Select All)\") {\n    return params.value;\n  } else {\n    return \"(empty)\";\n  }\n}\n\nfunction booleanCleaner(value: any) {\n  if (value === \"true\" || value === true || value === 1) {\n    return true;\n  } else if (value === \"false\" || value === false || value === 0) {\n    return false;\n  } else {\n    return null;\n  }\n}\n\nfunction languageCellRenderer(params: ICellRendererParams) {\n  if (params.value !== null && params.value !== undefined) {\n    return params.value;\n  } else {\n    return null;\n  }\n}\n\nconst gridDiv = document.querySelector<HTMLElement>(\"#myGrid\")!;\n\ngridApi = createGrid(gridDiv, gridOptions);\ncreateData();\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {},\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        // map tells the System loader where to look for things\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            // appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap,\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {},\n            app: {\n                main: './main.ts',\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0","ag-charts-community":"latest","ag-charts-enterprise":"latest"}},"extras":["fontawesome"],"supportedFrameworks":["typescript"]}