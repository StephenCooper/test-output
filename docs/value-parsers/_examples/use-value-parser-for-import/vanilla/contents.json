{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":[],"files":{"main.js":"let gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    {\n      headerName: \"£A\",\n      field: \"a\",\n      valueFormatter: currencyFormatter,\n      valueParser: currencyParser,\n    },\n    {\n      headerName: \"£B\",\n      field: \"b\",\n      valueFormatter: currencyFormatter,\n      valueParser: currencyParser,\n    },\n  ],\n  defaultColDef: {\n    cellDataType: false,\n    editable: true,\n  },\n  rowData: createRowData(),\n  cellSelection: {\n    handle: {\n      mode: \"fill\",\n    },\n  },\n};\n\nfunction currencyFormatter(params) {\n  return params.value == null ? \"\" : \"£\" + params.value;\n}\n\nfunction currencyParser(params) {\n  let value = params.newValue;\n  if (value == null || value === \"\") {\n    return null;\n  }\n  value = String(value);\n\n  if (value.startsWith(\"£\")) {\n    value = value.slice(1);\n  }\n  return parseFloat(value);\n}\n\nfunction createRowData() {\n  const rowData = [];\n\n  for (let i = 0; i < 100; i++) {\n    rowData.push({\n      a: Math.floor(((i + 2) * 173456) % 10000),\n      b: Math.floor(((i + 7) * 373456) % 10000),\n    });\n  }\n\n  return rowData;\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}