{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["data.js","colourCellRenderer.js","main.js"],"styleFiles":[],"files":{"data.js":"function getData() {\n    const rowData = [\n        { make: 'tyt', exteriorColour: 'fg', interiorColour: 'bw', price: 35000 },\n        { make: 'frd', exteriorColour: 'bw', interiorColour: 'cb', price: 32000 },\n        { make: 'prs', exteriorColour: 'cb', interiorColour: 'fg', price: 72000 },\n        { make: 'tyt', exteriorColour: 'fg', interiorColour: 'bw', price: 35000 },\n        { make: 'frd', exteriorColour: 'bw', interiorColour: 'cb', price: 32000 },\n        { make: 'prs', exteriorColour: 'cb', interiorColour: 'fg', price: 72000 },\n        { make: 'tyt', exteriorColour: 'fg', interiorColour: 'bw', price: 35000 },\n        { make: 'frd', exteriorColour: 'bw', interiorColour: 'cb', price: 32000 },\n        { make: 'prs', exteriorColour: 'cb', interiorColour: 'fg', price: 72000 },\n        { make: 'tyt', exteriorColour: 'fg', interiorColour: 'bw', price: 35000 },\n        { make: 'frd', exteriorColour: 'bw', interiorColour: 'cb', price: 32000 },\n        { make: 'prs', exteriorColour: 'cb', interiorColour: 'fg', price: 72000 },\n        { make: 'tyt', exteriorColour: 'fg', interiorColour: 'bw', price: 35000 },\n        { make: 'frd', exteriorColour: 'bw', interiorColour: 'cb', price: 32000 },\n        { make: 'prs', exteriorColour: 'cb', interiorColour: 'fg', price: 72000 },\n        { make: 'prs', exteriorColour: 'cb', interiorColour: 'fg', price: 72000 },\n        { make: 'tyt', exteriorColour: 'fg', interiorColour: 'bw', price: 35000 },\n        { make: 'frd', exteriorColour: 'bw', interiorColour: 'cb', price: 32000 },\n    ];\n    return rowData;\n}\n","colourCellRenderer.js":"\nclass ColourCellRenderer  {\n    eGui;\n\n    init(params) {\n        this.eGui = document.createElement('div');\n        if (params.value === '(Select All)') {\n            this.eGui.textContent = params.value;\n        } else {\n            this.eGui.textContent = params.valueFormatted || '';\n            this.eGui.style.color = this.removeSpaces(params.valueFormatted || '');\n        }\n    }\n\n    removeSpaces(str) {\n        return str ? str.replace(/\\s/g, '') : str;\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n\n    refresh() {\n        return false;\n    }\n}\n","main.js":"const carMappings = {\n  tyt: \"Toyota\",\n  frd: \"Ford\",\n  prs: \"Porsche\",\n  nss: \"Nissan\",\n};\n\nconst colourMappings = {\n  cb: \"Cadet Blue\",\n  bw: \"Burlywood\",\n  fg: \"Forest Green\",\n};\n\nfunction extractKeys(mappings) {\n  return Object.keys(mappings);\n}\n\nconst carCodes = extractKeys(carMappings);\nconst colourCodes = extractKeys(colourMappings);\n\nlet gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    {\n      field: \"make\",\n      minWidth: 100,\n      cellEditor: \"agSelectCellEditor\",\n      cellEditorParams: {\n        values: carCodes,\n      },\n      filterParams: {\n        valueFormatter: (params) => {\n          return lookupValue(carMappings, params.value);\n        },\n      },\n      valueFormatter: (params) => {\n        return lookupValue(carMappings, params.value);\n      },\n    },\n    {\n      field: \"exteriorColour\",\n      minWidth: 150,\n      cellEditor: \"agRichSelectCellEditor\",\n      cellEditorParams: {\n        values: colourCodes,\n        cellRenderer: ColourCellRenderer,\n      },\n      filter: \"agSetColumnFilter\",\n      filterParams: {\n        values: colourCodes,\n        valueFormatter: (params) => {\n          return lookupValue(colourMappings, params.value);\n        },\n        cellRenderer: ColourCellRenderer,\n      },\n      valueFormatter: (params) => {\n        return lookupValue(colourMappings, params.value);\n      },\n      valueParser: (params) => {\n        return lookupKey(colourMappings, params.newValue);\n      },\n      cellRenderer: ColourCellRenderer,\n    },\n    {\n      field: \"interiorColour\",\n      minWidth: 150,\n      cellEditor: \"agTextCellEditor\",\n      cellEditorParams: {\n        useFormatter: true,\n      },\n      filter: \"agSetColumnFilter\",\n      filterParams: {\n        values: colourCodes,\n        valueFormatter: (params) => {\n          return lookupValue(colourMappings, params.value);\n        },\n        cellRenderer: ColourCellRenderer,\n      },\n      valueFormatter: (params) => {\n        return lookupValue(colourMappings, params.value);\n      },\n      valueParser: (params) => {\n        return lookupKey(colourMappings, params.newValue);\n      },\n      cellRenderer: ColourCellRenderer,\n    },\n    {\n      headerName: \"Retail Price\",\n      field: \"price\",\n      minWidth: 120,\n      colId: \"retailPrice\",\n      valueGetter: (params) => {\n        return params.data.price;\n      },\n      valueFormatter: currencyFormatter,\n      valueSetter: numberValueSetter,\n    },\n    {\n      headerName: \"Retail Price (incl Taxes)\",\n      minWidth: 120,\n      editable: false,\n      valueGetter: (params) => {\n        // example of chaining value getters\n        return params.getValue(\"retailPrice\") * 1.2;\n      },\n      valueFormatter: currencyFormatter,\n    },\n  ],\n  defaultColDef: {\n    flex: 1,\n    filter: true,\n    editable: true,\n  },\n  rowData: getData(),\n  onCellValueChanged: onCellValueChanged,\n};\n\nfunction onCellValueChanged(params) {\n  // notice that the data always contains the keys rather than values after editing\n  console.log(\"onCellValueChanged Data: \", params.data);\n}\n\nfunction lookupValue(mappings, key) {\n  return mappings[key];\n}\n\nfunction lookupKey(mappings, name) {\n  const keys = Object.keys(mappings);\n\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n\n    if (mappings[key] === name) {\n      return key;\n    }\n  }\n}\n\nfunction currencyFormatter(params) {\n  const value = Math.floor(params.value);\n\n  if (isNaN(value)) {\n    return \"\";\n  }\n\n  return \"Â£\" + value.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\");\n}\n\nfunction numberValueSetter(params) {\n  const valueAsNumber = parseFloat(params.newValue);\n  if (isNaN(valueAsNumber) || !isFinite(params.newValue)) {\n    return false; // don't set invalid numbers!\n  }\n\n  params.data.price = valueAsNumber;\n\n  return true;\n}\n\n// wait for the document to be loaded, otherwise\n// AG Grid will not find the div in the document.\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  // lookup the container we want the Grid to use\n  const eGridDiv = document.querySelector(\"#myGrid\");\n\n  // create the grid passing in the div to use together with the columns & data we want to use\n  gridApi = agGrid.createGrid(eGridDiv, gridOptions);\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}