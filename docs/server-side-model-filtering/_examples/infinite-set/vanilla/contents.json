{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["fakeServer.js","main.js"],"styleFiles":[],"files":{"fakeServer.js":"// This fake server uses http://alasql.org/ to mimic how a real server\n// might generate sql queries from the Server-Side Row Model request.\n// To keep things simple it does the bare minimum to support the example.\nfunction FakeServer(allData) {\n    alasql.options.cache = false;\n\n    return {\n        getData: function (request) {\n            const results = executeQuery(request);\n            results.forEach((row) => {\n                row.country = {\n                    code: row.countryCode,\n                    name: row.countryName,\n                };\n                delete row.countryCode;\n                delete row.countryName;\n            });\n\n            return {\n                success: true,\n                rows: results,\n                lastRow: getLastRowIndex(request),\n            };\n        },\n        getCountries: function (sportFilter) {\n            const textFilter = sportFilter ? ' WHERE ' + textFilterMapper('sport', sportFilter.filterModels[0]) : '';\n            const sql = 'SELECT DISTINCT countryCode, countryName FROM ? ' + textFilter + ' ORDER BY countryName ASC';\n\n            return alasql(sql, [allData]).map((row) => ({\n                code: row.countryCode,\n                name: row.countryName,\n            }));\n        },\n        getSports: function (countries, sportFilter) {\n            console.log('Returning sports for ' + (countries ? countries.join(', ') : 'all countries'));\n\n            const where = countries ? \" WHERE countryCode IN ('\" + countries.join(\"', '\") + \"')\" : '';\n            const operator = countries ? ' AND ' : ' WHERE ';\n            const textFilter = sportFilter ? operator + textFilterMapper('sport', sportFilter.filterModels[0]) : '';\n            const sql = 'SELECT DISTINCT sport FROM ? ' + where + textFilter + ' ORDER BY sport ASC';\n\n            return alasql(sql, [allData]).map(function (x) {\n                return x.sport;\n            });\n        },\n    };\n\n    function executeQuery(request) {\n        const sql = buildSql(request);\n\n        console.log('[FakeServer] - about to execute query:', sql);\n\n        return alasql(sql, [allData]);\n    }\n\n    function buildSql(request) {\n        return 'SELECT * FROM ?' + whereSql(request) + orderBySql(request) + limitSql(request);\n    }\n\n    function mapColumnKey(columnKey) {\n        return columnKey === 'country' ? 'countryCode' : columnKey;\n    }\n\n    function textFilterMapper(key, item) {\n        switch (item.type) {\n            case 'equals':\n                return key + \" = '\" + item.filter + \"'\";\n            case 'notEqual':\n                return key + \"' != '\" + item.filter + \"'\";\n            case 'contains':\n                return key + \" LIKE '%\" + item.filter + \"%'\";\n            case 'notContains':\n                return key + \" NOT LIKE '%\" + item.filter + \"%'\";\n            case 'startsWith':\n                return key + \" LIKE '\" + item.filter + \"%'\";\n            case 'endsWith':\n                return key + \" LIKE '%\" + item.filter + \"'\";\n            default:\n                console.log('unknown text filter type: ' + item.type);\n        }\n    }\n\n    function createFilterSql(mapper, key, item) {\n        if (item.operator) {\n            const condition1 = mapper(key, item.condition1);\n            const condition2 = mapper(key, item.condition2);\n\n            return '(' + condition1 + ' ' + item.operator + ' ' + condition2 + ')';\n        }\n\n        return mapper(key, item);\n    }\n\n    function whereSql(request) {\n        const whereParts = [];\n        const filterModel = request.filterModel;\n\n        if (filterModel) {\n            Object.keys(filterModel).forEach(function (columnKey) {\n                const filter = filterModel[columnKey];\n\n                if (filter.filterType === 'set') {\n                    whereParts.push(mapColumnKey(columnKey) + \" IN ('\" + filter.values.join(\"', '\") + \"')\");\n                    return;\n                }\n\n                if (filter.filterType === 'text') {\n                    whereParts.push(createFilterSql(textFilterMapper, columnKey, filter));\n                    return;\n                }\n\n                if (filter.filterType === 'multi') {\n                    Object.keys(filter.filterModels).forEach(function (fm) {\n                        if (filter.filterModels[fm]) {\n                            const model = filter.filterModels[fm];\n                            switch (model.filterType) {\n                                case 'text':\n                                    whereParts.push(createFilterSql(textFilterMapper, columnKey, model));\n                                    break;\n                                case 'set':\n                                    whereParts.push(columnKey + \" IN ('\" + model.values.join(\"', '\") + \"')\");\n                                    break;\n                                default:\n                                    console.log('unknown filter type: ' + model.filterType, model);\n                                    break;\n                            }\n                        }\n                    });\n                    return;\n                }\n\n                console.log('unsupported filter type: ' + filter.filterType);\n            });\n        }\n\n        if (whereParts.length > 0) {\n            return ' WHERE ' + whereParts.join(' AND ');\n        }\n\n        return '';\n    }\n\n    function orderBySql(request) {\n        const sortModel = request.sortModel;\n\n        if (sortModel.length === 0) return '';\n\n        const sorts = sortModel.map(function (s) {\n            return mapColumnKey(s.colId) + ' ' + s.sort.toUpperCase();\n        });\n\n        return ' ORDER BY ' + sorts.join(', ');\n    }\n\n    function limitSql(request) {\n        if (request.endRow == undefined || request.startRow == undefined) {\n            return '';\n        }\n        const blockSize = request.endRow - request.startRow;\n\n        return ' LIMIT ' + blockSize + ' OFFSET ' + request.startRow;\n    }\n\n    function getLastRowIndex(request) {\n        return executeQuery({ ...request, startRow: undefined, endRow: undefined }).length;\n    }\n}\n","main.js":"const columnDefs = [\n  {\n    field: \"country\",\n    filter: \"agSetColumnFilter\",\n    valueFormatter: countryValueFormatter,\n    filterParams: {\n      values: getCountryValuesAsync,\n      keyCreator: countryCodeKeyCreator,\n      valueFormatter: countryValueFormatter,\n      comparator: countryComparator,\n    },\n  },\n  {\n    field: \"sport\",\n    filter: \"agMultiColumnFilter\",\n    filterParams: {\n      filters: [\n        {\n          filter: \"agTextColumnFilter\",\n          filterParams: {\n            defaultOption: \"startsWith\",\n          },\n        },\n        {\n          filter: \"agSetColumnFilter\",\n          filterParams: {\n            values: getSportValuesAsync,\n          },\n        },\n      ],\n    },\n    menuTabs: [\"filterMenuTab\"],\n  },\n  { field: \"athlete\" },\n];\n\nfunction countryCodeKeyCreator(params) {\n  return params.value.code;\n}\n\nfunction countryValueFormatter(params) {\n  return params.value.name;\n}\n\nfunction countryComparator(a, b) {\n  // for complex objects, need to provide a comparator to choose what to sort by\n  if (a.name < b.name) {\n    return -1;\n  } else if (a.name > b.name) {\n    return 1;\n  }\n  return 0;\n}\n\nlet gridApi;\n\nconst gridOptions = {\n  columnDefs: columnDefs,\n  defaultColDef: {\n    flex: 1,\n    minWidth: 150,\n    suppressHeaderMenuButton: true,\n    suppressHeaderContextMenu: true,\n  },\n  // use the server-side row model\n  rowModelType: \"serverSide\",\n\n  // fetch 100 rows at a time\n  cacheBlockSize: 100,\n\n  // only keep 10 blocks of rows\n  maxBlocksInCache: 10,\n\n  onFilterChanged: onFilterChanged,\n};\n\nlet fakeServer;\nlet selectedCountries = null;\nlet textFilterStored = null;\n\nfunction onFilterChanged() {\n  const countryFilterModel = gridApi.getFilterModel()[\"country\"];\n  const sportFilterModel = gridApi.getFilterModel()[\"sport\"];\n  const selected = countryFilterModel && countryFilterModel.values;\n  const textFilter = sportFilterModel?.filterModels[0]\n    ? sportFilterModel.filterModels[0]\n    : null;\n\n  if (\n    !areEqual(selectedCountries, selected) ||\n    !areEqual(textFilterStored, textFilter)\n  ) {\n    selectedCountries = selected;\n    textFilterStored = textFilter;\n\n    console.log(\"Refreshing sports filter\");\n    gridApi.getColumnFilterInstance(\"sport\").then((filter) => {\n      filter.getChildFilterInstance(1).refreshFilterValues();\n    });\n    gridApi.getColumnFilterInstance(\"country\").then((filter) => {\n      filter.refreshFilterValues();\n    });\n  }\n}\n\nfunction areEqual(a, b) {\n  if (a == null && b == null) {\n    return true;\n  }\n  if (a != null || b != null) {\n    return false;\n  }\n\n  return (\n    a.length === b.length &&\n    a.every(function (v, i) {\n      return b[i] === v;\n    })\n  );\n}\n\nfunction getCountryValuesAsync(params) {\n  const sportFilterModel = params.api.getFilterModel()[\"sport\"];\n  const countries = fakeServer.getCountries(sportFilterModel);\n\n  // simulating real server call with a 500ms delay\n  setTimeout(() => {\n    params.success(countries);\n  }, 500);\n}\n\nfunction getSportValuesAsync(params) {\n  const sportFilterModel = params.api.getFilterModel()[\"sport\"];\n  const sports = fakeServer.getSports(selectedCountries, sportFilterModel);\n\n  // simulating real server call with a 500ms delay\n  setTimeout(() => {\n    params.success(sports);\n  }, 500);\n}\n\nfunction getServerSideDatasource(server) {\n  return {\n    getRows: (params) => {\n      console.log(\"[Datasource] - rows requested by grid: \", params.request);\n\n      // get data for request from our fake server\n      const response = server.getData(params.request);\n\n      // simulating real server call with a 500ms delay\n      setTimeout(() => {\n        if (response.success) {\n          // supply rows for requested block to grid\n          params.success({\n            rowData: response.rows,\n            rowCount: response.lastRow,\n          });\n        } else {\n          params.fail();\n        }\n      }, 500);\n    },\n  };\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then(function (data) {\n      // we don't have unique codes in our dataset, so generate unique ones\n      const namesToCodes = new Map();\n      const codesToNames = new Map();\n      data.forEach((row) => {\n        row.countryName = row.country;\n        if (namesToCodes.has(row.countryName)) {\n          row.countryCode = namesToCodes.get(row.countryName);\n        } else {\n          row.countryCode = row.country.substring(0, 2).toUpperCase();\n          if (codesToNames.has(row.countryCode)) {\n            let num = 0;\n            do {\n              row.countryCode = `${row.countryCode[0]}${num++}`;\n            } while (codesToNames.has(row.countryCode));\n          }\n          codesToNames.set(row.countryCode, row.countryName);\n          namesToCodes.set(row.countryName, row.countryCode);\n        }\n        delete row.country;\n      });\n      // setup the fake server with entire dataset\n      fakeServer = new FakeServer(data);\n\n      // create datasource with a reference to the fake server\n      const datasource = getServerSideDatasource(fakeServer);\n\n      // register the datasource with the grid\n      gridApi.setGridOption(\"serverSideDatasource\", datasource);\n    });\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}},"extras":["alasql"]}