{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"index.tsx","mainFileName":"index.tsx","styleFiles":[],"files":{"fakeServer.tsx":"// This fake server uses http://alasql.org/ to mimic how a real server\n// might generate sql queries from the Server-Side Row Model request.\n// To keep things simple it does the bare minimum to support the example.\nexport function FakeServer(allData) {\n    alasql.options.cache = false;\n\n    return {\n        getData: function (request) {\n            const results = executeQuery(request);\n            results.forEach((row) => {\n                row.country = {\n                    code: row.countryCode,\n                    name: row.countryName,\n                };\n                delete row.countryCode;\n                delete row.countryName;\n            });\n\n            return {\n                success: true,\n                rows: results,\n                lastRow: getLastRowIndex(request),\n            };\n        },\n        getCountries: function (sportFilter) {\n            const textFilter = sportFilter ? ' WHERE ' + textFilterMapper('sport', sportFilter.filterModels[0]) : '';\n            const sql = 'SELECT DISTINCT countryCode, countryName FROM ? ' + textFilter + ' ORDER BY countryName ASC';\n\n            return alasql(sql, [allData]).map((row) => ({\n                code: row.countryCode,\n                name: row.countryName,\n            }));\n        },\n        getSports: function (countries, sportFilter) {\n            console.log('Returning sports for ' + (countries ? countries.join(', ') : 'all countries'));\n\n            const where = countries ? \" WHERE countryCode IN ('\" + countries.join(\"', '\") + \"')\" : '';\n            const operator = countries ? ' AND ' : ' WHERE ';\n            const textFilter = sportFilter ? operator + textFilterMapper('sport', sportFilter.filterModels[0]) : '';\n            const sql = 'SELECT DISTINCT sport FROM ? ' + where + textFilter + ' ORDER BY sport ASC';\n\n            return alasql(sql, [allData]).map(function (x) {\n                return x.sport;\n            });\n        },\n    };\n\n    function executeQuery(request) {\n        const sql = buildSql(request);\n\n        console.log('[FakeServer] - about to execute query:', sql);\n\n        return alasql(sql, [allData]);\n    }\n\n    function buildSql(request) {\n        return 'SELECT * FROM ?' + whereSql(request) + orderBySql(request) + limitSql(request);\n    }\n\n    function mapColumnKey(columnKey) {\n        return columnKey === 'country' ? 'countryCode' : columnKey;\n    }\n\n    function textFilterMapper(key, item) {\n        switch (item.type) {\n            case 'equals':\n                return key + \" = '\" + item.filter + \"'\";\n            case 'notEqual':\n                return key + \"' != '\" + item.filter + \"'\";\n            case 'contains':\n                return key + \" LIKE '%\" + item.filter + \"%'\";\n            case 'notContains':\n                return key + \" NOT LIKE '%\" + item.filter + \"%'\";\n            case 'startsWith':\n                return key + \" LIKE '\" + item.filter + \"%'\";\n            case 'endsWith':\n                return key + \" LIKE '%\" + item.filter + \"'\";\n            default:\n                console.log('unknown text filter type: ' + item.type);\n        }\n    }\n\n    function createFilterSql(mapper, key, item) {\n        if (item.operator) {\n            const condition1 = mapper(key, item.condition1);\n            const condition2 = mapper(key, item.condition2);\n\n            return '(' + condition1 + ' ' + item.operator + ' ' + condition2 + ')';\n        }\n\n        return mapper(key, item);\n    }\n\n    function whereSql(request) {\n        const whereParts = [];\n        const filterModel = request.filterModel;\n\n        if (filterModel) {\n            Object.keys(filterModel).forEach(function (columnKey) {\n                const filter = filterModel[columnKey];\n\n                if (filter.filterType === 'set') {\n                    whereParts.push(mapColumnKey(columnKey) + \" IN ('\" + filter.values.join(\"', '\") + \"')\");\n                    return;\n                }\n\n                if (filter.filterType === 'text') {\n                    whereParts.push(createFilterSql(textFilterMapper, columnKey, filter));\n                    return;\n                }\n\n                if (filter.filterType === 'multi') {\n                    Object.keys(filter.filterModels).forEach(function (fm) {\n                        if (filter.filterModels[fm]) {\n                            const model = filter.filterModels[fm];\n                            switch (model.filterType) {\n                                case 'text':\n                                    whereParts.push(createFilterSql(textFilterMapper, columnKey, model));\n                                    break;\n                                case 'set':\n                                    whereParts.push(columnKey + \" IN ('\" + model.values.join(\"', '\") + \"')\");\n                                    break;\n                                default:\n                                    console.log('unknown filter type: ' + model.filterType, model);\n                                    break;\n                            }\n                        }\n                    });\n                    return;\n                }\n\n                console.log('unsupported filter type: ' + filter.filterType);\n            });\n        }\n\n        if (whereParts.length > 0) {\n            return ' WHERE ' + whereParts.join(' AND ');\n        }\n\n        return '';\n    }\n\n    function orderBySql(request) {\n        const sortModel = request.sortModel;\n\n        if (sortModel.length === 0) return '';\n\n        const sorts = sortModel.map(function (s) {\n            return mapColumnKey(s.colId) + ' ' + s.sort.toUpperCase();\n        });\n\n        return ' ORDER BY ' + sorts.join(', ');\n    }\n\n    function limitSql(request) {\n        if (request.endRow == undefined || request.startRow == undefined) {\n            return '';\n        }\n        const blockSize = request.endRow - request.startRow;\n\n        return ' LIMIT ' + blockSize + ' OFFSET ' + request.startRow;\n    }\n\n    function getLastRowIndex(request) {\n        return executeQuery({ ...request, startRow: undefined, endRow: undefined }).length;\n    }\n}\n","index.tsx":"\"use client\";\n\nimport React, {\n  useCallback,\n  useMemo,\n  useRef,\n  useState,\n  StrictMode,\n} from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport {\n  ColDef,\n  ColGroupDef,\n  GridApi,\n  GridOptions,\n  GridReadyEvent,\n  IMultiFilter,\n  IServerSideDatasource,\n  ISetFilter,\n  KeyCreatorParams,\n  ModuleRegistry,\n  RowModelType,\n  SetFilterValuesFuncParams,\n  TextFilterModule,\n  ValidationModule,\n  ValueFormatterParams,\n  createGrid,\n} from \"ag-grid-community\";\nimport {\n  ColumnMenuModule,\n  ContextMenuModule,\n  MultiFilterModule,\n  ServerSideRowModelModule,\n  SetFilterModule,\n} from \"ag-grid-enterprise\";\nimport { FakeServer } from \"./fakeServer\";\nimport { IOlympicData } from \"./interfaces\";\nModuleRegistry.registerModules([\n  ColumnMenuModule,\n  ContextMenuModule,\n  ServerSideRowModelModule,\n  SetFilterModule,\n  MultiFilterModule,\n  TextFilterModule,\n  ValidationModule /* Development Only */,\n]);\n\nconst countryCodeKeyCreator: (params: KeyCreatorParams) => string = (\n  params: KeyCreatorParams,\n) => {\n  return params.value.code;\n};\n\nconst countryValueFormatter: (params: ValueFormatterParams) => string = (\n  params: ValueFormatterParams,\n) => {\n  return params.value.name;\n};\n\nconst countryComparator: (\n  a: {\n    name: string;\n    code: string;\n  },\n  b: {\n    name: string;\n    code: string;\n  },\n) => number = (\n  a: {\n    name: string;\n    code: string;\n  },\n  b: {\n    name: string;\n    code: string;\n  },\n) => {\n  // for complex objects, need to provide a comparator to choose what to sort by\n  if (a.name < b.name) {\n    return -1;\n  } else if (a.name > b.name) {\n    return 1;\n  }\n  return 0;\n};\n\nlet fakeServer: any;\n\nlet selectedCountries: string[] | null = null;\n\nlet textFilterStored: string[] | null = null;\n\nfunction areEqual(a: null | string[], b: null | string[]) {\n  if (a == null && b == null) {\n    return true;\n  }\n  if (a != null || b != null) {\n    return false;\n  }\n  return (\n    a!.length === b!.length &&\n    a!.every(function (v, i) {\n      return b![i] === v;\n    })\n  );\n}\n\nfunction getCountryValuesAsync(params: SetFilterValuesFuncParams) {\n  const sportFilterModel = params.api.getFilterModel()[\"sport\"];\n  const countries = fakeServer.getCountries(sportFilterModel);\n  // simulating real server call with a 500ms delay\n  setTimeout(() => {\n    params.success(countries);\n  }, 500);\n}\n\nfunction getSportValuesAsync(params: SetFilterValuesFuncParams) {\n  const sportFilterModel = params.api.getFilterModel()[\"sport\"];\n  const sports = fakeServer.getSports(selectedCountries, sportFilterModel);\n  // simulating real server call with a 500ms delay\n  setTimeout(() => {\n    params.success(sports);\n  }, 500);\n}\n\nconst getServerSideDatasource: (server: any) => IServerSideDatasource = (\n  server: any,\n) => {\n  return {\n    getRows: (params) => {\n      console.log(\"[Datasource] - rows requested by grid: \", params.request);\n      // get data for request from our fake server\n      const response = server.getData(params.request);\n      // simulating real server call with a 500ms delay\n      setTimeout(() => {\n        if (response.success) {\n          // supply rows for requested block to grid\n          params.success({\n            rowData: response.rows,\n            rowCount: response.lastRow,\n          });\n        } else {\n          params.fail();\n        }\n      }, 500);\n    },\n  };\n};\n\nconst GridExample = () => {\n  const gridRef = useRef<AgGridReact<IOlympicData>>(null);\n  const containerStyle = useMemo(() => ({ width: \"100%\", height: \"100%\" }), []);\n  const gridStyle = useMemo(() => ({ height: \"100%\", width: \"100%\" }), []);\n\n  const [columnDefs, setColumnDefs] = useState<ColDef[]>([\n    {\n      field: \"country\",\n      filter: \"agSetColumnFilter\",\n      valueFormatter: countryValueFormatter,\n      filterParams: {\n        values: getCountryValuesAsync,\n        keyCreator: countryCodeKeyCreator,\n        valueFormatter: countryValueFormatter,\n        comparator: countryComparator,\n      },\n    },\n    {\n      field: \"sport\",\n      filter: \"agMultiColumnFilter\",\n      filterParams: {\n        filters: [\n          {\n            filter: \"agTextColumnFilter\",\n            filterParams: {\n              defaultOption: \"startsWith\",\n            },\n          },\n          {\n            filter: \"agSetColumnFilter\",\n            filterParams: {\n              values: getSportValuesAsync,\n            },\n          },\n        ],\n      },\n      menuTabs: [\"filterMenuTab\"],\n    },\n    { field: \"athlete\" },\n  ]);\n  const defaultColDef = useMemo<ColDef>(() => {\n    return {\n      flex: 1,\n      minWidth: 150,\n      suppressHeaderMenuButton: true,\n      suppressHeaderContextMenu: true,\n    };\n  }, []);\n\n  const onGridReady = useCallback((params: GridReadyEvent) => {\n    fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n      .then((resp) => resp.json())\n      .then((data: IOlympicData[]) => {\n        // we don't have unique codes in our dataset, so generate unique ones\n        const namesToCodes: Map<string, string> = new Map();\n        const codesToNames: Map<string, string> = new Map();\n        data.forEach((row: any) => {\n          row.countryName = row.country;\n          if (namesToCodes.has(row.countryName)) {\n            row.countryCode = namesToCodes.get(row.countryName);\n          } else {\n            row.countryCode = row.country.substring(0, 2).toUpperCase();\n            if (codesToNames.has(row.countryCode)) {\n              let num = 0;\n              do {\n                row.countryCode = `${row.countryCode[0]}${num++}`;\n              } while (codesToNames.has(row.countryCode));\n            }\n            codesToNames.set(row.countryCode, row.countryName);\n            namesToCodes.set(row.countryName, row.countryCode);\n          }\n          delete row.country;\n        });\n        // setup the fake server with entire dataset\n        fakeServer = new FakeServer(data);\n        // create datasource with a reference to the fake server\n        const datasource = getServerSideDatasource(fakeServer);\n        // register the datasource with the grid\n        params.api!.setGridOption(\"serverSideDatasource\", datasource);\n      });\n  }, []);\n\n  const onFilterChanged = useCallback(() => {\n    const countryFilterModel = gridRef.current!.api.getFilterModel()[\"country\"];\n    const sportFilterModel = gridRef.current!.api.getFilterModel()[\"sport\"];\n    const selected = countryFilterModel && countryFilterModel.values;\n    const textFilter = sportFilterModel?.filterModels[0]\n      ? sportFilterModel.filterModels[0]\n      : null;\n    if (\n      !areEqual(selectedCountries, selected) ||\n      !areEqual(textFilterStored, textFilter)\n    ) {\n      selectedCountries = selected;\n      textFilterStored = textFilter;\n      console.log(\"Refreshing sports filter\");\n      gridRef\n        .current!.api.getColumnFilterInstance<IMultiFilter>(\"sport\")\n        .then((filter) => {\n          filter!.getChildFilterInstance(1).refreshFilterValues();\n        });\n      gridRef\n        .current!.api.getColumnFilterInstance<ISetFilter>(\"country\")\n        .then((filter) => {\n          filter!.refreshFilterValues();\n        });\n    }\n  }, [textFilterStored]);\n\n  return (\n    <div style={containerStyle}>\n      <div style={gridStyle}>\n        <AgGridReact<IOlympicData>\n          ref={gridRef}\n          columnDefs={columnDefs}\n          defaultColDef={defaultColDef}\n          rowModelType={\"serverSide\"}\n          cacheBlockSize={100}\n          maxBlocksInCache={10}\n          onGridReady={onGridReady}\n          onFilterChanged={onFilterChanged}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst root = createRoot(document.getElementById(\"root\")!);\nroot.render(\n  <StrictMode>\n    <GridExample />\n  </StrictMode>,\n);\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            jsx: 'react',\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            // react\n            react: 'npm:react@18.2.0',\n            'react-dom': 'npm:react-dom@18.2.0',\n            'react-dom/client': 'npm:react-dom@18.2.0',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            css: {},\n            react: {\n                main: './umd/react.production.min.js',\n            },\n            'react-dom': {\n                main: './umd/react-dom.production.min.js',\n            },\n            'react-dom/server': {\n                main: '../umd/react-dom-server.browser.production.min.js',\n            },\n            app: {\n                main: './index.tsx',\n                defaultExtension: 'tsx',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"react":"18","react-dom":"18","@types/react":"18","@types/react-dom":"18","ag-grid-react":"33.1.0","ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}},"extras":["alasql"]}