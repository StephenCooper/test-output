{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["fakeServer.js","main.js"],"styleFiles":[],"files":{"fakeServer.js":"// This fake server uses http://alasql.org/ to mimic how a real server\n// might generate sql queries from the Server-Side Row Model request.\n// To keep things simple it does the bare minimum to support the example.\nfunction FakeServer(allData) {\n    alasql.options.cache = false;\n\n    return {\n        getData: function (request) {\n            const results = executeQuery(request);\n\n            return {\n                success: true,\n                rows: results,\n                lastRow: getLastRowIndex(request),\n            };\n        },\n    };\n\n    function executeQuery(request) {\n        const sql = buildSql(request);\n\n        console.log('[FakeServer] - about to execute query:', sql);\n\n        return alasql(sql, [allData]);\n    }\n\n    function buildSql(request) {\n        return 'SELECT * FROM ?' + whereSql(request) + orderBySql(request) + limitSql(request);\n    }\n\n    function whereSql(request) {\n        const filterModel = request.filterModel;\n\n        if (filterModel) {\n            return ' WHERE ' + createFilterSql(filterModel);\n        }\n\n        return '';\n    }\n\n    function createFilterSql(model) {\n        if (model.filterType === 'join') {\n            return '(' + model.conditions.map((condition) => createFilterSql(condition)).join(` ${model.type} `) + ')';\n        } else {\n            if (model.filterType === 'text') {\n                return textFilterMapper(model.colId, model);\n            } else if (model.filterType === 'number') {\n                return numberFilterMapper(model.colId, model);\n            } else {\n                console.log('filter type not implemented: ' + item.filterType);\n                return ' 1 = 1 ';\n            }\n        }\n    }\n\n    function textFilterMapper(key, item) {\n        switch (item.type) {\n            case 'equals':\n                return key + \" = '\" + item.filter + \"'\";\n            case 'notEqual':\n                return key + \" != '\" + item.filter + \"'\";\n            case 'contains':\n                return key + \" LIKE '%\" + item.filter + \"%'\";\n            case 'notContains':\n                return key + \" NOT LIKE '%\" + item.filter + \"%'\";\n            case 'startsWith':\n                return key + \" LIKE '\" + item.filter + \"%'\";\n            case 'endsWith':\n                return key + \" LIKE '%\" + item.filter + \"'\";\n            case 'blank':\n                return key + ' IS NULL or ' + key + \" = ''\";\n            case 'notBlank':\n                return key + ' IS NOT NULL and ' + key + \" != ''\";\n            default:\n                console.log('unknown text filter type: ' + item.type);\n        }\n    }\n\n    function numberFilterMapper(key, item) {\n        switch (item.type) {\n            case 'equals':\n                return key + ' = ' + item.filter;\n            case 'notEqual':\n                return key + ' != ' + item.filter;\n            case 'greaterThan':\n                return key + ' > ' + item.filter;\n            case 'greaterThanOrEqual':\n                return key + ' >= ' + item.filter;\n            case 'lessThan':\n                return key + ' < ' + item.filter;\n            case 'lessThanOrEqual':\n                return key + ' <= ' + item.filter;\n            case 'inRange':\n                return '(' + key + ' >= ' + item.filter + ' and ' + key + ' <= ' + item.filterTo + ')';\n            case 'blank':\n                return key + ' IS NULL';\n            case 'notBlank':\n                return key + ' IS NOT NULL';\n            default:\n                console.log('unknown number filter type: ' + item.type);\n        }\n    }\n\n    function orderBySql(request) {\n        const sortModel = request.sortModel;\n\n        if (sortModel.length === 0) return '';\n\n        const sorts = sortModel.map(function (s) {\n            return s.colId + ' ' + s.sort.toUpperCase();\n        });\n\n        return ' ORDER BY ' + sorts.join(', ');\n    }\n\n    function limitSql(request) {\n        if (request.endRow == undefined || request.startRow == undefined) {\n            return '';\n        }\n        const blockSize = request.endRow - request.startRow;\n\n        return ' LIMIT ' + blockSize + ' OFFSET ' + request.startRow;\n    }\n\n    function getLastRowIndex(request) {\n        return executeQuery({ ...request, startRow: undefined, endRow: undefined }).length;\n    }\n}\n","main.js":"let gridApi;\nconst gridOptions = {\n  columnDefs: [\n    {\n      field: \"athlete\",\n      cellDataType: \"text\",\n      minWidth: 220,\n    },\n    {\n      field: \"year\",\n      cellDataType: \"number\",\n    },\n    {\n      field: \"gold\",\n      cellDataType: \"number\",\n    },\n    {\n      field: \"silver\",\n      cellDataType: \"number\",\n    },\n    {\n      field: \"bronze\",\n      cellDataType: \"number\",\n    },\n  ],\n  defaultColDef: {\n    flex: 1,\n    minWidth: 100,\n    filter: true,\n    suppressHeaderMenuButton: true,\n    suppressHeaderContextMenu: true,\n  },\n  // use the server-side row model\n  rowModelType: \"serverSide\",\n\n  enableAdvancedFilter: true,\n};\n\nfunction getServerSideDatasource(server) {\n  return {\n    getRows: (params) => {\n      console.log(\"[Datasource] - rows requested by grid: \", params.request);\n\n      // get data for request from our fake server\n      const response = server.getData(params.request);\n\n      // simulating real server call with a 500ms delay\n      setTimeout(() => {\n        if (response.success) {\n          // supply rows for requested block to grid\n          params.success({\n            rowData: response.rows,\n            rowCount: response.lastRow,\n          });\n        } else {\n          params.fail();\n        }\n      }, 500);\n    },\n  };\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv = document.querySelector(\"#myGrid\");\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then(function (data) {\n      // setup the fake server with entire dataset\n      const fakeServer = new FakeServer(data);\n\n      // create datasource with a reference to the fake server\n      const datasource = getServerSideDatasource(fakeServer);\n\n      // register the datasource with the grid\n      gridApi.setGridOption(\"serverSideDatasource\", datasource);\n    });\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\"></div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}},"extras":["alasql"]}