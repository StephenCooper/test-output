{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"main.ts","styleFiles":["styles.css"],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n\n.example-header {\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\n    font-size: 13px;\n    padding: 8px;\n    margin-bottom: 10px;\n    border-radius: 8px;\n    background-color: #0f0f0f;\n}\n\n.example-header-row {\n    display: inline-block;\n    height: 10px;\n    margin-top: 5px;\n    margin-right: 10px;\n    width: 100px;\n    border: 1px solid grey;\n}\n\n.code-highlight-blue {\n    color: #a3b9a3;\n}\n.code-highlight-yellow {\n    color: #e8bf6a;\n}\n.code-highlight-green {\n    color: #a5c261;\n}\n.code-highlight-purple {\n    color: #977582;\n}\n.transition-width {\n    -webkit-transition: width 3s;\n    -moz-transition: width 3s;\n    -o-transition: width 3s;\n    -ms-transition: width 3s;\n    transition: width 3s;\n}\n","main.ts":"import {\n  ClientSideRowModelModule,\n  ColDef,\n  ColGroupDef,\n  ColumnApiModule,\n  GridApi,\n  GridOptions,\n  ModuleRegistry,\n  NumberFilterModule,\n  ValidationModule,\n  createGrid,\n} from \"ag-grid-community\";\nimport { ColumnMenuModule, SetFilterModule } from \"ag-grid-enterprise\";\nimport { IOlympicData } from \"./interfaces\";\n\nModuleRegistry.registerModules([\n  ColumnApiModule,\n  NumberFilterModule,\n  ClientSideRowModelModule,\n  ColumnMenuModule,\n  SetFilterModule,\n  ValidationModule /* Development Only */,\n]);\n\nlet countDownDirection = true;\n\nconst columnDefs: ColDef[] = [\n  { field: \"athlete\", minWidth: 150 },\n  { field: \"country\", minWidth: 150 },\n  { field: \"year\", minWidth: 120 },\n  { field: \"gold\" },\n  { field: \"silver\" },\n  { field: \"bronze\" },\n];\n\nlet gridApi: GridApi<IOlympicData>;\n\nconst gridOptions: GridOptions<IOlympicData> = {\n  defaultColDef: {\n    flex: 1,\n    filter: true,\n  },\n  columnDefs: columnDefs,\n};\n\n// the code below executes an action every 2,000 milliseconds.\n// it's an interval, and each time it runs, it takes the next action\n// from the 'actions' list below\nfunction startInterval(api: GridApi) {\n  let actionIndex = 0;\n\n  resetCountdown();\n  executeAfterXSeconds();\n\n  function executeAfterXSeconds() {\n    setTimeout(() => {\n      const action = getActions()[actionIndex];\n      action(api);\n      actionIndex++;\n      if (actionIndex >= getActions().length) {\n        actionIndex = 0;\n      }\n      resetCountdown();\n      executeAfterXSeconds();\n    }, 3000);\n  }\n\n  setTitleFormatted(null);\n}\n\nfunction resetCountdown() {\n  (document.querySelector(\"#animationCountdown\") as any).style.width =\n    countDownDirection ? \"100%\" : \"0%\";\n  countDownDirection = !countDownDirection;\n}\n\nfunction setTitleFormatted(\n  apiName: null | string,\n  methodName?: string,\n  paramsName?: string,\n) {\n  let html;\n  if (apiName === null) {\n    html = '<span class=\"code-highlight-yellow\">command:> </span>';\n  } else {\n    html =\n      '<span class=\"code-highlight-yellow\">command:> </span> ' +\n      '<span class=\"code-highlight-blue\">' +\n      apiName +\n      \"</span>\" +\n      '<span class=\"code-highlight-blue\">.</span>' +\n      '<span class=\"code-highlight-yellow\">' +\n      methodName +\n      \"</span>\" +\n      '<span class=\"code-highlight-blue\"></span>' +\n      '<span class=\"code-highlight-blue\">(</span>' +\n      '<span class=\"code-highlight-green\">' +\n      paramsName +\n      \"</span>\" +\n      '<span class=\"code-highlight-blue\">)</span>';\n  }\n  document.querySelector(\"#animationAction\")!.innerHTML = html;\n}\n\nfunction getActions() {\n  return [\n    function (api: GridApi) {\n      api.applyColumnState({\n        state: [{ colId: \"country\", sort: \"asc\" }],\n        defaultState: { sort: null },\n      });\n      setTitleFormatted(\"api\", \"applyColumnState\", \"country: 'asc'\");\n    },\n    function (api: GridApi) {\n      api.applyColumnState({\n        state: [\n          { colId: \"year\", sort: \"asc\" },\n          { colId: \"country\", sort: \"asc\" },\n        ],\n        defaultState: { sort: null },\n      });\n      setTitleFormatted(\n        \"api\",\n        \"applyColumnState\",\n        \"year: 'asc', country 'asc'\",\n      );\n    },\n    function (api: GridApi) {\n      api.applyColumnState({\n        state: [\n          { colId: \"year\", sort: \"asc\" },\n          { colId: \"country\", sort: \"desc\" },\n        ],\n        defaultState: { sort: null },\n      });\n      setTitleFormatted(\n        \"api\",\n        \"applyColumnState\",\n        \"year: 'asc', country: 'desc'\",\n      );\n    },\n    function (api: GridApi) {\n      api.applyColumnState({\n        defaultState: { sort: null },\n      });\n      setTitleFormatted(\"api\", \"applyColumnState\", \"clear sort\");\n    },\n  ];\n}\n\n// from actual demo page (/animation/)\nconst gridDiv =\n  document.querySelector<HTMLElement>(\"#myGrid\")! ||\n  document.querySelector(\"#animationGrid\");\n\ngridApi = createGrid(gridDiv, gridOptions);\n\nfetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n  .then((response) => response.json())\n  .then(function (data) {\n    gridApi!.setGridOption(\"rowData\", data.slice(0, 50));\n    startInterval(gridApi!);\n  });\n","index.html":"<div class=\"example-wrapper\">\n    <div class=\"example-header\">\n        <div class=\"example-header-row\">\n            <div\n                id=\"animationCountdown\"\n                class=\"transition-width\"\n                style=\"background-color: grey; height: 100%; width: 0%\"\n            ></div>\n        </div>\n        <span id=\"animationAction\"></span>\n    </div>\n    <div id=\"myGrid\"></div>\n</div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {},\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        // map tells the System loader where to look for things\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            // appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap,\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {},\n            app: {\n                main: './main.ts',\n                defaultExtension: 'ts',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-types': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/locale': {\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}