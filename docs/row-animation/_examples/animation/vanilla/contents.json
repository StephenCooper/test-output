{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n\n.example-header {\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\n    font-size: 13px;\n    padding: 8px;\n    margin-bottom: 10px;\n    border-radius: 8px;\n    background-color: #0f0f0f;\n}\n\n.example-header-row {\n    display: inline-block;\n    height: 10px;\n    margin-top: 5px;\n    margin-right: 10px;\n    width: 100px;\n    border: 1px solid grey;\n}\n\n.code-highlight-blue {\n    color: #a3b9a3;\n}\n.code-highlight-yellow {\n    color: #e8bf6a;\n}\n.code-highlight-green {\n    color: #a5c261;\n}\n.code-highlight-purple {\n    color: #977582;\n}\n.transition-width {\n    -webkit-transition: width 3s;\n    -moz-transition: width 3s;\n    -o-transition: width 3s;\n    -ms-transition: width 3s;\n    transition: width 3s;\n}\n","main.js":"let countDownDirection = true;\n\nconst columnDefs = [\n  { field: \"athlete\", minWidth: 150 },\n  { field: \"country\", minWidth: 150 },\n  { field: \"year\", minWidth: 120 },\n  { field: \"gold\" },\n  { field: \"silver\" },\n  { field: \"bronze\" },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n  defaultColDef: {\n    flex: 1,\n    filter: true,\n  },\n  columnDefs: columnDefs,\n};\n\n// the code below executes an action every 2,000 milliseconds.\n// it's an interval, and each time it runs, it takes the next action\n// from the 'actions' list below\nfunction startInterval(api) {\n  let actionIndex = 0;\n\n  resetCountdown();\n  executeAfterXSeconds();\n\n  function executeAfterXSeconds() {\n    setTimeout(() => {\n      const action = getActions()[actionIndex];\n      action(api);\n      actionIndex++;\n      if (actionIndex >= getActions().length) {\n        actionIndex = 0;\n      }\n      resetCountdown();\n      executeAfterXSeconds();\n    }, 3000);\n  }\n\n  setTitleFormatted(null);\n}\n\nfunction resetCountdown() {\n  document.querySelector(\"#animationCountdown\").style.width = countDownDirection\n    ? \"100%\"\n    : \"0%\";\n  countDownDirection = !countDownDirection;\n}\n\nfunction setTitleFormatted(apiName, methodName, paramsName) {\n  let html;\n  if (apiName === null) {\n    html = '<span class=\"code-highlight-yellow\">command:> </span>';\n  } else {\n    html =\n      '<span class=\"code-highlight-yellow\">command:> </span> ' +\n      '<span class=\"code-highlight-blue\">' +\n      apiName +\n      \"</span>\" +\n      '<span class=\"code-highlight-blue\">.</span>' +\n      '<span class=\"code-highlight-yellow\">' +\n      methodName +\n      \"</span>\" +\n      '<span class=\"code-highlight-blue\"></span>' +\n      '<span class=\"code-highlight-blue\">(</span>' +\n      '<span class=\"code-highlight-green\">' +\n      paramsName +\n      \"</span>\" +\n      '<span class=\"code-highlight-blue\">)</span>';\n  }\n  document.querySelector(\"#animationAction\").innerHTML = html;\n}\n\nfunction getActions() {\n  return [\n    function (api) {\n      api.applyColumnState({\n        state: [{ colId: \"country\", sort: \"asc\" }],\n        defaultState: { sort: null },\n      });\n      setTitleFormatted(\"api\", \"applyColumnState\", \"country: 'asc'\");\n    },\n    function (api) {\n      api.applyColumnState({\n        state: [\n          { colId: \"year\", sort: \"asc\" },\n          { colId: \"country\", sort: \"asc\" },\n        ],\n        defaultState: { sort: null },\n      });\n      setTitleFormatted(\n        \"api\",\n        \"applyColumnState\",\n        \"year: 'asc', country 'asc'\",\n      );\n    },\n    function (api) {\n      api.applyColumnState({\n        state: [\n          { colId: \"year\", sort: \"asc\" },\n          { colId: \"country\", sort: \"desc\" },\n        ],\n        defaultState: { sort: null },\n      });\n      setTitleFormatted(\n        \"api\",\n        \"applyColumnState\",\n        \"year: 'asc', country: 'desc'\",\n      );\n    },\n    function (api) {\n      api.applyColumnState({\n        defaultState: { sort: null },\n      });\n      setTitleFormatted(\"api\", \"applyColumnState\", \"clear sort\");\n    },\n  ];\n}\n\n// from actual demo page (/animation/)\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const gridDiv =\n    document.querySelector(\"#myGrid\") ||\n    document.querySelector(\"#animationGrid\");\n\n  gridApi = agGrid.createGrid(gridDiv, gridOptions);\n\n  fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n    .then((response) => response.json())\n    .then(function (data) {\n      gridApi.setGridOption(\"rowData\", data.slice(0, 50));\n      startInterval(gridApi);\n    });\n});\n","index.html":"<div class=\"example-wrapper\">\n    <div class=\"example-header\">\n        <div class=\"example-header-row\">\n            <div\n                id=\"animationCountdown\"\n                class=\"transition-width\"\n                style=\"background-color: grey; height: 100%; width: 0%\"\n            ></div>\n        </div>\n        <span id=\"animationAction\"></span>\n    </div>\n    <div id=\"myGrid\"></div>\n</div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-example","dependencies":{"ag-grid-community":"33.1.0","ag-grid-enterprise":"33.1.0"}}}